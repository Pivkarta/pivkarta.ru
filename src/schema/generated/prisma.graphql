# source: http://localhost:4466/pivkarta/dev
# timestamp: Sun Apr 04 2021 01:39:22 GMT+0000 (Coordinated Universal Time)

type Account implements Node {
  id: ID!
  balance: Float!
  User(where: UserWhereInput): User!
  Transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction!]
}

"""A connection to a list of items."""
type AccountConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AccountEdge]!
  aggregate: AggregateAccount!
}

input AccountCreateInput {
  balance: Float
  User: UserCreateOneWithoutAccountInput!
  Transactions: TransactionCreateManyWithoutAccountInput
}

input AccountCreateOneWithoutTransactionsInput {
  create: AccountCreateWithoutTransactionsInput
  connect: AccountWhereUniqueInput
}

input AccountCreateOneWithoutUserInput {
  create: AccountCreateWithoutUserInput
  connect: AccountWhereUniqueInput
}

input AccountCreateWithoutTransactionsInput {
  balance: Float
  User: UserCreateOneWithoutAccountInput!
}

input AccountCreateWithoutUserInput {
  balance: Float
  Transactions: TransactionCreateManyWithoutAccountInput
}

"""An edge in a connection."""
type AccountEdge {
  """The item at the end of the edge."""
  node: Account!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AccountOrderByInput {
  id_ASC
  id_DESC
  balance_ASC
  balance_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AccountPreviousValues {
  id: ID!
  balance: Float!
}

type AccountSubscriptionPayload {
  mutation: MutationType!
  node: Account
  updatedFields: [String!]
  previousValues: AccountPreviousValues
}

input AccountSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AccountSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AccountSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AccountSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AccountWhereInput
}

input AccountUpdateInput {
  balance: Float
  User: UserUpdateOneWithoutAccountInput
  Transactions: TransactionUpdateManyWithoutAccountInput
}

input AccountUpdateOneWithoutTransactionsInput {
  create: AccountCreateWithoutTransactionsInput
  connect: AccountWhereUniqueInput
  delete: Boolean
  update: AccountUpdateWithoutTransactionsDataInput
  upsert: AccountUpsertWithoutTransactionsInput
}

input AccountUpdateOneWithoutUserInput {
  create: AccountCreateWithoutUserInput
  connect: AccountWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AccountUpdateWithoutUserDataInput
  upsert: AccountUpsertWithoutUserInput
}

input AccountUpdateWithoutTransactionsDataInput {
  balance: Float
  User: UserUpdateOneWithoutAccountInput
}

input AccountUpdateWithoutUserDataInput {
  balance: Float
  Transactions: TransactionUpdateManyWithoutAccountInput
}

input AccountUpsertWithoutTransactionsInput {
  update: AccountUpdateWithoutTransactionsDataInput!
  create: AccountCreateWithoutTransactionsInput!
}

input AccountUpsertWithoutUserInput {
  update: AccountUpdateWithoutUserDataInput!
  create: AccountCreateWithoutUserInput!
}

input AccountWhereInput {
  """Logical AND on all given filters."""
  AND: [AccountWhereInput!]

  """Logical OR on all given filters."""
  OR: [AccountWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AccountWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  balance: Float

  """All values that are not equal to given value."""
  balance_not: Float

  """All values that are contained in given list."""
  balance_in: [Float!]

  """All values that are not contained in given list."""
  balance_not_in: [Float!]

  """All values less than the given value."""
  balance_lt: Float

  """All values less than or equal the given value."""
  balance_lte: Float

  """All values greater than the given value."""
  balance_gt: Float

  """All values greater than or equal the given value."""
  balance_gte: Float
  User: UserWhereInput
  Transactions_every: TransactionWhereInput
  Transactions_some: TransactionWhereInput
  Transactions_none: TransactionWhereInput
}

input AccountWhereUniqueInput {
  id: ID
}

type AggregateAccount {
  count: Int!
}

type AggregateBeer {
  count: Int!
}

type AggregateCallRequest {
  count: Int!
}

type AggregateChatMessage {
  count: Int!
}

type AggregateChatMessageReaded {
  count: Int!
}

type AggregateChatRoom {
  count: Int!
}

type AggregateChatRoomInvitation {
  count: Int!
}

type AggregateCity {
  count: Int!
}

type AggregateComment {
  count: Int!
}

type AggregateCommentType {
  count: Int!
}

type AggregateEthAccount {
  count: Int!
}

type AggregateEthBlock {
  count: Int!
}

type AggregateEthContractSource {
  count: Int!
}

type AggregateEthTransaction {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateGame {
  count: Int!
}

type AggregateGameResult {
  count: Int!
}

type AggregateLetsadsSmsMessageStatus {
  count: Int!
}

type AggregateLetsadsSmsMessageStatusItem {
  count: Int!
}

type AggregateLetter {
  count: Int!
}

type AggregateLog {
  count: Int!
}

type AggregateLogedIn {
  count: Int!
}

type AggregateNotice {
  count: Int!
}

type AggregateNotificationType {
  count: Int!
}

type AggregatePhoto {
  count: Int!
}

type AggregatePlace {
  count: Int!
}

type AggregatePlaceBeer {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateResetPassword {
  count: Int!
}

type AggregateResource {
  count: Int!
}

type AggregateResourceTag {
  count: Int!
}

type AggregateRoute {
  count: Int!
}

type AggregateSmsMessage {
  count: Int!
}

type AggregateSmsProvider {
  count: Int!
}

type AggregateTag {
  count: Int!
}

type AggregateTarif {
  count: Int!
}

type AggregateTarifRequest {
  count: Int!
}

type AggregateTeam {
  count: Int!
}

type AggregateTopic {
  count: Int!
}

type AggregateTournament {
  count: Int!
}

type AggregateTournamentGroup {
  count: Int!
}

type AggregateTourney {
  count: Int!
}

type AggregateTransaction {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserGroup {
  count: Int!
}

type AggregateUserTarif {
  count: Int!
}

type AggregateVote {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Beer implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  beer_id: Int
  name: String
  url_name: String
  description: String
  editor_content: Json
  country: String
  image: String
  num_comments: Int
  num_photos: Int
  manufacturer: String
  region: String
  manufacture_years: String
  container: Int
  alcohol: String
  wort_percent: String
  components: String
  bitter: Int
  type_id: Int
  color: String
  is_request: Int
  rating: Float
  add_user_id: Int
  created_at: Int
  gallery: Json
  places(where: PlaceBeerWhereInput, orderBy: PlaceBeerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PlaceBeer!]
  filtered: Boolean
  pasteurized: Boolean
}

"""A connection to a list of items."""
type BeerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BeerEdge]!
  aggregate: AggregateBeer!
}

input BeerCreateInput {
  beer_id: Int
  name: String
  url_name: String
  description: String
  editor_content: Json
  country: String
  image: String
  num_comments: Int
  num_photos: Int
  manufacturer: String
  region: String
  manufacture_years: String
  container: Int
  alcohol: String
  wort_percent: String
  components: String
  bitter: Int
  type_id: Int
  color: String
  is_request: Int
  rating: Float
  add_user_id: Int
  created_at: Int
  gallery: Json
  filtered: Boolean
  pasteurized: Boolean
  places: PlaceBeerCreateManyWithoutBeerInput
}

input BeerCreateOneWithoutPlacesInput {
  create: BeerCreateWithoutPlacesInput
  connect: BeerWhereUniqueInput
}

input BeerCreateWithoutPlacesInput {
  beer_id: Int
  name: String
  url_name: String
  description: String
  editor_content: Json
  country: String
  image: String
  num_comments: Int
  num_photos: Int
  manufacturer: String
  region: String
  manufacture_years: String
  container: Int
  alcohol: String
  wort_percent: String
  components: String
  bitter: Int
  type_id: Int
  color: String
  is_request: Int
  rating: Float
  add_user_id: Int
  created_at: Int
  gallery: Json
  filtered: Boolean
  pasteurized: Boolean
}

"""An edge in a connection."""
type BeerEdge {
  """The item at the end of the edge."""
  node: Beer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BeerOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  beer_id_ASC
  beer_id_DESC
  name_ASC
  name_DESC
  url_name_ASC
  url_name_DESC
  description_ASC
  description_DESC
  editor_content_ASC
  editor_content_DESC
  country_ASC
  country_DESC
  image_ASC
  image_DESC
  num_comments_ASC
  num_comments_DESC
  num_photos_ASC
  num_photos_DESC
  manufacturer_ASC
  manufacturer_DESC
  region_ASC
  region_DESC
  manufacture_years_ASC
  manufacture_years_DESC
  container_ASC
  container_DESC
  alcohol_ASC
  alcohol_DESC
  wort_percent_ASC
  wort_percent_DESC
  components_ASC
  components_DESC
  bitter_ASC
  bitter_DESC
  type_id_ASC
  type_id_DESC
  color_ASC
  color_DESC
  is_request_ASC
  is_request_DESC
  rating_ASC
  rating_DESC
  add_user_id_ASC
  add_user_id_DESC
  created_at_ASC
  created_at_DESC
  gallery_ASC
  gallery_DESC
  filtered_ASC
  filtered_DESC
  pasteurized_ASC
  pasteurized_DESC
}

type BeerPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  beer_id: Int
  name: String
  url_name: String
  description: String
  editor_content: Json
  country: String
  image: String
  num_comments: Int
  num_photos: Int
  manufacturer: String
  region: String
  manufacture_years: String
  container: Int
  alcohol: String
  wort_percent: String
  components: String
  bitter: Int
  type_id: Int
  color: String
  is_request: Int
  rating: Float
  add_user_id: Int
  created_at: Int
  gallery: Json
  filtered: Boolean
  pasteurized: Boolean
}

type BeerSubscriptionPayload {
  mutation: MutationType!
  node: Beer
  updatedFields: [String!]
  previousValues: BeerPreviousValues
}

input BeerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BeerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BeerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BeerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BeerWhereInput
}

input BeerUpdateInput {
  beer_id: Int
  name: String
  url_name: String
  description: String
  editor_content: Json
  country: String
  image: String
  num_comments: Int
  num_photos: Int
  manufacturer: String
  region: String
  manufacture_years: String
  container: Int
  alcohol: String
  wort_percent: String
  components: String
  bitter: Int
  type_id: Int
  color: String
  is_request: Int
  rating: Float
  add_user_id: Int
  created_at: Int
  gallery: Json
  filtered: Boolean
  pasteurized: Boolean
  places: PlaceBeerUpdateManyWithoutBeerInput
}

input BeerUpdateOneWithoutPlacesInput {
  create: BeerCreateWithoutPlacesInput
  connect: BeerWhereUniqueInput
  delete: Boolean
  update: BeerUpdateWithoutPlacesDataInput
  upsert: BeerUpsertWithoutPlacesInput
}

input BeerUpdateWithoutPlacesDataInput {
  beer_id: Int
  name: String
  url_name: String
  description: String
  editor_content: Json
  country: String
  image: String
  num_comments: Int
  num_photos: Int
  manufacturer: String
  region: String
  manufacture_years: String
  container: Int
  alcohol: String
  wort_percent: String
  components: String
  bitter: Int
  type_id: Int
  color: String
  is_request: Int
  rating: Float
  add_user_id: Int
  created_at: Int
  gallery: Json
  filtered: Boolean
  pasteurized: Boolean
}

input BeerUpsertWithoutPlacesInput {
  update: BeerUpdateWithoutPlacesDataInput!
  create: BeerCreateWithoutPlacesInput!
}

input BeerWhereInput {
  """Logical AND on all given filters."""
  AND: [BeerWhereInput!]

  """Logical OR on all given filters."""
  OR: [BeerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BeerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  beer_id: Int

  """All values that are not equal to given value."""
  beer_id_not: Int

  """All values that are contained in given list."""
  beer_id_in: [Int!]

  """All values that are not contained in given list."""
  beer_id_not_in: [Int!]

  """All values less than the given value."""
  beer_id_lt: Int

  """All values less than or equal the given value."""
  beer_id_lte: Int

  """All values greater than the given value."""
  beer_id_gt: Int

  """All values greater than or equal the given value."""
  beer_id_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  url_name: String

  """All values that are not equal to given value."""
  url_name_not: String

  """All values that are contained in given list."""
  url_name_in: [String!]

  """All values that are not contained in given list."""
  url_name_not_in: [String!]

  """All values less than the given value."""
  url_name_lt: String

  """All values less than or equal the given value."""
  url_name_lte: String

  """All values greater than the given value."""
  url_name_gt: String

  """All values greater than or equal the given value."""
  url_name_gte: String

  """All values containing the given string."""
  url_name_contains: String

  """All values not containing the given string."""
  url_name_not_contains: String

  """All values starting with the given string."""
  url_name_starts_with: String

  """All values not starting with the given string."""
  url_name_not_starts_with: String

  """All values ending with the given string."""
  url_name_ends_with: String

  """All values not ending with the given string."""
  url_name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  num_comments: Int

  """All values that are not equal to given value."""
  num_comments_not: Int

  """All values that are contained in given list."""
  num_comments_in: [Int!]

  """All values that are not contained in given list."""
  num_comments_not_in: [Int!]

  """All values less than the given value."""
  num_comments_lt: Int

  """All values less than or equal the given value."""
  num_comments_lte: Int

  """All values greater than the given value."""
  num_comments_gt: Int

  """All values greater than or equal the given value."""
  num_comments_gte: Int
  num_photos: Int

  """All values that are not equal to given value."""
  num_photos_not: Int

  """All values that are contained in given list."""
  num_photos_in: [Int!]

  """All values that are not contained in given list."""
  num_photos_not_in: [Int!]

  """All values less than the given value."""
  num_photos_lt: Int

  """All values less than or equal the given value."""
  num_photos_lte: Int

  """All values greater than the given value."""
  num_photos_gt: Int

  """All values greater than or equal the given value."""
  num_photos_gte: Int
  manufacturer: String

  """All values that are not equal to given value."""
  manufacturer_not: String

  """All values that are contained in given list."""
  manufacturer_in: [String!]

  """All values that are not contained in given list."""
  manufacturer_not_in: [String!]

  """All values less than the given value."""
  manufacturer_lt: String

  """All values less than or equal the given value."""
  manufacturer_lte: String

  """All values greater than the given value."""
  manufacturer_gt: String

  """All values greater than or equal the given value."""
  manufacturer_gte: String

  """All values containing the given string."""
  manufacturer_contains: String

  """All values not containing the given string."""
  manufacturer_not_contains: String

  """All values starting with the given string."""
  manufacturer_starts_with: String

  """All values not starting with the given string."""
  manufacturer_not_starts_with: String

  """All values ending with the given string."""
  manufacturer_ends_with: String

  """All values not ending with the given string."""
  manufacturer_not_ends_with: String
  region: String

  """All values that are not equal to given value."""
  region_not: String

  """All values that are contained in given list."""
  region_in: [String!]

  """All values that are not contained in given list."""
  region_not_in: [String!]

  """All values less than the given value."""
  region_lt: String

  """All values less than or equal the given value."""
  region_lte: String

  """All values greater than the given value."""
  region_gt: String

  """All values greater than or equal the given value."""
  region_gte: String

  """All values containing the given string."""
  region_contains: String

  """All values not containing the given string."""
  region_not_contains: String

  """All values starting with the given string."""
  region_starts_with: String

  """All values not starting with the given string."""
  region_not_starts_with: String

  """All values ending with the given string."""
  region_ends_with: String

  """All values not ending with the given string."""
  region_not_ends_with: String
  manufacture_years: String

  """All values that are not equal to given value."""
  manufacture_years_not: String

  """All values that are contained in given list."""
  manufacture_years_in: [String!]

  """All values that are not contained in given list."""
  manufacture_years_not_in: [String!]

  """All values less than the given value."""
  manufacture_years_lt: String

  """All values less than or equal the given value."""
  manufacture_years_lte: String

  """All values greater than the given value."""
  manufacture_years_gt: String

  """All values greater than or equal the given value."""
  manufacture_years_gte: String

  """All values containing the given string."""
  manufacture_years_contains: String

  """All values not containing the given string."""
  manufacture_years_not_contains: String

  """All values starting with the given string."""
  manufacture_years_starts_with: String

  """All values not starting with the given string."""
  manufacture_years_not_starts_with: String

  """All values ending with the given string."""
  manufacture_years_ends_with: String

  """All values not ending with the given string."""
  manufacture_years_not_ends_with: String
  container: Int

  """All values that are not equal to given value."""
  container_not: Int

  """All values that are contained in given list."""
  container_in: [Int!]

  """All values that are not contained in given list."""
  container_not_in: [Int!]

  """All values less than the given value."""
  container_lt: Int

  """All values less than or equal the given value."""
  container_lte: Int

  """All values greater than the given value."""
  container_gt: Int

  """All values greater than or equal the given value."""
  container_gte: Int
  alcohol: String

  """All values that are not equal to given value."""
  alcohol_not: String

  """All values that are contained in given list."""
  alcohol_in: [String!]

  """All values that are not contained in given list."""
  alcohol_not_in: [String!]

  """All values less than the given value."""
  alcohol_lt: String

  """All values less than or equal the given value."""
  alcohol_lte: String

  """All values greater than the given value."""
  alcohol_gt: String

  """All values greater than or equal the given value."""
  alcohol_gte: String

  """All values containing the given string."""
  alcohol_contains: String

  """All values not containing the given string."""
  alcohol_not_contains: String

  """All values starting with the given string."""
  alcohol_starts_with: String

  """All values not starting with the given string."""
  alcohol_not_starts_with: String

  """All values ending with the given string."""
  alcohol_ends_with: String

  """All values not ending with the given string."""
  alcohol_not_ends_with: String
  wort_percent: String

  """All values that are not equal to given value."""
  wort_percent_not: String

  """All values that are contained in given list."""
  wort_percent_in: [String!]

  """All values that are not contained in given list."""
  wort_percent_not_in: [String!]

  """All values less than the given value."""
  wort_percent_lt: String

  """All values less than or equal the given value."""
  wort_percent_lte: String

  """All values greater than the given value."""
  wort_percent_gt: String

  """All values greater than or equal the given value."""
  wort_percent_gte: String

  """All values containing the given string."""
  wort_percent_contains: String

  """All values not containing the given string."""
  wort_percent_not_contains: String

  """All values starting with the given string."""
  wort_percent_starts_with: String

  """All values not starting with the given string."""
  wort_percent_not_starts_with: String

  """All values ending with the given string."""
  wort_percent_ends_with: String

  """All values not ending with the given string."""
  wort_percent_not_ends_with: String
  components: String

  """All values that are not equal to given value."""
  components_not: String

  """All values that are contained in given list."""
  components_in: [String!]

  """All values that are not contained in given list."""
  components_not_in: [String!]

  """All values less than the given value."""
  components_lt: String

  """All values less than or equal the given value."""
  components_lte: String

  """All values greater than the given value."""
  components_gt: String

  """All values greater than or equal the given value."""
  components_gte: String

  """All values containing the given string."""
  components_contains: String

  """All values not containing the given string."""
  components_not_contains: String

  """All values starting with the given string."""
  components_starts_with: String

  """All values not starting with the given string."""
  components_not_starts_with: String

  """All values ending with the given string."""
  components_ends_with: String

  """All values not ending with the given string."""
  components_not_ends_with: String
  bitter: Int

  """All values that are not equal to given value."""
  bitter_not: Int

  """All values that are contained in given list."""
  bitter_in: [Int!]

  """All values that are not contained in given list."""
  bitter_not_in: [Int!]

  """All values less than the given value."""
  bitter_lt: Int

  """All values less than or equal the given value."""
  bitter_lte: Int

  """All values greater than the given value."""
  bitter_gt: Int

  """All values greater than or equal the given value."""
  bitter_gte: Int
  type_id: Int

  """All values that are not equal to given value."""
  type_id_not: Int

  """All values that are contained in given list."""
  type_id_in: [Int!]

  """All values that are not contained in given list."""
  type_id_not_in: [Int!]

  """All values less than the given value."""
  type_id_lt: Int

  """All values less than or equal the given value."""
  type_id_lte: Int

  """All values greater than the given value."""
  type_id_gt: Int

  """All values greater than or equal the given value."""
  type_id_gte: Int
  color: String

  """All values that are not equal to given value."""
  color_not: String

  """All values that are contained in given list."""
  color_in: [String!]

  """All values that are not contained in given list."""
  color_not_in: [String!]

  """All values less than the given value."""
  color_lt: String

  """All values less than or equal the given value."""
  color_lte: String

  """All values greater than the given value."""
  color_gt: String

  """All values greater than or equal the given value."""
  color_gte: String

  """All values containing the given string."""
  color_contains: String

  """All values not containing the given string."""
  color_not_contains: String

  """All values starting with the given string."""
  color_starts_with: String

  """All values not starting with the given string."""
  color_not_starts_with: String

  """All values ending with the given string."""
  color_ends_with: String

  """All values not ending with the given string."""
  color_not_ends_with: String
  is_request: Int

  """All values that are not equal to given value."""
  is_request_not: Int

  """All values that are contained in given list."""
  is_request_in: [Int!]

  """All values that are not contained in given list."""
  is_request_not_in: [Int!]

  """All values less than the given value."""
  is_request_lt: Int

  """All values less than or equal the given value."""
  is_request_lte: Int

  """All values greater than the given value."""
  is_request_gt: Int

  """All values greater than or equal the given value."""
  is_request_gte: Int
  rating: Float

  """All values that are not equal to given value."""
  rating_not: Float

  """All values that are contained in given list."""
  rating_in: [Float!]

  """All values that are not contained in given list."""
  rating_not_in: [Float!]

  """All values less than the given value."""
  rating_lt: Float

  """All values less than or equal the given value."""
  rating_lte: Float

  """All values greater than the given value."""
  rating_gt: Float

  """All values greater than or equal the given value."""
  rating_gte: Float
  add_user_id: Int

  """All values that are not equal to given value."""
  add_user_id_not: Int

  """All values that are contained in given list."""
  add_user_id_in: [Int!]

  """All values that are not contained in given list."""
  add_user_id_not_in: [Int!]

  """All values less than the given value."""
  add_user_id_lt: Int

  """All values less than or equal the given value."""
  add_user_id_lte: Int

  """All values greater than the given value."""
  add_user_id_gt: Int

  """All values greater than or equal the given value."""
  add_user_id_gte: Int
  created_at: Int

  """All values that are not equal to given value."""
  created_at_not: Int

  """All values that are contained in given list."""
  created_at_in: [Int!]

  """All values that are not contained in given list."""
  created_at_not_in: [Int!]

  """All values less than the given value."""
  created_at_lt: Int

  """All values less than or equal the given value."""
  created_at_lte: Int

  """All values greater than the given value."""
  created_at_gt: Int

  """All values greater than or equal the given value."""
  created_at_gte: Int
  filtered: Boolean

  """All values that are not equal to given value."""
  filtered_not: Boolean
  pasteurized: Boolean

  """All values that are not equal to given value."""
  pasteurized_not: Boolean
  places_every: PlaceBeerWhereInput
  places_some: PlaceBeerWhereInput
  places_none: PlaceBeerWhereInput
}

input BeerWhereUniqueInput {
  id: ID
  beer_id: Int
}

type CallRequest implements Node {
  id: ID!
  called_descriptions: Json!
  caller_descriptions: Json!
  status: CallRequestStatus
  startedAt: DateTime
  endedAt: DateTime
  Called(where: UserWhereInput): User!
  Caller(where: UserWhereInput): User
  Room(where: ChatRoomWhereInput): ChatRoom
}

"""A connection to a list of items."""
type CallRequestConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CallRequestEdge]!
  aggregate: AggregateCallRequest!
}

input CallRequestCreateInput {
  called_descriptions: Json!
  caller_descriptions: Json!
  status: CallRequestStatus
  startedAt: DateTime
  endedAt: DateTime
  Called: UserCreateOneInput!
  Caller: UserCreateOneInput
  Room: ChatRoomCreateOneWithoutCallRequestsInput
}

input CallRequestCreateManyWithoutRoomInput {
  create: [CallRequestCreateWithoutRoomInput!]
  connect: [CallRequestWhereUniqueInput!]
}

input CallRequestCreateWithoutRoomInput {
  called_descriptions: Json!
  caller_descriptions: Json!
  status: CallRequestStatus
  startedAt: DateTime
  endedAt: DateTime
  Called: UserCreateOneInput!
  Caller: UserCreateOneInput
}

"""An edge in a connection."""
type CallRequestEdge {
  """The item at the end of the edge."""
  node: CallRequest!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CallRequestOrderByInput {
  id_ASC
  id_DESC
  called_descriptions_ASC
  called_descriptions_DESC
  caller_descriptions_ASC
  caller_descriptions_DESC
  status_ASC
  status_DESC
  startedAt_ASC
  startedAt_DESC
  endedAt_ASC
  endedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CallRequestPreviousValues {
  id: ID!
  called_descriptions: Json!
  caller_descriptions: Json!
  status: CallRequestStatus
  startedAt: DateTime
  endedAt: DateTime
}

enum CallRequestStatus {
  Created
  Rejected
  Accepted
  Started
  Canceled
  Missed
  Ended
  Error
  Billed
}

type CallRequestSubscriptionPayload {
  mutation: MutationType!
  node: CallRequest
  updatedFields: [String!]
  previousValues: CallRequestPreviousValues
}

input CallRequestSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CallRequestSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CallRequestSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CallRequestSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CallRequestWhereInput
}

input CallRequestUpdateInput {
  called_descriptions: Json
  caller_descriptions: Json
  status: CallRequestStatus
  startedAt: DateTime
  endedAt: DateTime
  Called: UserUpdateOneInput
  Caller: UserUpdateOneInput
  Room: ChatRoomUpdateOneWithoutCallRequestsInput
}

input CallRequestUpdateManyWithoutRoomInput {
  create: [CallRequestCreateWithoutRoomInput!]
  connect: [CallRequestWhereUniqueInput!]
  disconnect: [CallRequestWhereUniqueInput!]
  delete: [CallRequestWhereUniqueInput!]
  update: [CallRequestUpdateWithWhereUniqueWithoutRoomInput!]
  upsert: [CallRequestUpsertWithWhereUniqueWithoutRoomInput!]
}

input CallRequestUpdateWithoutRoomDataInput {
  called_descriptions: Json
  caller_descriptions: Json
  status: CallRequestStatus
  startedAt: DateTime
  endedAt: DateTime
  Called: UserUpdateOneInput
  Caller: UserUpdateOneInput
}

input CallRequestUpdateWithWhereUniqueWithoutRoomInput {
  where: CallRequestWhereUniqueInput!
  data: CallRequestUpdateWithoutRoomDataInput!
}

input CallRequestUpsertWithWhereUniqueWithoutRoomInput {
  where: CallRequestWhereUniqueInput!
  update: CallRequestUpdateWithoutRoomDataInput!
  create: CallRequestCreateWithoutRoomInput!
}

input CallRequestWhereInput {
  """Logical AND on all given filters."""
  AND: [CallRequestWhereInput!]

  """Logical OR on all given filters."""
  OR: [CallRequestWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CallRequestWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  status: CallRequestStatus

  """All values that are not equal to given value."""
  status_not: CallRequestStatus

  """All values that are contained in given list."""
  status_in: [CallRequestStatus!]

  """All values that are not contained in given list."""
  status_not_in: [CallRequestStatus!]
  startedAt: DateTime

  """All values that are not equal to given value."""
  startedAt_not: DateTime

  """All values that are contained in given list."""
  startedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  startedAt_not_in: [DateTime!]

  """All values less than the given value."""
  startedAt_lt: DateTime

  """All values less than or equal the given value."""
  startedAt_lte: DateTime

  """All values greater than the given value."""
  startedAt_gt: DateTime

  """All values greater than or equal the given value."""
  startedAt_gte: DateTime
  endedAt: DateTime

  """All values that are not equal to given value."""
  endedAt_not: DateTime

  """All values that are contained in given list."""
  endedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  endedAt_not_in: [DateTime!]

  """All values less than the given value."""
  endedAt_lt: DateTime

  """All values less than or equal the given value."""
  endedAt_lte: DateTime

  """All values greater than the given value."""
  endedAt_gt: DateTime

  """All values greater than or equal the given value."""
  endedAt_gte: DateTime
  Called: UserWhereInput
  Caller: UserWhereInput
  Room: ChatRoomWhereInput
}

input CallRequestWhereUniqueInput {
  id: ID
}

type ChatMessage implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: Json
  contentText: String
  CreatedBy(where: UserWhereInput): User
  Room(where: ChatRoomWhereInput): ChatRoom
  ReadedBy(where: ChatMessageReadedWhereInput, orderBy: ChatMessageReadedOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChatMessageReaded!]
}

"""A connection to a list of items."""
type ChatMessageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChatMessageEdge]!
  aggregate: AggregateChatMessage!
}

input ChatMessageCreateInput {
  content: Json
  contentText: String
  CreatedBy: UserCreateOneWithoutMessagesInput
  Room: ChatRoomCreateOneWithoutMessagesInput
  ReadedBy: ChatMessageReadedCreateManyWithoutMessageInput
}

input ChatMessageCreateManyWithoutCreatedByInput {
  create: [ChatMessageCreateWithoutCreatedByInput!]
  connect: [ChatMessageWhereUniqueInput!]
}

input ChatMessageCreateManyWithoutRoomInput {
  create: [ChatMessageCreateWithoutRoomInput!]
  connect: [ChatMessageWhereUniqueInput!]
}

input ChatMessageCreateOneInput {
  create: ChatMessageCreateInput
  connect: ChatMessageWhereUniqueInput
}

input ChatMessageCreateOneWithoutReadedByInput {
  create: ChatMessageCreateWithoutReadedByInput
  connect: ChatMessageWhereUniqueInput
}

input ChatMessageCreateWithoutCreatedByInput {
  content: Json
  contentText: String
  Room: ChatRoomCreateOneWithoutMessagesInput
  ReadedBy: ChatMessageReadedCreateManyWithoutMessageInput
}

input ChatMessageCreateWithoutReadedByInput {
  content: Json
  contentText: String
  CreatedBy: UserCreateOneWithoutMessagesInput
  Room: ChatRoomCreateOneWithoutMessagesInput
}

input ChatMessageCreateWithoutRoomInput {
  content: Json
  contentText: String
  CreatedBy: UserCreateOneWithoutMessagesInput
  ReadedBy: ChatMessageReadedCreateManyWithoutMessageInput
}

"""An edge in a connection."""
type ChatMessageEdge {
  """The item at the end of the edge."""
  node: ChatMessage!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ChatMessageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  content_ASC
  content_DESC
  contentText_ASC
  contentText_DESC
}

type ChatMessagePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: Json
  contentText: String
}

type ChatMessageReaded implements Node {
  id: ID!
  createdAt: DateTime!
  Message(where: ChatMessageWhereInput): ChatMessage!
  User(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type ChatMessageReadedConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChatMessageReadedEdge]!
  aggregate: AggregateChatMessageReaded!
}

input ChatMessageReadedCreateInput {
  Message: ChatMessageCreateOneWithoutReadedByInput!
  User: UserCreateOneWithoutReadedMessagesInput!
}

input ChatMessageReadedCreateManyWithoutMessageInput {
  create: [ChatMessageReadedCreateWithoutMessageInput!]
  connect: [ChatMessageReadedWhereUniqueInput!]
}

input ChatMessageReadedCreateManyWithoutUserInput {
  create: [ChatMessageReadedCreateWithoutUserInput!]
  connect: [ChatMessageReadedWhereUniqueInput!]
}

input ChatMessageReadedCreateWithoutMessageInput {
  User: UserCreateOneWithoutReadedMessagesInput!
}

input ChatMessageReadedCreateWithoutUserInput {
  Message: ChatMessageCreateOneWithoutReadedByInput!
}

"""An edge in a connection."""
type ChatMessageReadedEdge {
  """The item at the end of the edge."""
  node: ChatMessageReaded!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ChatMessageReadedOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ChatMessageReadedPreviousValues {
  id: ID!
  createdAt: DateTime!
}

type ChatMessageReadedSubscriptionPayload {
  mutation: MutationType!
  node: ChatMessageReaded
  updatedFields: [String!]
  previousValues: ChatMessageReadedPreviousValues
}

input ChatMessageReadedSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatMessageReadedSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatMessageReadedSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatMessageReadedSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChatMessageReadedWhereInput
}

input ChatMessageReadedUpdateInput {
  Message: ChatMessageUpdateOneWithoutReadedByInput
  User: UserUpdateOneWithoutReadedMessagesInput
}

input ChatMessageReadedUpdateManyWithoutMessageInput {
  create: [ChatMessageReadedCreateWithoutMessageInput!]
  connect: [ChatMessageReadedWhereUniqueInput!]
  disconnect: [ChatMessageReadedWhereUniqueInput!]
  delete: [ChatMessageReadedWhereUniqueInput!]
  update: [ChatMessageReadedUpdateWithWhereUniqueWithoutMessageInput!]
  upsert: [ChatMessageReadedUpsertWithWhereUniqueWithoutMessageInput!]
}

input ChatMessageReadedUpdateManyWithoutUserInput {
  create: [ChatMessageReadedCreateWithoutUserInput!]
  connect: [ChatMessageReadedWhereUniqueInput!]
  disconnect: [ChatMessageReadedWhereUniqueInput!]
  delete: [ChatMessageReadedWhereUniqueInput!]
  update: [ChatMessageReadedUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ChatMessageReadedUpsertWithWhereUniqueWithoutUserInput!]
}

input ChatMessageReadedUpdateWithoutMessageDataInput {
  User: UserUpdateOneWithoutReadedMessagesInput
}

input ChatMessageReadedUpdateWithoutUserDataInput {
  Message: ChatMessageUpdateOneWithoutReadedByInput
}

input ChatMessageReadedUpdateWithWhereUniqueWithoutMessageInput {
  where: ChatMessageReadedWhereUniqueInput!
  data: ChatMessageReadedUpdateWithoutMessageDataInput!
}

input ChatMessageReadedUpdateWithWhereUniqueWithoutUserInput {
  where: ChatMessageReadedWhereUniqueInput!
  data: ChatMessageReadedUpdateWithoutUserDataInput!
}

input ChatMessageReadedUpsertWithWhereUniqueWithoutMessageInput {
  where: ChatMessageReadedWhereUniqueInput!
  update: ChatMessageReadedUpdateWithoutMessageDataInput!
  create: ChatMessageReadedCreateWithoutMessageInput!
}

input ChatMessageReadedUpsertWithWhereUniqueWithoutUserInput {
  where: ChatMessageReadedWhereUniqueInput!
  update: ChatMessageReadedUpdateWithoutUserDataInput!
  create: ChatMessageReadedCreateWithoutUserInput!
}

input ChatMessageReadedWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatMessageReadedWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatMessageReadedWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatMessageReadedWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  Message: ChatMessageWhereInput
  User: UserWhereInput
}

input ChatMessageReadedWhereUniqueInput {
  id: ID
}

type ChatMessageSubscriptionPayload {
  mutation: MutationType!
  node: ChatMessage
  updatedFields: [String!]
  previousValues: ChatMessagePreviousValues
}

input ChatMessageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatMessageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatMessageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatMessageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChatMessageWhereInput
}

input ChatMessageUpdateDataInput {
  content: Json
  contentText: String
  CreatedBy: UserUpdateOneWithoutMessagesInput
  Room: ChatRoomUpdateOneWithoutMessagesInput
  ReadedBy: ChatMessageReadedUpdateManyWithoutMessageInput
}

input ChatMessageUpdateInput {
  content: Json
  contentText: String
  CreatedBy: UserUpdateOneWithoutMessagesInput
  Room: ChatRoomUpdateOneWithoutMessagesInput
  ReadedBy: ChatMessageReadedUpdateManyWithoutMessageInput
}

input ChatMessageUpdateManyWithoutCreatedByInput {
  create: [ChatMessageCreateWithoutCreatedByInput!]
  connect: [ChatMessageWhereUniqueInput!]
  disconnect: [ChatMessageWhereUniqueInput!]
  delete: [ChatMessageWhereUniqueInput!]
  update: [ChatMessageUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [ChatMessageUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input ChatMessageUpdateManyWithoutRoomInput {
  create: [ChatMessageCreateWithoutRoomInput!]
  connect: [ChatMessageWhereUniqueInput!]
  disconnect: [ChatMessageWhereUniqueInput!]
  delete: [ChatMessageWhereUniqueInput!]
  update: [ChatMessageUpdateWithWhereUniqueWithoutRoomInput!]
  upsert: [ChatMessageUpsertWithWhereUniqueWithoutRoomInput!]
}

input ChatMessageUpdateOneInput {
  create: ChatMessageCreateInput
  connect: ChatMessageWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ChatMessageUpdateDataInput
  upsert: ChatMessageUpsertNestedInput
}

input ChatMessageUpdateOneWithoutReadedByInput {
  create: ChatMessageCreateWithoutReadedByInput
  connect: ChatMessageWhereUniqueInput
  delete: Boolean
  update: ChatMessageUpdateWithoutReadedByDataInput
  upsert: ChatMessageUpsertWithoutReadedByInput
}

input ChatMessageUpdateWithoutCreatedByDataInput {
  content: Json
  contentText: String
  Room: ChatRoomUpdateOneWithoutMessagesInput
  ReadedBy: ChatMessageReadedUpdateManyWithoutMessageInput
}

input ChatMessageUpdateWithoutReadedByDataInput {
  content: Json
  contentText: String
  CreatedBy: UserUpdateOneWithoutMessagesInput
  Room: ChatRoomUpdateOneWithoutMessagesInput
}

input ChatMessageUpdateWithoutRoomDataInput {
  content: Json
  contentText: String
  CreatedBy: UserUpdateOneWithoutMessagesInput
  ReadedBy: ChatMessageReadedUpdateManyWithoutMessageInput
}

input ChatMessageUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ChatMessageWhereUniqueInput!
  data: ChatMessageUpdateWithoutCreatedByDataInput!
}

input ChatMessageUpdateWithWhereUniqueWithoutRoomInput {
  where: ChatMessageWhereUniqueInput!
  data: ChatMessageUpdateWithoutRoomDataInput!
}

input ChatMessageUpsertNestedInput {
  update: ChatMessageUpdateDataInput!
  create: ChatMessageCreateInput!
}

input ChatMessageUpsertWithoutReadedByInput {
  update: ChatMessageUpdateWithoutReadedByDataInput!
  create: ChatMessageCreateWithoutReadedByInput!
}

input ChatMessageUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ChatMessageWhereUniqueInput!
  update: ChatMessageUpdateWithoutCreatedByDataInput!
  create: ChatMessageCreateWithoutCreatedByInput!
}

input ChatMessageUpsertWithWhereUniqueWithoutRoomInput {
  where: ChatMessageWhereUniqueInput!
  update: ChatMessageUpdateWithoutRoomDataInput!
  create: ChatMessageCreateWithoutRoomInput!
}

input ChatMessageWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatMessageWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatMessageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatMessageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  contentText: String

  """All values that are not equal to given value."""
  contentText_not: String

  """All values that are contained in given list."""
  contentText_in: [String!]

  """All values that are not contained in given list."""
  contentText_not_in: [String!]

  """All values less than the given value."""
  contentText_lt: String

  """All values less than or equal the given value."""
  contentText_lte: String

  """All values greater than the given value."""
  contentText_gt: String

  """All values greater than or equal the given value."""
  contentText_gte: String

  """All values containing the given string."""
  contentText_contains: String

  """All values not containing the given string."""
  contentText_not_contains: String

  """All values starting with the given string."""
  contentText_starts_with: String

  """All values not starting with the given string."""
  contentText_not_starts_with: String

  """All values ending with the given string."""
  contentText_ends_with: String

  """All values not ending with the given string."""
  contentText_not_ends_with: String
  CreatedBy: UserWhereInput
  Room: ChatRoomWhereInput
  ReadedBy_every: ChatMessageReadedWhereInput
  ReadedBy_some: ChatMessageReadedWhereInput
  ReadedBy_none: ChatMessageReadedWhereInput
}

input ChatMessageWhereUniqueInput {
  id: ID
}

type ChatRoom implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  image: String
  code: ID
  Members(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  CreatedBy(where: UserWhereInput): User!
  Messages(where: ChatMessageWhereInput, orderBy: ChatMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChatMessage!]
  isPublic: Boolean
  Invitations(where: ChatRoomInvitationWhereInput, orderBy: ChatRoomInvitationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChatRoomInvitation!]
  CallRequests(where: CallRequestWhereInput, orderBy: CallRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CallRequest!]
}

"""A connection to a list of items."""
type ChatRoomConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChatRoomEdge]!
  aggregate: AggregateChatRoom!
}

input ChatRoomCreateInput {
  name: String!
  description: String
  image: String
  code: ID
  isPublic: Boolean
  Members: UserCreateManyWithoutRoomsInput
  CreatedBy: UserCreateOneWithoutCreatedRoomsInput!
  Messages: ChatMessageCreateManyWithoutRoomInput
  Invitations: ChatRoomInvitationCreateManyWithoutChatRoomInput
  CallRequests: CallRequestCreateManyWithoutRoomInput
}

input ChatRoomCreateManyWithoutCreatedByInput {
  create: [ChatRoomCreateWithoutCreatedByInput!]
  connect: [ChatRoomWhereUniqueInput!]
}

input ChatRoomCreateManyWithoutMembersInput {
  create: [ChatRoomCreateWithoutMembersInput!]
  connect: [ChatRoomWhereUniqueInput!]
}

input ChatRoomCreateOneWithoutCallRequestsInput {
  create: ChatRoomCreateWithoutCallRequestsInput
  connect: ChatRoomWhereUniqueInput
}

input ChatRoomCreateOneWithoutInvitationsInput {
  create: ChatRoomCreateWithoutInvitationsInput
  connect: ChatRoomWhereUniqueInput
}

input ChatRoomCreateOneWithoutMessagesInput {
  create: ChatRoomCreateWithoutMessagesInput
  connect: ChatRoomWhereUniqueInput
}

input ChatRoomCreateWithoutCallRequestsInput {
  name: String!
  description: String
  image: String
  code: ID
  isPublic: Boolean
  Members: UserCreateManyWithoutRoomsInput
  CreatedBy: UserCreateOneWithoutCreatedRoomsInput!
  Messages: ChatMessageCreateManyWithoutRoomInput
  Invitations: ChatRoomInvitationCreateManyWithoutChatRoomInput
}

input ChatRoomCreateWithoutCreatedByInput {
  name: String!
  description: String
  image: String
  code: ID
  isPublic: Boolean
  Members: UserCreateManyWithoutRoomsInput
  Messages: ChatMessageCreateManyWithoutRoomInput
  Invitations: ChatRoomInvitationCreateManyWithoutChatRoomInput
  CallRequests: CallRequestCreateManyWithoutRoomInput
}

input ChatRoomCreateWithoutInvitationsInput {
  name: String!
  description: String
  image: String
  code: ID
  isPublic: Boolean
  Members: UserCreateManyWithoutRoomsInput
  CreatedBy: UserCreateOneWithoutCreatedRoomsInput!
  Messages: ChatMessageCreateManyWithoutRoomInput
  CallRequests: CallRequestCreateManyWithoutRoomInput
}

input ChatRoomCreateWithoutMembersInput {
  name: String!
  description: String
  image: String
  code: ID
  isPublic: Boolean
  CreatedBy: UserCreateOneWithoutCreatedRoomsInput!
  Messages: ChatMessageCreateManyWithoutRoomInput
  Invitations: ChatRoomInvitationCreateManyWithoutChatRoomInput
  CallRequests: CallRequestCreateManyWithoutRoomInput
}

input ChatRoomCreateWithoutMessagesInput {
  name: String!
  description: String
  image: String
  code: ID
  isPublic: Boolean
  Members: UserCreateManyWithoutRoomsInput
  CreatedBy: UserCreateOneWithoutCreatedRoomsInput!
  Invitations: ChatRoomInvitationCreateManyWithoutChatRoomInput
  CallRequests: CallRequestCreateManyWithoutRoomInput
}

"""An edge in a connection."""
type ChatRoomEdge {
  """The item at the end of the edge."""
  node: ChatRoom!

  """A cursor for use in pagination."""
  cursor: String!
}

type ChatRoomInvitation implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  CreatedBy(where: UserWhereInput): User!
  User(where: UserWhereInput): User!
  ChatRoom(where: ChatRoomWhereInput): ChatRoom!
  Notice(where: NoticeWhereInput): Notice
}

"""A connection to a list of items."""
type ChatRoomInvitationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChatRoomInvitationEdge]!
  aggregate: AggregateChatRoomInvitation!
}

input ChatRoomInvitationCreateInput {
  CreatedBy: UserCreateOneInput!
  User: UserCreateOneInput!
  ChatRoom: ChatRoomCreateOneWithoutInvitationsInput!
  Notice: NoticeCreateOneWithoutChatRoomInvitationInput
}

input ChatRoomInvitationCreateManyWithoutChatRoomInput {
  create: [ChatRoomInvitationCreateWithoutChatRoomInput!]
  connect: [ChatRoomInvitationWhereUniqueInput!]
}

input ChatRoomInvitationCreateOneWithoutNoticeInput {
  create: ChatRoomInvitationCreateWithoutNoticeInput
  connect: ChatRoomInvitationWhereUniqueInput
}

input ChatRoomInvitationCreateWithoutChatRoomInput {
  CreatedBy: UserCreateOneInput!
  User: UserCreateOneInput!
  Notice: NoticeCreateOneWithoutChatRoomInvitationInput
}

input ChatRoomInvitationCreateWithoutNoticeInput {
  CreatedBy: UserCreateOneInput!
  User: UserCreateOneInput!
  ChatRoom: ChatRoomCreateOneWithoutInvitationsInput!
}

"""An edge in a connection."""
type ChatRoomInvitationEdge {
  """The item at the end of the edge."""
  node: ChatRoomInvitation!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ChatRoomInvitationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ChatRoomInvitationPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ChatRoomInvitationSubscriptionPayload {
  mutation: MutationType!
  node: ChatRoomInvitation
  updatedFields: [String!]
  previousValues: ChatRoomInvitationPreviousValues
}

input ChatRoomInvitationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatRoomInvitationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatRoomInvitationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatRoomInvitationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChatRoomInvitationWhereInput
}

input ChatRoomInvitationUpdateInput {
  CreatedBy: UserUpdateOneInput
  User: UserUpdateOneInput
  ChatRoom: ChatRoomUpdateOneWithoutInvitationsInput
  Notice: NoticeUpdateOneWithoutChatRoomInvitationInput
}

input ChatRoomInvitationUpdateManyWithoutChatRoomInput {
  create: [ChatRoomInvitationCreateWithoutChatRoomInput!]
  connect: [ChatRoomInvitationWhereUniqueInput!]
  disconnect: [ChatRoomInvitationWhereUniqueInput!]
  delete: [ChatRoomInvitationWhereUniqueInput!]
  update: [ChatRoomInvitationUpdateWithWhereUniqueWithoutChatRoomInput!]
  upsert: [ChatRoomInvitationUpsertWithWhereUniqueWithoutChatRoomInput!]
}

input ChatRoomInvitationUpdateOneWithoutNoticeInput {
  create: ChatRoomInvitationCreateWithoutNoticeInput
  connect: ChatRoomInvitationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ChatRoomInvitationUpdateWithoutNoticeDataInput
  upsert: ChatRoomInvitationUpsertWithoutNoticeInput
}

input ChatRoomInvitationUpdateWithoutChatRoomDataInput {
  CreatedBy: UserUpdateOneInput
  User: UserUpdateOneInput
  Notice: NoticeUpdateOneWithoutChatRoomInvitationInput
}

input ChatRoomInvitationUpdateWithoutNoticeDataInput {
  CreatedBy: UserUpdateOneInput
  User: UserUpdateOneInput
  ChatRoom: ChatRoomUpdateOneWithoutInvitationsInput
}

input ChatRoomInvitationUpdateWithWhereUniqueWithoutChatRoomInput {
  where: ChatRoomInvitationWhereUniqueInput!
  data: ChatRoomInvitationUpdateWithoutChatRoomDataInput!
}

input ChatRoomInvitationUpsertWithoutNoticeInput {
  update: ChatRoomInvitationUpdateWithoutNoticeDataInput!
  create: ChatRoomInvitationCreateWithoutNoticeInput!
}

input ChatRoomInvitationUpsertWithWhereUniqueWithoutChatRoomInput {
  where: ChatRoomInvitationWhereUniqueInput!
  update: ChatRoomInvitationUpdateWithoutChatRoomDataInput!
  create: ChatRoomInvitationCreateWithoutChatRoomInput!
}

input ChatRoomInvitationWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatRoomInvitationWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatRoomInvitationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatRoomInvitationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  CreatedBy: UserWhereInput
  User: UserWhereInput
  ChatRoom: ChatRoomWhereInput
  Notice: NoticeWhereInput
}

input ChatRoomInvitationWhereUniqueInput {
  id: ID
}

enum ChatRoomOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  image_ASC
  image_DESC
  code_ASC
  code_DESC
  isPublic_ASC
  isPublic_DESC
}

type ChatRoomPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  image: String
  code: ID
  isPublic: Boolean
}

type ChatRoomSubscriptionPayload {
  mutation: MutationType!
  node: ChatRoom
  updatedFields: [String!]
  previousValues: ChatRoomPreviousValues
}

input ChatRoomSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatRoomSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatRoomSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatRoomSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChatRoomWhereInput
}

input ChatRoomUpdateInput {
  name: String
  description: String
  image: String
  code: ID
  isPublic: Boolean
  Members: UserUpdateManyWithoutRoomsInput
  CreatedBy: UserUpdateOneWithoutCreatedRoomsInput
  Messages: ChatMessageUpdateManyWithoutRoomInput
  Invitations: ChatRoomInvitationUpdateManyWithoutChatRoomInput
  CallRequests: CallRequestUpdateManyWithoutRoomInput
}

input ChatRoomUpdateManyWithoutCreatedByInput {
  create: [ChatRoomCreateWithoutCreatedByInput!]
  connect: [ChatRoomWhereUniqueInput!]
  disconnect: [ChatRoomWhereUniqueInput!]
  delete: [ChatRoomWhereUniqueInput!]
  update: [ChatRoomUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [ChatRoomUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input ChatRoomUpdateManyWithoutMembersInput {
  create: [ChatRoomCreateWithoutMembersInput!]
  connect: [ChatRoomWhereUniqueInput!]
  disconnect: [ChatRoomWhereUniqueInput!]
  delete: [ChatRoomWhereUniqueInput!]
  update: [ChatRoomUpdateWithWhereUniqueWithoutMembersInput!]
  upsert: [ChatRoomUpsertWithWhereUniqueWithoutMembersInput!]
}

input ChatRoomUpdateOneWithoutCallRequestsInput {
  create: ChatRoomCreateWithoutCallRequestsInput
  connect: ChatRoomWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ChatRoomUpdateWithoutCallRequestsDataInput
  upsert: ChatRoomUpsertWithoutCallRequestsInput
}

input ChatRoomUpdateOneWithoutInvitationsInput {
  create: ChatRoomCreateWithoutInvitationsInput
  connect: ChatRoomWhereUniqueInput
  delete: Boolean
  update: ChatRoomUpdateWithoutInvitationsDataInput
  upsert: ChatRoomUpsertWithoutInvitationsInput
}

input ChatRoomUpdateOneWithoutMessagesInput {
  create: ChatRoomCreateWithoutMessagesInput
  connect: ChatRoomWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ChatRoomUpdateWithoutMessagesDataInput
  upsert: ChatRoomUpsertWithoutMessagesInput
}

input ChatRoomUpdateWithoutCallRequestsDataInput {
  name: String
  description: String
  image: String
  code: ID
  isPublic: Boolean
  Members: UserUpdateManyWithoutRoomsInput
  CreatedBy: UserUpdateOneWithoutCreatedRoomsInput
  Messages: ChatMessageUpdateManyWithoutRoomInput
  Invitations: ChatRoomInvitationUpdateManyWithoutChatRoomInput
}

input ChatRoomUpdateWithoutCreatedByDataInput {
  name: String
  description: String
  image: String
  code: ID
  isPublic: Boolean
  Members: UserUpdateManyWithoutRoomsInput
  Messages: ChatMessageUpdateManyWithoutRoomInput
  Invitations: ChatRoomInvitationUpdateManyWithoutChatRoomInput
  CallRequests: CallRequestUpdateManyWithoutRoomInput
}

input ChatRoomUpdateWithoutInvitationsDataInput {
  name: String
  description: String
  image: String
  code: ID
  isPublic: Boolean
  Members: UserUpdateManyWithoutRoomsInput
  CreatedBy: UserUpdateOneWithoutCreatedRoomsInput
  Messages: ChatMessageUpdateManyWithoutRoomInput
  CallRequests: CallRequestUpdateManyWithoutRoomInput
}

input ChatRoomUpdateWithoutMembersDataInput {
  name: String
  description: String
  image: String
  code: ID
  isPublic: Boolean
  CreatedBy: UserUpdateOneWithoutCreatedRoomsInput
  Messages: ChatMessageUpdateManyWithoutRoomInput
  Invitations: ChatRoomInvitationUpdateManyWithoutChatRoomInput
  CallRequests: CallRequestUpdateManyWithoutRoomInput
}

input ChatRoomUpdateWithoutMessagesDataInput {
  name: String
  description: String
  image: String
  code: ID
  isPublic: Boolean
  Members: UserUpdateManyWithoutRoomsInput
  CreatedBy: UserUpdateOneWithoutCreatedRoomsInput
  Invitations: ChatRoomInvitationUpdateManyWithoutChatRoomInput
  CallRequests: CallRequestUpdateManyWithoutRoomInput
}

input ChatRoomUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ChatRoomWhereUniqueInput!
  data: ChatRoomUpdateWithoutCreatedByDataInput!
}

input ChatRoomUpdateWithWhereUniqueWithoutMembersInput {
  where: ChatRoomWhereUniqueInput!
  data: ChatRoomUpdateWithoutMembersDataInput!
}

input ChatRoomUpsertWithoutCallRequestsInput {
  update: ChatRoomUpdateWithoutCallRequestsDataInput!
  create: ChatRoomCreateWithoutCallRequestsInput!
}

input ChatRoomUpsertWithoutInvitationsInput {
  update: ChatRoomUpdateWithoutInvitationsDataInput!
  create: ChatRoomCreateWithoutInvitationsInput!
}

input ChatRoomUpsertWithoutMessagesInput {
  update: ChatRoomUpdateWithoutMessagesDataInput!
  create: ChatRoomCreateWithoutMessagesInput!
}

input ChatRoomUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ChatRoomWhereUniqueInput!
  update: ChatRoomUpdateWithoutCreatedByDataInput!
  create: ChatRoomCreateWithoutCreatedByInput!
}

input ChatRoomUpsertWithWhereUniqueWithoutMembersInput {
  where: ChatRoomWhereUniqueInput!
  update: ChatRoomUpdateWithoutMembersDataInput!
  create: ChatRoomCreateWithoutMembersInput!
}

input ChatRoomWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatRoomWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatRoomWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatRoomWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  code: ID

  """All values that are not equal to given value."""
  code_not: ID

  """All values that are contained in given list."""
  code_in: [ID!]

  """All values that are not contained in given list."""
  code_not_in: [ID!]

  """All values less than the given value."""
  code_lt: ID

  """All values less than or equal the given value."""
  code_lte: ID

  """All values greater than the given value."""
  code_gt: ID

  """All values greater than or equal the given value."""
  code_gte: ID

  """All values containing the given string."""
  code_contains: ID

  """All values not containing the given string."""
  code_not_contains: ID

  """All values starting with the given string."""
  code_starts_with: ID

  """All values not starting with the given string."""
  code_not_starts_with: ID

  """All values ending with the given string."""
  code_ends_with: ID

  """All values not ending with the given string."""
  code_not_ends_with: ID
  isPublic: Boolean

  """All values that are not equal to given value."""
  isPublic_not: Boolean
  Members_every: UserWhereInput
  Members_some: UserWhereInput
  Members_none: UserWhereInput
  CreatedBy: UserWhereInput
  Messages_every: ChatMessageWhereInput
  Messages_some: ChatMessageWhereInput
  Messages_none: ChatMessageWhereInput
  Invitations_every: ChatRoomInvitationWhereInput
  Invitations_some: ChatRoomInvitationWhereInput
  Invitations_none: ChatRoomInvitationWhereInput
  CallRequests_every: CallRequestWhereInput
  CallRequests_some: CallRequestWhereInput
  CallRequests_none: CallRequestWhereInput
}

input ChatRoomWhereUniqueInput {
  id: ID
  code: ID
}

type City implements Node {
  id: ID!
  city_id: Int
  name: String!
  alias: String!
  lat: Float!
  lng: Float!
}

"""A connection to a list of items."""
type CityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CityEdge]!
  aggregate: AggregateCity!
}

input CityCreateInput {
  city_id: Int
  name: String!
  alias: String!
  lat: Float!
  lng: Float!
}

"""An edge in a connection."""
type CityEdge {
  """The item at the end of the edge."""
  node: City!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CityOrderByInput {
  id_ASC
  id_DESC
  city_id_ASC
  city_id_DESC
  name_ASC
  name_DESC
  alias_ASC
  alias_DESC
  lat_ASC
  lat_DESC
  lng_ASC
  lng_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CityPreviousValues {
  id: ID!
  city_id: Int
  name: String!
  alias: String!
  lat: Float!
  lng: Float!
}

type CitySubscriptionPayload {
  mutation: MutationType!
  node: City
  updatedFields: [String!]
  previousValues: CityPreviousValues
}

input CitySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CitySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CitySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CitySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CityWhereInput
}

input CityUpdateInput {
  city_id: Int
  name: String
  alias: String
  lat: Float
  lng: Float
}

input CityWhereInput {
  """Logical AND on all given filters."""
  AND: [CityWhereInput!]

  """Logical OR on all given filters."""
  OR: [CityWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CityWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  city_id: Int

  """All values that are not equal to given value."""
  city_id_not: Int

  """All values that are contained in given list."""
  city_id_in: [Int!]

  """All values that are not contained in given list."""
  city_id_not_in: [Int!]

  """All values less than the given value."""
  city_id_lt: Int

  """All values less than or equal the given value."""
  city_id_lte: Int

  """All values greater than the given value."""
  city_id_gt: Int

  """All values greater than or equal the given value."""
  city_id_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  alias: String

  """All values that are not equal to given value."""
  alias_not: String

  """All values that are contained in given list."""
  alias_in: [String!]

  """All values that are not contained in given list."""
  alias_not_in: [String!]

  """All values less than the given value."""
  alias_lt: String

  """All values less than or equal the given value."""
  alias_lte: String

  """All values greater than the given value."""
  alias_gt: String

  """All values greater than or equal the given value."""
  alias_gte: String

  """All values containing the given string."""
  alias_contains: String

  """All values not containing the given string."""
  alias_not_contains: String

  """All values starting with the given string."""
  alias_starts_with: String

  """All values not starting with the given string."""
  alias_not_starts_with: String

  """All values ending with the given string."""
  alias_ends_with: String

  """All values not ending with the given string."""
  alias_not_ends_with: String
  lat: Float

  """All values that are not equal to given value."""
  lat_not: Float

  """All values that are contained in given list."""
  lat_in: [Float!]

  """All values that are not contained in given list."""
  lat_not_in: [Float!]

  """All values less than the given value."""
  lat_lt: Float

  """All values less than or equal the given value."""
  lat_lte: Float

  """All values greater than the given value."""
  lat_gt: Float

  """All values greater than or equal the given value."""
  lat_gte: Float
  lng: Float

  """All values that are not equal to given value."""
  lng_not: Float

  """All values that are contained in given list."""
  lng_in: [Float!]

  """All values that are not contained in given list."""
  lng_not_in: [Float!]

  """All values less than the given value."""
  lng_lt: Float

  """All values less than or equal the given value."""
  lng_lte: Float

  """All values greater than the given value."""
  lng_gt: Float

  """All values greater than or equal the given value."""
  lng_gte: Float
}

input CityWhereUniqueInput {
  id: ID
  city_id: Int
  name: String
  alias: String
}

type Comment implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  comment_id: Int
  object_id: Int
  type_id: Int!
  editor_content: Json!
  is_checked: Int!
  name: String
  created_by(where: UserWhereInput): User
  parent: ID
}

"""A connection to a list of items."""
type CommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  comment_id: Int
  object_id: Int
  type_id: Int
  editor_content: Json!
  is_checked: Int
  name: String
  parent: ID
  created_by: UserCreateOneWithoutCommentsInput
}

input CommentCreateManyWithoutCreated_byInput {
  create: [CommentCreateWithoutCreated_byInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutCreated_byInput {
  comment_id: Int
  object_id: Int
  type_id: Int
  editor_content: Json!
  is_checked: Int
  name: String
  parent: ID
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge."""
  node: Comment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  comment_id_ASC
  comment_id_DESC
  object_id_ASC
  object_id_DESC
  type_id_ASC
  type_id_DESC
  editor_content_ASC
  editor_content_DESC
  is_checked_ASC
  is_checked_DESC
  name_ASC
  name_DESC
  parent_ASC
  parent_DESC
}

type CommentPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  comment_id: Int
  object_id: Int
  type_id: Int!
  editor_content: Json!
  is_checked: Int!
  name: String
  parent: ID
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
}

type CommentType implements Node {
  id: ID!
  name: String!
  code: Int!
}

"""A connection to a list of items."""
type CommentTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentTypeEdge]!
  aggregate: AggregateCommentType!
}

input CommentTypeCreateInput {
  name: String!
  code: Int!
}

"""An edge in a connection."""
type CommentTypeEdge {
  """The item at the end of the edge."""
  node: CommentType!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CommentTypeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  code_ASC
  code_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CommentTypePreviousValues {
  id: ID!
  name: String!
  code: Int!
}

type CommentTypeSubscriptionPayload {
  mutation: MutationType!
  node: CommentType
  updatedFields: [String!]
  previousValues: CommentTypePreviousValues
}

input CommentTypeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentTypeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentTypeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentTypeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CommentTypeWhereInput
}

input CommentTypeUpdateInput {
  name: String
  code: Int
}

input CommentTypeWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentTypeWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentTypeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentTypeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  code: Int

  """All values that are not equal to given value."""
  code_not: Int

  """All values that are contained in given list."""
  code_in: [Int!]

  """All values that are not contained in given list."""
  code_not_in: [Int!]

  """All values less than the given value."""
  code_lt: Int

  """All values less than or equal the given value."""
  code_lte: Int

  """All values greater than the given value."""
  code_gt: Int

  """All values greater than or equal the given value."""
  code_gte: Int
}

input CommentTypeWhereUniqueInput {
  id: ID
  name: String
  code: Int
}

input CommentUpdateInput {
  comment_id: Int
  object_id: Int
  type_id: Int
  editor_content: Json
  is_checked: Int
  name: String
  parent: ID
  created_by: UserUpdateOneWithoutCommentsInput
}

input CommentUpdateManyWithoutCreated_byInput {
  create: [CommentCreateWithoutCreated_byInput!]
  connect: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutCreated_byInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutCreated_byInput!]
}

input CommentUpdateWithoutCreated_byDataInput {
  comment_id: Int
  object_id: Int
  type_id: Int
  editor_content: Json
  is_checked: Int
  name: String
  parent: ID
}

input CommentUpdateWithWhereUniqueWithoutCreated_byInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutCreated_byDataInput!
}

input CommentUpsertWithWhereUniqueWithoutCreated_byInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutCreated_byDataInput!
  create: CommentCreateWithoutCreated_byInput!
}

input CommentWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  comment_id: Int

  """All values that are not equal to given value."""
  comment_id_not: Int

  """All values that are contained in given list."""
  comment_id_in: [Int!]

  """All values that are not contained in given list."""
  comment_id_not_in: [Int!]

  """All values less than the given value."""
  comment_id_lt: Int

  """All values less than or equal the given value."""
  comment_id_lte: Int

  """All values greater than the given value."""
  comment_id_gt: Int

  """All values greater than or equal the given value."""
  comment_id_gte: Int
  object_id: Int

  """All values that are not equal to given value."""
  object_id_not: Int

  """All values that are contained in given list."""
  object_id_in: [Int!]

  """All values that are not contained in given list."""
  object_id_not_in: [Int!]

  """All values less than the given value."""
  object_id_lt: Int

  """All values less than or equal the given value."""
  object_id_lte: Int

  """All values greater than the given value."""
  object_id_gt: Int

  """All values greater than or equal the given value."""
  object_id_gte: Int
  type_id: Int

  """All values that are not equal to given value."""
  type_id_not: Int

  """All values that are contained in given list."""
  type_id_in: [Int!]

  """All values that are not contained in given list."""
  type_id_not_in: [Int!]

  """All values less than the given value."""
  type_id_lt: Int

  """All values less than or equal the given value."""
  type_id_lte: Int

  """All values greater than the given value."""
  type_id_gt: Int

  """All values greater than or equal the given value."""
  type_id_gte: Int
  is_checked: Int

  """All values that are not equal to given value."""
  is_checked_not: Int

  """All values that are contained in given list."""
  is_checked_in: [Int!]

  """All values that are not contained in given list."""
  is_checked_not_in: [Int!]

  """All values less than the given value."""
  is_checked_lt: Int

  """All values less than or equal the given value."""
  is_checked_lte: Int

  """All values greater than the given value."""
  is_checked_gt: Int

  """All values greater than or equal the given value."""
  is_checked_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  parent: ID

  """All values that are not equal to given value."""
  parent_not: ID

  """All values that are contained in given list."""
  parent_in: [ID!]

  """All values that are not contained in given list."""
  parent_not_in: [ID!]

  """All values less than the given value."""
  parent_lt: ID

  """All values less than or equal the given value."""
  parent_lte: ID

  """All values greater than the given value."""
  parent_gt: ID

  """All values greater than or equal the given value."""
  parent_gte: ID

  """All values containing the given string."""
  parent_contains: ID

  """All values not containing the given string."""
  parent_not_contains: ID

  """All values starting with the given string."""
  parent_starts_with: ID

  """All values not starting with the given string."""
  parent_not_starts_with: ID

  """All values ending with the given string."""
  parent_ends_with: ID

  """All values not ending with the given string."""
  parent_not_ends_with: ID
  created_by: UserWhereInput
}

input CommentWhereUniqueInput {
  id: ID
  comment_id: Int
}

scalar DateTime

type EthAccount implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: Json
  address: String!
  type: EthAccountType
  CreatedBy(where: UserWhereInput): User
  Transaction(where: EthTransactionWhereInput): EthTransaction
  IncomeTransactions(where: EthTransactionWhereInput, orderBy: EthTransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EthTransaction!]
  OutcomeTransactions(where: EthTransactionWhereInput, orderBy: EthTransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EthTransaction!]
  source: String
  bytecode: String
  abi: Json
  ContractSource(where: EthContractSourceWhereInput): EthContractSource
  BlocksMined(where: EthBlockWhereInput, orderBy: EthBlockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EthBlock!]
  UserAuthed(where: UserWhereInput): User
}

"""A connection to a list of items."""
type EthAccountConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EthAccountEdge]!
  aggregate: AggregateEthAccount!
}

input EthAccountCreateInput {
  name: String
  description: Json
  address: String!
  type: EthAccountType
  source: String
  bytecode: String
  abi: Json
  CreatedBy: UserCreateOneWithoutEthAccountsInput
  Transaction: EthTransactionCreateOneWithoutAccountInput
  IncomeTransactions: EthTransactionCreateManyWithoutReceiverInput
  OutcomeTransactions: EthTransactionCreateManyWithoutSenderInput
  ContractSource: EthContractSourceCreateOneWithoutAccountsInput
  BlocksMined: EthBlockCreateManyWithoutMinerInput
  UserAuthed: UserCreateOneInput
}

input EthAccountCreateManyWithoutContractSourceInput {
  create: [EthAccountCreateWithoutContractSourceInput!]
  connect: [EthAccountWhereUniqueInput!]
}

input EthAccountCreateManyWithoutCreatedByInput {
  create: [EthAccountCreateWithoutCreatedByInput!]
  connect: [EthAccountWhereUniqueInput!]
}

input EthAccountCreateOneWithoutBlocksMinedInput {
  create: EthAccountCreateWithoutBlocksMinedInput
  connect: EthAccountWhereUniqueInput
}

input EthAccountCreateOneWithoutIncomeTransactionsInput {
  create: EthAccountCreateWithoutIncomeTransactionsInput
  connect: EthAccountWhereUniqueInput
}

input EthAccountCreateOneWithoutOutcomeTransactionsInput {
  create: EthAccountCreateWithoutOutcomeTransactionsInput
  connect: EthAccountWhereUniqueInput
}

input EthAccountCreateOneWithoutTransactionInput {
  create: EthAccountCreateWithoutTransactionInput
  connect: EthAccountWhereUniqueInput
}

input EthAccountCreateWithoutBlocksMinedInput {
  name: String
  description: Json
  address: String!
  type: EthAccountType
  source: String
  bytecode: String
  abi: Json
  CreatedBy: UserCreateOneWithoutEthAccountsInput
  Transaction: EthTransactionCreateOneWithoutAccountInput
  IncomeTransactions: EthTransactionCreateManyWithoutReceiverInput
  OutcomeTransactions: EthTransactionCreateManyWithoutSenderInput
  ContractSource: EthContractSourceCreateOneWithoutAccountsInput
  UserAuthed: UserCreateOneInput
}

input EthAccountCreateWithoutContractSourceInput {
  name: String
  description: Json
  address: String!
  type: EthAccountType
  source: String
  bytecode: String
  abi: Json
  CreatedBy: UserCreateOneWithoutEthAccountsInput
  Transaction: EthTransactionCreateOneWithoutAccountInput
  IncomeTransactions: EthTransactionCreateManyWithoutReceiverInput
  OutcomeTransactions: EthTransactionCreateManyWithoutSenderInput
  BlocksMined: EthBlockCreateManyWithoutMinerInput
  UserAuthed: UserCreateOneInput
}

input EthAccountCreateWithoutCreatedByInput {
  name: String
  description: Json
  address: String!
  type: EthAccountType
  source: String
  bytecode: String
  abi: Json
  Transaction: EthTransactionCreateOneWithoutAccountInput
  IncomeTransactions: EthTransactionCreateManyWithoutReceiverInput
  OutcomeTransactions: EthTransactionCreateManyWithoutSenderInput
  ContractSource: EthContractSourceCreateOneWithoutAccountsInput
  BlocksMined: EthBlockCreateManyWithoutMinerInput
  UserAuthed: UserCreateOneInput
}

input EthAccountCreateWithoutIncomeTransactionsInput {
  name: String
  description: Json
  address: String!
  type: EthAccountType
  source: String
  bytecode: String
  abi: Json
  CreatedBy: UserCreateOneWithoutEthAccountsInput
  Transaction: EthTransactionCreateOneWithoutAccountInput
  OutcomeTransactions: EthTransactionCreateManyWithoutSenderInput
  ContractSource: EthContractSourceCreateOneWithoutAccountsInput
  BlocksMined: EthBlockCreateManyWithoutMinerInput
  UserAuthed: UserCreateOneInput
}

input EthAccountCreateWithoutOutcomeTransactionsInput {
  name: String
  description: Json
  address: String!
  type: EthAccountType
  source: String
  bytecode: String
  abi: Json
  CreatedBy: UserCreateOneWithoutEthAccountsInput
  Transaction: EthTransactionCreateOneWithoutAccountInput
  IncomeTransactions: EthTransactionCreateManyWithoutReceiverInput
  ContractSource: EthContractSourceCreateOneWithoutAccountsInput
  BlocksMined: EthBlockCreateManyWithoutMinerInput
  UserAuthed: UserCreateOneInput
}

input EthAccountCreateWithoutTransactionInput {
  name: String
  description: Json
  address: String!
  type: EthAccountType
  source: String
  bytecode: String
  abi: Json
  CreatedBy: UserCreateOneWithoutEthAccountsInput
  IncomeTransactions: EthTransactionCreateManyWithoutReceiverInput
  OutcomeTransactions: EthTransactionCreateManyWithoutSenderInput
  ContractSource: EthContractSourceCreateOneWithoutAccountsInput
  BlocksMined: EthBlockCreateManyWithoutMinerInput
  UserAuthed: UserCreateOneInput
}

"""An edge in a connection."""
type EthAccountEdge {
  """The item at the end of the edge."""
  node: EthAccount!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EthAccountOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  address_ASC
  address_DESC
  type_ASC
  type_DESC
  source_ASC
  source_DESC
  bytecode_ASC
  bytecode_DESC
  abi_ASC
  abi_DESC
}

type EthAccountPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: Json
  address: String!
  type: EthAccountType
  source: String
  bytecode: String
  abi: Json
}

type EthAccountSubscriptionPayload {
  mutation: MutationType!
  node: EthAccount
  updatedFields: [String!]
  previousValues: EthAccountPreviousValues
}

input EthAccountSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EthAccountSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EthAccountSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EthAccountSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EthAccountWhereInput
}

enum EthAccountType {
  Account
  Contract
}

input EthAccountUpdateInput {
  name: String
  description: Json
  address: String
  type: EthAccountType
  source: String
  bytecode: String
  abi: Json
  CreatedBy: UserUpdateOneWithoutEthAccountsInput
  Transaction: EthTransactionUpdateOneWithoutAccountInput
  IncomeTransactions: EthTransactionUpdateManyWithoutReceiverInput
  OutcomeTransactions: EthTransactionUpdateManyWithoutSenderInput
  ContractSource: EthContractSourceUpdateOneWithoutAccountsInput
  BlocksMined: EthBlockUpdateManyWithoutMinerInput
  UserAuthed: UserUpdateOneInput
}

input EthAccountUpdateManyWithoutContractSourceInput {
  create: [EthAccountCreateWithoutContractSourceInput!]
  connect: [EthAccountWhereUniqueInput!]
  disconnect: [EthAccountWhereUniqueInput!]
  delete: [EthAccountWhereUniqueInput!]
  update: [EthAccountUpdateWithWhereUniqueWithoutContractSourceInput!]
  upsert: [EthAccountUpsertWithWhereUniqueWithoutContractSourceInput!]
}

input EthAccountUpdateManyWithoutCreatedByInput {
  create: [EthAccountCreateWithoutCreatedByInput!]
  connect: [EthAccountWhereUniqueInput!]
  disconnect: [EthAccountWhereUniqueInput!]
  delete: [EthAccountWhereUniqueInput!]
  update: [EthAccountUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [EthAccountUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input EthAccountUpdateOneWithoutBlocksMinedInput {
  create: EthAccountCreateWithoutBlocksMinedInput
  connect: EthAccountWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EthAccountUpdateWithoutBlocksMinedDataInput
  upsert: EthAccountUpsertWithoutBlocksMinedInput
}

input EthAccountUpdateOneWithoutIncomeTransactionsInput {
  create: EthAccountCreateWithoutIncomeTransactionsInput
  connect: EthAccountWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EthAccountUpdateWithoutIncomeTransactionsDataInput
  upsert: EthAccountUpsertWithoutIncomeTransactionsInput
}

input EthAccountUpdateOneWithoutOutcomeTransactionsInput {
  create: EthAccountCreateWithoutOutcomeTransactionsInput
  connect: EthAccountWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EthAccountUpdateWithoutOutcomeTransactionsDataInput
  upsert: EthAccountUpsertWithoutOutcomeTransactionsInput
}

input EthAccountUpdateOneWithoutTransactionInput {
  create: EthAccountCreateWithoutTransactionInput
  connect: EthAccountWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EthAccountUpdateWithoutTransactionDataInput
  upsert: EthAccountUpsertWithoutTransactionInput
}

input EthAccountUpdateWithoutBlocksMinedDataInput {
  name: String
  description: Json
  address: String
  type: EthAccountType
  source: String
  bytecode: String
  abi: Json
  CreatedBy: UserUpdateOneWithoutEthAccountsInput
  Transaction: EthTransactionUpdateOneWithoutAccountInput
  IncomeTransactions: EthTransactionUpdateManyWithoutReceiverInput
  OutcomeTransactions: EthTransactionUpdateManyWithoutSenderInput
  ContractSource: EthContractSourceUpdateOneWithoutAccountsInput
  UserAuthed: UserUpdateOneInput
}

input EthAccountUpdateWithoutContractSourceDataInput {
  name: String
  description: Json
  address: String
  type: EthAccountType
  source: String
  bytecode: String
  abi: Json
  CreatedBy: UserUpdateOneWithoutEthAccountsInput
  Transaction: EthTransactionUpdateOneWithoutAccountInput
  IncomeTransactions: EthTransactionUpdateManyWithoutReceiverInput
  OutcomeTransactions: EthTransactionUpdateManyWithoutSenderInput
  BlocksMined: EthBlockUpdateManyWithoutMinerInput
  UserAuthed: UserUpdateOneInput
}

input EthAccountUpdateWithoutCreatedByDataInput {
  name: String
  description: Json
  address: String
  type: EthAccountType
  source: String
  bytecode: String
  abi: Json
  Transaction: EthTransactionUpdateOneWithoutAccountInput
  IncomeTransactions: EthTransactionUpdateManyWithoutReceiverInput
  OutcomeTransactions: EthTransactionUpdateManyWithoutSenderInput
  ContractSource: EthContractSourceUpdateOneWithoutAccountsInput
  BlocksMined: EthBlockUpdateManyWithoutMinerInput
  UserAuthed: UserUpdateOneInput
}

input EthAccountUpdateWithoutIncomeTransactionsDataInput {
  name: String
  description: Json
  address: String
  type: EthAccountType
  source: String
  bytecode: String
  abi: Json
  CreatedBy: UserUpdateOneWithoutEthAccountsInput
  Transaction: EthTransactionUpdateOneWithoutAccountInput
  OutcomeTransactions: EthTransactionUpdateManyWithoutSenderInput
  ContractSource: EthContractSourceUpdateOneWithoutAccountsInput
  BlocksMined: EthBlockUpdateManyWithoutMinerInput
  UserAuthed: UserUpdateOneInput
}

input EthAccountUpdateWithoutOutcomeTransactionsDataInput {
  name: String
  description: Json
  address: String
  type: EthAccountType
  source: String
  bytecode: String
  abi: Json
  CreatedBy: UserUpdateOneWithoutEthAccountsInput
  Transaction: EthTransactionUpdateOneWithoutAccountInput
  IncomeTransactions: EthTransactionUpdateManyWithoutReceiverInput
  ContractSource: EthContractSourceUpdateOneWithoutAccountsInput
  BlocksMined: EthBlockUpdateManyWithoutMinerInput
  UserAuthed: UserUpdateOneInput
}

input EthAccountUpdateWithoutTransactionDataInput {
  name: String
  description: Json
  address: String
  type: EthAccountType
  source: String
  bytecode: String
  abi: Json
  CreatedBy: UserUpdateOneWithoutEthAccountsInput
  IncomeTransactions: EthTransactionUpdateManyWithoutReceiverInput
  OutcomeTransactions: EthTransactionUpdateManyWithoutSenderInput
  ContractSource: EthContractSourceUpdateOneWithoutAccountsInput
  BlocksMined: EthBlockUpdateManyWithoutMinerInput
  UserAuthed: UserUpdateOneInput
}

input EthAccountUpdateWithWhereUniqueWithoutContractSourceInput {
  where: EthAccountWhereUniqueInput!
  data: EthAccountUpdateWithoutContractSourceDataInput!
}

input EthAccountUpdateWithWhereUniqueWithoutCreatedByInput {
  where: EthAccountWhereUniqueInput!
  data: EthAccountUpdateWithoutCreatedByDataInput!
}

input EthAccountUpsertWithoutBlocksMinedInput {
  update: EthAccountUpdateWithoutBlocksMinedDataInput!
  create: EthAccountCreateWithoutBlocksMinedInput!
}

input EthAccountUpsertWithoutIncomeTransactionsInput {
  update: EthAccountUpdateWithoutIncomeTransactionsDataInput!
  create: EthAccountCreateWithoutIncomeTransactionsInput!
}

input EthAccountUpsertWithoutOutcomeTransactionsInput {
  update: EthAccountUpdateWithoutOutcomeTransactionsDataInput!
  create: EthAccountCreateWithoutOutcomeTransactionsInput!
}

input EthAccountUpsertWithoutTransactionInput {
  update: EthAccountUpdateWithoutTransactionDataInput!
  create: EthAccountCreateWithoutTransactionInput!
}

input EthAccountUpsertWithWhereUniqueWithoutContractSourceInput {
  where: EthAccountWhereUniqueInput!
  update: EthAccountUpdateWithoutContractSourceDataInput!
  create: EthAccountCreateWithoutContractSourceInput!
}

input EthAccountUpsertWithWhereUniqueWithoutCreatedByInput {
  where: EthAccountWhereUniqueInput!
  update: EthAccountUpdateWithoutCreatedByDataInput!
  create: EthAccountCreateWithoutCreatedByInput!
}

input EthAccountWhereInput {
  """Logical AND on all given filters."""
  AND: [EthAccountWhereInput!]

  """Logical OR on all given filters."""
  OR: [EthAccountWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EthAccountWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  type: EthAccountType

  """All values that are not equal to given value."""
  type_not: EthAccountType

  """All values that are contained in given list."""
  type_in: [EthAccountType!]

  """All values that are not contained in given list."""
  type_not_in: [EthAccountType!]
  source: String

  """All values that are not equal to given value."""
  source_not: String

  """All values that are contained in given list."""
  source_in: [String!]

  """All values that are not contained in given list."""
  source_not_in: [String!]

  """All values less than the given value."""
  source_lt: String

  """All values less than or equal the given value."""
  source_lte: String

  """All values greater than the given value."""
  source_gt: String

  """All values greater than or equal the given value."""
  source_gte: String

  """All values containing the given string."""
  source_contains: String

  """All values not containing the given string."""
  source_not_contains: String

  """All values starting with the given string."""
  source_starts_with: String

  """All values not starting with the given string."""
  source_not_starts_with: String

  """All values ending with the given string."""
  source_ends_with: String

  """All values not ending with the given string."""
  source_not_ends_with: String
  bytecode: String

  """All values that are not equal to given value."""
  bytecode_not: String

  """All values that are contained in given list."""
  bytecode_in: [String!]

  """All values that are not contained in given list."""
  bytecode_not_in: [String!]

  """All values less than the given value."""
  bytecode_lt: String

  """All values less than or equal the given value."""
  bytecode_lte: String

  """All values greater than the given value."""
  bytecode_gt: String

  """All values greater than or equal the given value."""
  bytecode_gte: String

  """All values containing the given string."""
  bytecode_contains: String

  """All values not containing the given string."""
  bytecode_not_contains: String

  """All values starting with the given string."""
  bytecode_starts_with: String

  """All values not starting with the given string."""
  bytecode_not_starts_with: String

  """All values ending with the given string."""
  bytecode_ends_with: String

  """All values not ending with the given string."""
  bytecode_not_ends_with: String
  CreatedBy: UserWhereInput
  Transaction: EthTransactionWhereInput
  IncomeTransactions_every: EthTransactionWhereInput
  IncomeTransactions_some: EthTransactionWhereInput
  IncomeTransactions_none: EthTransactionWhereInput
  OutcomeTransactions_every: EthTransactionWhereInput
  OutcomeTransactions_some: EthTransactionWhereInput
  OutcomeTransactions_none: EthTransactionWhereInput
  ContractSource: EthContractSourceWhereInput
  BlocksMined_every: EthBlockWhereInput
  BlocksMined_some: EthBlockWhereInput
  BlocksMined_none: EthBlockWhereInput
  UserAuthed: UserWhereInput
}

input EthAccountWhereUniqueInput {
  id: ID
  address: String
}

type EthBlock implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  hash: String!
  number: Int!
  difficulty: Float
  totalDifficulty: Float
  extraData: String
  gasLimit: Float
  gasUsed: Float
  mixHash: String
  nonce: String
  parentHash: String
  receiptsRoot: String
  sha3Uncles: String
  size: Int
  stateRoot: String
  date: DateTime
  Miner(where: EthAccountWhereInput): EthAccount
  Transactions(where: EthTransactionWhereInput, orderBy: EthTransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EthTransaction!]
  transactionsRoot: String
  transactions_count: Int
  Uncles(where: EthBlockWhereInput, orderBy: EthBlockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EthBlock!]
}

"""A connection to a list of items."""
type EthBlockConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EthBlockEdge]!
  aggregate: AggregateEthBlock!
}

input EthBlockCreateInput {
  hash: String!
  number: Int!
  difficulty: Float
  totalDifficulty: Float
  extraData: String
  gasLimit: Float
  gasUsed: Float
  mixHash: String
  nonce: String
  parentHash: String
  receiptsRoot: String
  sha3Uncles: String
  size: Int
  stateRoot: String
  date: DateTime
  transactionsRoot: String
  transactions_count: Int
  Miner: EthAccountCreateOneWithoutBlocksMinedInput
  Transactions: EthTransactionCreateManyWithoutBlockInput
  Uncles: EthBlockCreateManyInput
}

input EthBlockCreateManyInput {
  create: [EthBlockCreateInput!]
  connect: [EthBlockWhereUniqueInput!]
}

input EthBlockCreateManyWithoutMinerInput {
  create: [EthBlockCreateWithoutMinerInput!]
  connect: [EthBlockWhereUniqueInput!]
}

input EthBlockCreateOneWithoutTransactionsInput {
  create: EthBlockCreateWithoutTransactionsInput
  connect: EthBlockWhereUniqueInput
}

input EthBlockCreateWithoutMinerInput {
  hash: String!
  number: Int!
  difficulty: Float
  totalDifficulty: Float
  extraData: String
  gasLimit: Float
  gasUsed: Float
  mixHash: String
  nonce: String
  parentHash: String
  receiptsRoot: String
  sha3Uncles: String
  size: Int
  stateRoot: String
  date: DateTime
  transactionsRoot: String
  transactions_count: Int
  Transactions: EthTransactionCreateManyWithoutBlockInput
  Uncles: EthBlockCreateManyInput
}

input EthBlockCreateWithoutTransactionsInput {
  hash: String!
  number: Int!
  difficulty: Float
  totalDifficulty: Float
  extraData: String
  gasLimit: Float
  gasUsed: Float
  mixHash: String
  nonce: String
  parentHash: String
  receiptsRoot: String
  sha3Uncles: String
  size: Int
  stateRoot: String
  date: DateTime
  transactionsRoot: String
  transactions_count: Int
  Miner: EthAccountCreateOneWithoutBlocksMinedInput
  Uncles: EthBlockCreateManyInput
}

"""An edge in a connection."""
type EthBlockEdge {
  """The item at the end of the edge."""
  node: EthBlock!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EthBlockOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  hash_ASC
  hash_DESC
  number_ASC
  number_DESC
  difficulty_ASC
  difficulty_DESC
  totalDifficulty_ASC
  totalDifficulty_DESC
  extraData_ASC
  extraData_DESC
  gasLimit_ASC
  gasLimit_DESC
  gasUsed_ASC
  gasUsed_DESC
  mixHash_ASC
  mixHash_DESC
  nonce_ASC
  nonce_DESC
  parentHash_ASC
  parentHash_DESC
  receiptsRoot_ASC
  receiptsRoot_DESC
  sha3Uncles_ASC
  sha3Uncles_DESC
  size_ASC
  size_DESC
  stateRoot_ASC
  stateRoot_DESC
  date_ASC
  date_DESC
  transactionsRoot_ASC
  transactionsRoot_DESC
  transactions_count_ASC
  transactions_count_DESC
}

type EthBlockPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  hash: String!
  number: Int!
  difficulty: Float
  totalDifficulty: Float
  extraData: String
  gasLimit: Float
  gasUsed: Float
  mixHash: String
  nonce: String
  parentHash: String
  receiptsRoot: String
  sha3Uncles: String
  size: Int
  stateRoot: String
  date: DateTime
  transactionsRoot: String
  transactions_count: Int
}

type EthBlockSubscriptionPayload {
  mutation: MutationType!
  node: EthBlock
  updatedFields: [String!]
  previousValues: EthBlockPreviousValues
}

input EthBlockSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EthBlockSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EthBlockSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EthBlockSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EthBlockWhereInput
}

input EthBlockUpdateDataInput {
  hash: String
  number: Int
  difficulty: Float
  totalDifficulty: Float
  extraData: String
  gasLimit: Float
  gasUsed: Float
  mixHash: String
  nonce: String
  parentHash: String
  receiptsRoot: String
  sha3Uncles: String
  size: Int
  stateRoot: String
  date: DateTime
  transactionsRoot: String
  transactions_count: Int
  Miner: EthAccountUpdateOneWithoutBlocksMinedInput
  Transactions: EthTransactionUpdateManyWithoutBlockInput
  Uncles: EthBlockUpdateManyInput
}

input EthBlockUpdateInput {
  hash: String
  number: Int
  difficulty: Float
  totalDifficulty: Float
  extraData: String
  gasLimit: Float
  gasUsed: Float
  mixHash: String
  nonce: String
  parentHash: String
  receiptsRoot: String
  sha3Uncles: String
  size: Int
  stateRoot: String
  date: DateTime
  transactionsRoot: String
  transactions_count: Int
  Miner: EthAccountUpdateOneWithoutBlocksMinedInput
  Transactions: EthTransactionUpdateManyWithoutBlockInput
  Uncles: EthBlockUpdateManyInput
}

input EthBlockUpdateManyInput {
  create: [EthBlockCreateInput!]
  connect: [EthBlockWhereUniqueInput!]
  disconnect: [EthBlockWhereUniqueInput!]
  delete: [EthBlockWhereUniqueInput!]
  update: [EthBlockUpdateWithWhereUniqueNestedInput!]
  upsert: [EthBlockUpsertWithWhereUniqueNestedInput!]
}

input EthBlockUpdateManyWithoutMinerInput {
  create: [EthBlockCreateWithoutMinerInput!]
  connect: [EthBlockWhereUniqueInput!]
  disconnect: [EthBlockWhereUniqueInput!]
  delete: [EthBlockWhereUniqueInput!]
  update: [EthBlockUpdateWithWhereUniqueWithoutMinerInput!]
  upsert: [EthBlockUpsertWithWhereUniqueWithoutMinerInput!]
}

input EthBlockUpdateOneWithoutTransactionsInput {
  create: EthBlockCreateWithoutTransactionsInput
  connect: EthBlockWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EthBlockUpdateWithoutTransactionsDataInput
  upsert: EthBlockUpsertWithoutTransactionsInput
}

input EthBlockUpdateWithoutMinerDataInput {
  hash: String
  number: Int
  difficulty: Float
  totalDifficulty: Float
  extraData: String
  gasLimit: Float
  gasUsed: Float
  mixHash: String
  nonce: String
  parentHash: String
  receiptsRoot: String
  sha3Uncles: String
  size: Int
  stateRoot: String
  date: DateTime
  transactionsRoot: String
  transactions_count: Int
  Transactions: EthTransactionUpdateManyWithoutBlockInput
  Uncles: EthBlockUpdateManyInput
}

input EthBlockUpdateWithoutTransactionsDataInput {
  hash: String
  number: Int
  difficulty: Float
  totalDifficulty: Float
  extraData: String
  gasLimit: Float
  gasUsed: Float
  mixHash: String
  nonce: String
  parentHash: String
  receiptsRoot: String
  sha3Uncles: String
  size: Int
  stateRoot: String
  date: DateTime
  transactionsRoot: String
  transactions_count: Int
  Miner: EthAccountUpdateOneWithoutBlocksMinedInput
  Uncles: EthBlockUpdateManyInput
}

input EthBlockUpdateWithWhereUniqueNestedInput {
  where: EthBlockWhereUniqueInput!
  data: EthBlockUpdateDataInput!
}

input EthBlockUpdateWithWhereUniqueWithoutMinerInput {
  where: EthBlockWhereUniqueInput!
  data: EthBlockUpdateWithoutMinerDataInput!
}

input EthBlockUpsertWithoutTransactionsInput {
  update: EthBlockUpdateWithoutTransactionsDataInput!
  create: EthBlockCreateWithoutTransactionsInput!
}

input EthBlockUpsertWithWhereUniqueNestedInput {
  where: EthBlockWhereUniqueInput!
  update: EthBlockUpdateDataInput!
  create: EthBlockCreateInput!
}

input EthBlockUpsertWithWhereUniqueWithoutMinerInput {
  where: EthBlockWhereUniqueInput!
  update: EthBlockUpdateWithoutMinerDataInput!
  create: EthBlockCreateWithoutMinerInput!
}

input EthBlockWhereInput {
  """Logical AND on all given filters."""
  AND: [EthBlockWhereInput!]

  """Logical OR on all given filters."""
  OR: [EthBlockWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EthBlockWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  hash: String

  """All values that are not equal to given value."""
  hash_not: String

  """All values that are contained in given list."""
  hash_in: [String!]

  """All values that are not contained in given list."""
  hash_not_in: [String!]

  """All values less than the given value."""
  hash_lt: String

  """All values less than or equal the given value."""
  hash_lte: String

  """All values greater than the given value."""
  hash_gt: String

  """All values greater than or equal the given value."""
  hash_gte: String

  """All values containing the given string."""
  hash_contains: String

  """All values not containing the given string."""
  hash_not_contains: String

  """All values starting with the given string."""
  hash_starts_with: String

  """All values not starting with the given string."""
  hash_not_starts_with: String

  """All values ending with the given string."""
  hash_ends_with: String

  """All values not ending with the given string."""
  hash_not_ends_with: String
  number: Int

  """All values that are not equal to given value."""
  number_not: Int

  """All values that are contained in given list."""
  number_in: [Int!]

  """All values that are not contained in given list."""
  number_not_in: [Int!]

  """All values less than the given value."""
  number_lt: Int

  """All values less than or equal the given value."""
  number_lte: Int

  """All values greater than the given value."""
  number_gt: Int

  """All values greater than or equal the given value."""
  number_gte: Int
  difficulty: Float

  """All values that are not equal to given value."""
  difficulty_not: Float

  """All values that are contained in given list."""
  difficulty_in: [Float!]

  """All values that are not contained in given list."""
  difficulty_not_in: [Float!]

  """All values less than the given value."""
  difficulty_lt: Float

  """All values less than or equal the given value."""
  difficulty_lte: Float

  """All values greater than the given value."""
  difficulty_gt: Float

  """All values greater than or equal the given value."""
  difficulty_gte: Float
  totalDifficulty: Float

  """All values that are not equal to given value."""
  totalDifficulty_not: Float

  """All values that are contained in given list."""
  totalDifficulty_in: [Float!]

  """All values that are not contained in given list."""
  totalDifficulty_not_in: [Float!]

  """All values less than the given value."""
  totalDifficulty_lt: Float

  """All values less than or equal the given value."""
  totalDifficulty_lte: Float

  """All values greater than the given value."""
  totalDifficulty_gt: Float

  """All values greater than or equal the given value."""
  totalDifficulty_gte: Float
  extraData: String

  """All values that are not equal to given value."""
  extraData_not: String

  """All values that are contained in given list."""
  extraData_in: [String!]

  """All values that are not contained in given list."""
  extraData_not_in: [String!]

  """All values less than the given value."""
  extraData_lt: String

  """All values less than or equal the given value."""
  extraData_lte: String

  """All values greater than the given value."""
  extraData_gt: String

  """All values greater than or equal the given value."""
  extraData_gte: String

  """All values containing the given string."""
  extraData_contains: String

  """All values not containing the given string."""
  extraData_not_contains: String

  """All values starting with the given string."""
  extraData_starts_with: String

  """All values not starting with the given string."""
  extraData_not_starts_with: String

  """All values ending with the given string."""
  extraData_ends_with: String

  """All values not ending with the given string."""
  extraData_not_ends_with: String
  gasLimit: Float

  """All values that are not equal to given value."""
  gasLimit_not: Float

  """All values that are contained in given list."""
  gasLimit_in: [Float!]

  """All values that are not contained in given list."""
  gasLimit_not_in: [Float!]

  """All values less than the given value."""
  gasLimit_lt: Float

  """All values less than or equal the given value."""
  gasLimit_lte: Float

  """All values greater than the given value."""
  gasLimit_gt: Float

  """All values greater than or equal the given value."""
  gasLimit_gte: Float
  gasUsed: Float

  """All values that are not equal to given value."""
  gasUsed_not: Float

  """All values that are contained in given list."""
  gasUsed_in: [Float!]

  """All values that are not contained in given list."""
  gasUsed_not_in: [Float!]

  """All values less than the given value."""
  gasUsed_lt: Float

  """All values less than or equal the given value."""
  gasUsed_lte: Float

  """All values greater than the given value."""
  gasUsed_gt: Float

  """All values greater than or equal the given value."""
  gasUsed_gte: Float
  mixHash: String

  """All values that are not equal to given value."""
  mixHash_not: String

  """All values that are contained in given list."""
  mixHash_in: [String!]

  """All values that are not contained in given list."""
  mixHash_not_in: [String!]

  """All values less than the given value."""
  mixHash_lt: String

  """All values less than or equal the given value."""
  mixHash_lte: String

  """All values greater than the given value."""
  mixHash_gt: String

  """All values greater than or equal the given value."""
  mixHash_gte: String

  """All values containing the given string."""
  mixHash_contains: String

  """All values not containing the given string."""
  mixHash_not_contains: String

  """All values starting with the given string."""
  mixHash_starts_with: String

  """All values not starting with the given string."""
  mixHash_not_starts_with: String

  """All values ending with the given string."""
  mixHash_ends_with: String

  """All values not ending with the given string."""
  mixHash_not_ends_with: String
  nonce: String

  """All values that are not equal to given value."""
  nonce_not: String

  """All values that are contained in given list."""
  nonce_in: [String!]

  """All values that are not contained in given list."""
  nonce_not_in: [String!]

  """All values less than the given value."""
  nonce_lt: String

  """All values less than or equal the given value."""
  nonce_lte: String

  """All values greater than the given value."""
  nonce_gt: String

  """All values greater than or equal the given value."""
  nonce_gte: String

  """All values containing the given string."""
  nonce_contains: String

  """All values not containing the given string."""
  nonce_not_contains: String

  """All values starting with the given string."""
  nonce_starts_with: String

  """All values not starting with the given string."""
  nonce_not_starts_with: String

  """All values ending with the given string."""
  nonce_ends_with: String

  """All values not ending with the given string."""
  nonce_not_ends_with: String
  parentHash: String

  """All values that are not equal to given value."""
  parentHash_not: String

  """All values that are contained in given list."""
  parentHash_in: [String!]

  """All values that are not contained in given list."""
  parentHash_not_in: [String!]

  """All values less than the given value."""
  parentHash_lt: String

  """All values less than or equal the given value."""
  parentHash_lte: String

  """All values greater than the given value."""
  parentHash_gt: String

  """All values greater than or equal the given value."""
  parentHash_gte: String

  """All values containing the given string."""
  parentHash_contains: String

  """All values not containing the given string."""
  parentHash_not_contains: String

  """All values starting with the given string."""
  parentHash_starts_with: String

  """All values not starting with the given string."""
  parentHash_not_starts_with: String

  """All values ending with the given string."""
  parentHash_ends_with: String

  """All values not ending with the given string."""
  parentHash_not_ends_with: String
  receiptsRoot: String

  """All values that are not equal to given value."""
  receiptsRoot_not: String

  """All values that are contained in given list."""
  receiptsRoot_in: [String!]

  """All values that are not contained in given list."""
  receiptsRoot_not_in: [String!]

  """All values less than the given value."""
  receiptsRoot_lt: String

  """All values less than or equal the given value."""
  receiptsRoot_lte: String

  """All values greater than the given value."""
  receiptsRoot_gt: String

  """All values greater than or equal the given value."""
  receiptsRoot_gte: String

  """All values containing the given string."""
  receiptsRoot_contains: String

  """All values not containing the given string."""
  receiptsRoot_not_contains: String

  """All values starting with the given string."""
  receiptsRoot_starts_with: String

  """All values not starting with the given string."""
  receiptsRoot_not_starts_with: String

  """All values ending with the given string."""
  receiptsRoot_ends_with: String

  """All values not ending with the given string."""
  receiptsRoot_not_ends_with: String
  sha3Uncles: String

  """All values that are not equal to given value."""
  sha3Uncles_not: String

  """All values that are contained in given list."""
  sha3Uncles_in: [String!]

  """All values that are not contained in given list."""
  sha3Uncles_not_in: [String!]

  """All values less than the given value."""
  sha3Uncles_lt: String

  """All values less than or equal the given value."""
  sha3Uncles_lte: String

  """All values greater than the given value."""
  sha3Uncles_gt: String

  """All values greater than or equal the given value."""
  sha3Uncles_gte: String

  """All values containing the given string."""
  sha3Uncles_contains: String

  """All values not containing the given string."""
  sha3Uncles_not_contains: String

  """All values starting with the given string."""
  sha3Uncles_starts_with: String

  """All values not starting with the given string."""
  sha3Uncles_not_starts_with: String

  """All values ending with the given string."""
  sha3Uncles_ends_with: String

  """All values not ending with the given string."""
  sha3Uncles_not_ends_with: String
  size: Int

  """All values that are not equal to given value."""
  size_not: Int

  """All values that are contained in given list."""
  size_in: [Int!]

  """All values that are not contained in given list."""
  size_not_in: [Int!]

  """All values less than the given value."""
  size_lt: Int

  """All values less than or equal the given value."""
  size_lte: Int

  """All values greater than the given value."""
  size_gt: Int

  """All values greater than or equal the given value."""
  size_gte: Int
  stateRoot: String

  """All values that are not equal to given value."""
  stateRoot_not: String

  """All values that are contained in given list."""
  stateRoot_in: [String!]

  """All values that are not contained in given list."""
  stateRoot_not_in: [String!]

  """All values less than the given value."""
  stateRoot_lt: String

  """All values less than or equal the given value."""
  stateRoot_lte: String

  """All values greater than the given value."""
  stateRoot_gt: String

  """All values greater than or equal the given value."""
  stateRoot_gte: String

  """All values containing the given string."""
  stateRoot_contains: String

  """All values not containing the given string."""
  stateRoot_not_contains: String

  """All values starting with the given string."""
  stateRoot_starts_with: String

  """All values not starting with the given string."""
  stateRoot_not_starts_with: String

  """All values ending with the given string."""
  stateRoot_ends_with: String

  """All values not ending with the given string."""
  stateRoot_not_ends_with: String
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  transactionsRoot: String

  """All values that are not equal to given value."""
  transactionsRoot_not: String

  """All values that are contained in given list."""
  transactionsRoot_in: [String!]

  """All values that are not contained in given list."""
  transactionsRoot_not_in: [String!]

  """All values less than the given value."""
  transactionsRoot_lt: String

  """All values less than or equal the given value."""
  transactionsRoot_lte: String

  """All values greater than the given value."""
  transactionsRoot_gt: String

  """All values greater than or equal the given value."""
  transactionsRoot_gte: String

  """All values containing the given string."""
  transactionsRoot_contains: String

  """All values not containing the given string."""
  transactionsRoot_not_contains: String

  """All values starting with the given string."""
  transactionsRoot_starts_with: String

  """All values not starting with the given string."""
  transactionsRoot_not_starts_with: String

  """All values ending with the given string."""
  transactionsRoot_ends_with: String

  """All values not ending with the given string."""
  transactionsRoot_not_ends_with: String
  transactions_count: Int

  """All values that are not equal to given value."""
  transactions_count_not: Int

  """All values that are contained in given list."""
  transactions_count_in: [Int!]

  """All values that are not contained in given list."""
  transactions_count_not_in: [Int!]

  """All values less than the given value."""
  transactions_count_lt: Int

  """All values less than or equal the given value."""
  transactions_count_lte: Int

  """All values greater than the given value."""
  transactions_count_gt: Int

  """All values greater than or equal the given value."""
  transactions_count_gte: Int
  Miner: EthAccountWhereInput
  Transactions_every: EthTransactionWhereInput
  Transactions_some: EthTransactionWhereInput
  Transactions_none: EthTransactionWhereInput
  Uncles_every: EthBlockWhereInput
  Uncles_some: EthBlockWhereInput
  Uncles_none: EthBlockWhereInput
}

input EthBlockWhereUniqueInput {
  id: ID
  hash: String
  number: Int
}

type EthContractSource implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: Json
  source: String
  CreatedBy(where: UserWhereInput): User!
  Accounts(where: EthAccountWhereInput, orderBy: EthAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EthAccount!]
}

"""A connection to a list of items."""
type EthContractSourceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EthContractSourceEdge]!
  aggregate: AggregateEthContractSource!
}

input EthContractSourceCreateInput {
  name: String!
  description: Json
  source: String
  CreatedBy: UserCreateOneInput!
  Accounts: EthAccountCreateManyWithoutContractSourceInput
}

input EthContractSourceCreateManyInput {
  create: [EthContractSourceCreateInput!]
  connect: [EthContractSourceWhereUniqueInput!]
}

input EthContractSourceCreateOneWithoutAccountsInput {
  create: EthContractSourceCreateWithoutAccountsInput
  connect: EthContractSourceWhereUniqueInput
}

input EthContractSourceCreateWithoutAccountsInput {
  name: String!
  description: Json
  source: String
  CreatedBy: UserCreateOneInput!
}

"""An edge in a connection."""
type EthContractSourceEdge {
  """The item at the end of the edge."""
  node: EthContractSource!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EthContractSourceOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  source_ASC
  source_DESC
}

type EthContractSourcePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: Json
  source: String
}

type EthContractSourceSubscriptionPayload {
  mutation: MutationType!
  node: EthContractSource
  updatedFields: [String!]
  previousValues: EthContractSourcePreviousValues
}

input EthContractSourceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EthContractSourceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EthContractSourceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EthContractSourceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EthContractSourceWhereInput
}

input EthContractSourceUpdateDataInput {
  name: String
  description: Json
  source: String
  CreatedBy: UserUpdateOneInput
  Accounts: EthAccountUpdateManyWithoutContractSourceInput
}

input EthContractSourceUpdateInput {
  name: String
  description: Json
  source: String
  CreatedBy: UserUpdateOneInput
  Accounts: EthAccountUpdateManyWithoutContractSourceInput
}

input EthContractSourceUpdateManyInput {
  create: [EthContractSourceCreateInput!]
  connect: [EthContractSourceWhereUniqueInput!]
  disconnect: [EthContractSourceWhereUniqueInput!]
  delete: [EthContractSourceWhereUniqueInput!]
  update: [EthContractSourceUpdateWithWhereUniqueNestedInput!]
  upsert: [EthContractSourceUpsertWithWhereUniqueNestedInput!]
}

input EthContractSourceUpdateOneWithoutAccountsInput {
  create: EthContractSourceCreateWithoutAccountsInput
  connect: EthContractSourceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EthContractSourceUpdateWithoutAccountsDataInput
  upsert: EthContractSourceUpsertWithoutAccountsInput
}

input EthContractSourceUpdateWithoutAccountsDataInput {
  name: String
  description: Json
  source: String
  CreatedBy: UserUpdateOneInput
}

input EthContractSourceUpdateWithWhereUniqueNestedInput {
  where: EthContractSourceWhereUniqueInput!
  data: EthContractSourceUpdateDataInput!
}

input EthContractSourceUpsertWithoutAccountsInput {
  update: EthContractSourceUpdateWithoutAccountsDataInput!
  create: EthContractSourceCreateWithoutAccountsInput!
}

input EthContractSourceUpsertWithWhereUniqueNestedInput {
  where: EthContractSourceWhereUniqueInput!
  update: EthContractSourceUpdateDataInput!
  create: EthContractSourceCreateInput!
}

input EthContractSourceWhereInput {
  """Logical AND on all given filters."""
  AND: [EthContractSourceWhereInput!]

  """Logical OR on all given filters."""
  OR: [EthContractSourceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EthContractSourceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  source: String

  """All values that are not equal to given value."""
  source_not: String

  """All values that are contained in given list."""
  source_in: [String!]

  """All values that are not contained in given list."""
  source_not_in: [String!]

  """All values less than the given value."""
  source_lt: String

  """All values less than or equal the given value."""
  source_lte: String

  """All values greater than the given value."""
  source_gt: String

  """All values greater than or equal the given value."""
  source_gte: String

  """All values containing the given string."""
  source_contains: String

  """All values not containing the given string."""
  source_not_contains: String

  """All values starting with the given string."""
  source_starts_with: String

  """All values not starting with the given string."""
  source_not_starts_with: String

  """All values ending with the given string."""
  source_ends_with: String

  """All values not ending with the given string."""
  source_not_ends_with: String
  CreatedBy: UserWhereInput
  Accounts_every: EthAccountWhereInput
  Accounts_some: EthAccountWhereInput
  Accounts_none: EthAccountWhereInput
}

input EthContractSourceWhereUniqueInput {
  id: ID
}

type EthTransaction implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  chainId: Int!
  amount: Float
  input: String
  index: Int
  Sender(where: EthAccountWhereInput): EthAccount
  Receiver(where: EthAccountWhereInput): EthAccount
  Account(where: EthAccountWhereInput): EthAccount
  address: String!
  type: EthTransactionType
  v: String
  r: String
  s: String
  Block(where: EthBlockWhereInput): EthBlock
}

"""A connection to a list of items."""
type EthTransactionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EthTransactionEdge]!
  aggregate: AggregateEthTransaction!
}

input EthTransactionCreateInput {
  chainId: Int!
  amount: Float
  input: String
  index: Int
  address: String!
  type: EthTransactionType
  v: String
  r: String
  s: String
  Sender: EthAccountCreateOneWithoutOutcomeTransactionsInput
  Receiver: EthAccountCreateOneWithoutIncomeTransactionsInput
  Account: EthAccountCreateOneWithoutTransactionInput
  Block: EthBlockCreateOneWithoutTransactionsInput
}

input EthTransactionCreateManyWithoutBlockInput {
  create: [EthTransactionCreateWithoutBlockInput!]
  connect: [EthTransactionWhereUniqueInput!]
}

input EthTransactionCreateManyWithoutReceiverInput {
  create: [EthTransactionCreateWithoutReceiverInput!]
  connect: [EthTransactionWhereUniqueInput!]
}

input EthTransactionCreateManyWithoutSenderInput {
  create: [EthTransactionCreateWithoutSenderInput!]
  connect: [EthTransactionWhereUniqueInput!]
}

input EthTransactionCreateOneWithoutAccountInput {
  create: EthTransactionCreateWithoutAccountInput
  connect: EthTransactionWhereUniqueInput
}

input EthTransactionCreateWithoutAccountInput {
  chainId: Int!
  amount: Float
  input: String
  index: Int
  address: String!
  type: EthTransactionType
  v: String
  r: String
  s: String
  Sender: EthAccountCreateOneWithoutOutcomeTransactionsInput
  Receiver: EthAccountCreateOneWithoutIncomeTransactionsInput
  Block: EthBlockCreateOneWithoutTransactionsInput
}

input EthTransactionCreateWithoutBlockInput {
  chainId: Int!
  amount: Float
  input: String
  index: Int
  address: String!
  type: EthTransactionType
  v: String
  r: String
  s: String
  Sender: EthAccountCreateOneWithoutOutcomeTransactionsInput
  Receiver: EthAccountCreateOneWithoutIncomeTransactionsInput
  Account: EthAccountCreateOneWithoutTransactionInput
}

input EthTransactionCreateWithoutReceiverInput {
  chainId: Int!
  amount: Float
  input: String
  index: Int
  address: String!
  type: EthTransactionType
  v: String
  r: String
  s: String
  Sender: EthAccountCreateOneWithoutOutcomeTransactionsInput
  Account: EthAccountCreateOneWithoutTransactionInput
  Block: EthBlockCreateOneWithoutTransactionsInput
}

input EthTransactionCreateWithoutSenderInput {
  chainId: Int!
  amount: Float
  input: String
  index: Int
  address: String!
  type: EthTransactionType
  v: String
  r: String
  s: String
  Receiver: EthAccountCreateOneWithoutIncomeTransactionsInput
  Account: EthAccountCreateOneWithoutTransactionInput
  Block: EthBlockCreateOneWithoutTransactionsInput
}

"""An edge in a connection."""
type EthTransactionEdge {
  """The item at the end of the edge."""
  node: EthTransaction!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EthTransactionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  chainId_ASC
  chainId_DESC
  amount_ASC
  amount_DESC
  input_ASC
  input_DESC
  index_ASC
  index_DESC
  address_ASC
  address_DESC
  type_ASC
  type_DESC
  v_ASC
  v_DESC
  r_ASC
  r_DESC
  s_ASC
  s_DESC
}

type EthTransactionPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  chainId: Int!
  amount: Float
  input: String
  index: Int
  address: String!
  type: EthTransactionType
  v: String
  r: String
  s: String
}

type EthTransactionSubscriptionPayload {
  mutation: MutationType!
  node: EthTransaction
  updatedFields: [String!]
  previousValues: EthTransactionPreviousValues
}

input EthTransactionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EthTransactionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EthTransactionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EthTransactionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EthTransactionWhereInput
}

enum EthTransactionType {
  ContractCreate
  ContractRead
  ContractCall
  SendEth
  SendToken
}

input EthTransactionUpdateInput {
  chainId: Int
  amount: Float
  input: String
  index: Int
  address: String
  type: EthTransactionType
  v: String
  r: String
  s: String
  Sender: EthAccountUpdateOneWithoutOutcomeTransactionsInput
  Receiver: EthAccountUpdateOneWithoutIncomeTransactionsInput
  Account: EthAccountUpdateOneWithoutTransactionInput
  Block: EthBlockUpdateOneWithoutTransactionsInput
}

input EthTransactionUpdateManyWithoutBlockInput {
  create: [EthTransactionCreateWithoutBlockInput!]
  connect: [EthTransactionWhereUniqueInput!]
  disconnect: [EthTransactionWhereUniqueInput!]
  delete: [EthTransactionWhereUniqueInput!]
  update: [EthTransactionUpdateWithWhereUniqueWithoutBlockInput!]
  upsert: [EthTransactionUpsertWithWhereUniqueWithoutBlockInput!]
}

input EthTransactionUpdateManyWithoutReceiverInput {
  create: [EthTransactionCreateWithoutReceiverInput!]
  connect: [EthTransactionWhereUniqueInput!]
  disconnect: [EthTransactionWhereUniqueInput!]
  delete: [EthTransactionWhereUniqueInput!]
  update: [EthTransactionUpdateWithWhereUniqueWithoutReceiverInput!]
  upsert: [EthTransactionUpsertWithWhereUniqueWithoutReceiverInput!]
}

input EthTransactionUpdateManyWithoutSenderInput {
  create: [EthTransactionCreateWithoutSenderInput!]
  connect: [EthTransactionWhereUniqueInput!]
  disconnect: [EthTransactionWhereUniqueInput!]
  delete: [EthTransactionWhereUniqueInput!]
  update: [EthTransactionUpdateWithWhereUniqueWithoutSenderInput!]
  upsert: [EthTransactionUpsertWithWhereUniqueWithoutSenderInput!]
}

input EthTransactionUpdateOneWithoutAccountInput {
  create: EthTransactionCreateWithoutAccountInput
  connect: EthTransactionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EthTransactionUpdateWithoutAccountDataInput
  upsert: EthTransactionUpsertWithoutAccountInput
}

input EthTransactionUpdateWithoutAccountDataInput {
  chainId: Int
  amount: Float
  input: String
  index: Int
  address: String
  type: EthTransactionType
  v: String
  r: String
  s: String
  Sender: EthAccountUpdateOneWithoutOutcomeTransactionsInput
  Receiver: EthAccountUpdateOneWithoutIncomeTransactionsInput
  Block: EthBlockUpdateOneWithoutTransactionsInput
}

input EthTransactionUpdateWithoutBlockDataInput {
  chainId: Int
  amount: Float
  input: String
  index: Int
  address: String
  type: EthTransactionType
  v: String
  r: String
  s: String
  Sender: EthAccountUpdateOneWithoutOutcomeTransactionsInput
  Receiver: EthAccountUpdateOneWithoutIncomeTransactionsInput
  Account: EthAccountUpdateOneWithoutTransactionInput
}

input EthTransactionUpdateWithoutReceiverDataInput {
  chainId: Int
  amount: Float
  input: String
  index: Int
  address: String
  type: EthTransactionType
  v: String
  r: String
  s: String
  Sender: EthAccountUpdateOneWithoutOutcomeTransactionsInput
  Account: EthAccountUpdateOneWithoutTransactionInput
  Block: EthBlockUpdateOneWithoutTransactionsInput
}

input EthTransactionUpdateWithoutSenderDataInput {
  chainId: Int
  amount: Float
  input: String
  index: Int
  address: String
  type: EthTransactionType
  v: String
  r: String
  s: String
  Receiver: EthAccountUpdateOneWithoutIncomeTransactionsInput
  Account: EthAccountUpdateOneWithoutTransactionInput
  Block: EthBlockUpdateOneWithoutTransactionsInput
}

input EthTransactionUpdateWithWhereUniqueWithoutBlockInput {
  where: EthTransactionWhereUniqueInput!
  data: EthTransactionUpdateWithoutBlockDataInput!
}

input EthTransactionUpdateWithWhereUniqueWithoutReceiverInput {
  where: EthTransactionWhereUniqueInput!
  data: EthTransactionUpdateWithoutReceiverDataInput!
}

input EthTransactionUpdateWithWhereUniqueWithoutSenderInput {
  where: EthTransactionWhereUniqueInput!
  data: EthTransactionUpdateWithoutSenderDataInput!
}

input EthTransactionUpsertWithoutAccountInput {
  update: EthTransactionUpdateWithoutAccountDataInput!
  create: EthTransactionCreateWithoutAccountInput!
}

input EthTransactionUpsertWithWhereUniqueWithoutBlockInput {
  where: EthTransactionWhereUniqueInput!
  update: EthTransactionUpdateWithoutBlockDataInput!
  create: EthTransactionCreateWithoutBlockInput!
}

input EthTransactionUpsertWithWhereUniqueWithoutReceiverInput {
  where: EthTransactionWhereUniqueInput!
  update: EthTransactionUpdateWithoutReceiverDataInput!
  create: EthTransactionCreateWithoutReceiverInput!
}

input EthTransactionUpsertWithWhereUniqueWithoutSenderInput {
  where: EthTransactionWhereUniqueInput!
  update: EthTransactionUpdateWithoutSenderDataInput!
  create: EthTransactionCreateWithoutSenderInput!
}

input EthTransactionWhereInput {
  """Logical AND on all given filters."""
  AND: [EthTransactionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EthTransactionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EthTransactionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  chainId: Int

  """All values that are not equal to given value."""
  chainId_not: Int

  """All values that are contained in given list."""
  chainId_in: [Int!]

  """All values that are not contained in given list."""
  chainId_not_in: [Int!]

  """All values less than the given value."""
  chainId_lt: Int

  """All values less than or equal the given value."""
  chainId_lte: Int

  """All values greater than the given value."""
  chainId_gt: Int

  """All values greater than or equal the given value."""
  chainId_gte: Int
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  input: String

  """All values that are not equal to given value."""
  input_not: String

  """All values that are contained in given list."""
  input_in: [String!]

  """All values that are not contained in given list."""
  input_not_in: [String!]

  """All values less than the given value."""
  input_lt: String

  """All values less than or equal the given value."""
  input_lte: String

  """All values greater than the given value."""
  input_gt: String

  """All values greater than or equal the given value."""
  input_gte: String

  """All values containing the given string."""
  input_contains: String

  """All values not containing the given string."""
  input_not_contains: String

  """All values starting with the given string."""
  input_starts_with: String

  """All values not starting with the given string."""
  input_not_starts_with: String

  """All values ending with the given string."""
  input_ends_with: String

  """All values not ending with the given string."""
  input_not_ends_with: String
  index: Int

  """All values that are not equal to given value."""
  index_not: Int

  """All values that are contained in given list."""
  index_in: [Int!]

  """All values that are not contained in given list."""
  index_not_in: [Int!]

  """All values less than the given value."""
  index_lt: Int

  """All values less than or equal the given value."""
  index_lte: Int

  """All values greater than the given value."""
  index_gt: Int

  """All values greater than or equal the given value."""
  index_gte: Int
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  type: EthTransactionType

  """All values that are not equal to given value."""
  type_not: EthTransactionType

  """All values that are contained in given list."""
  type_in: [EthTransactionType!]

  """All values that are not contained in given list."""
  type_not_in: [EthTransactionType!]
  v: String

  """All values that are not equal to given value."""
  v_not: String

  """All values that are contained in given list."""
  v_in: [String!]

  """All values that are not contained in given list."""
  v_not_in: [String!]

  """All values less than the given value."""
  v_lt: String

  """All values less than or equal the given value."""
  v_lte: String

  """All values greater than the given value."""
  v_gt: String

  """All values greater than or equal the given value."""
  v_gte: String

  """All values containing the given string."""
  v_contains: String

  """All values not containing the given string."""
  v_not_contains: String

  """All values starting with the given string."""
  v_starts_with: String

  """All values not starting with the given string."""
  v_not_starts_with: String

  """All values ending with the given string."""
  v_ends_with: String

  """All values not ending with the given string."""
  v_not_ends_with: String
  r: String

  """All values that are not equal to given value."""
  r_not: String

  """All values that are contained in given list."""
  r_in: [String!]

  """All values that are not contained in given list."""
  r_not_in: [String!]

  """All values less than the given value."""
  r_lt: String

  """All values less than or equal the given value."""
  r_lte: String

  """All values greater than the given value."""
  r_gt: String

  """All values greater than or equal the given value."""
  r_gte: String

  """All values containing the given string."""
  r_contains: String

  """All values not containing the given string."""
  r_not_contains: String

  """All values starting with the given string."""
  r_starts_with: String

  """All values not starting with the given string."""
  r_not_starts_with: String

  """All values ending with the given string."""
  r_ends_with: String

  """All values not ending with the given string."""
  r_not_ends_with: String
  s: String

  """All values that are not equal to given value."""
  s_not: String

  """All values that are contained in given list."""
  s_in: [String!]

  """All values that are not contained in given list."""
  s_not_in: [String!]

  """All values less than the given value."""
  s_lt: String

  """All values less than or equal the given value."""
  s_lte: String

  """All values greater than the given value."""
  s_gt: String

  """All values greater than or equal the given value."""
  s_gte: String

  """All values containing the given string."""
  s_contains: String

  """All values not containing the given string."""
  s_not_contains: String

  """All values starting with the given string."""
  s_starts_with: String

  """All values not starting with the given string."""
  s_not_starts_with: String

  """All values ending with the given string."""
  s_ends_with: String

  """All values not ending with the given string."""
  s_not_ends_with: String
  Sender: EthAccountWhereInput
  Receiver: EthAccountWhereInput
  Account: EthAccountWhereInput
  Block: EthBlockWhereInput
}

input EthTransactionWhereUniqueInput {
  id: ID
  address: String
}

type File implements Node {
  id: ID!
  path: String!
  name: String
  filename: String
  mimetype: String!
  encoding: String!
  hash: String
  size: Float
  CreatedBy(where: UserWhereInput): User!
  ImageResource(where: ResourceWhereInput): Resource
}

"""A connection to a list of items."""
type FileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  path: String!
  name: String
  filename: String
  mimetype: String!
  encoding: String!
  hash: String
  size: Float
  CreatedBy: UserCreateOneWithoutFilesInput!
  ImageResource: ResourceCreateOneWithoutImageInput
}

input FileCreateManyWithoutCreatedByInput {
  create: [FileCreateWithoutCreatedByInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateOneWithoutImageResourceInput {
  create: FileCreateWithoutImageResourceInput
  connect: FileWhereUniqueInput
}

input FileCreateWithoutCreatedByInput {
  path: String!
  name: String
  filename: String
  mimetype: String!
  encoding: String!
  hash: String
  size: Float
  ImageResource: ResourceCreateOneWithoutImageInput
}

input FileCreateWithoutImageResourceInput {
  path: String!
  name: String
  filename: String
  mimetype: String!
  encoding: String!
  hash: String
  size: Float
  CreatedBy: UserCreateOneWithoutFilesInput!
}

"""An edge in a connection."""
type FileEdge {
  """The item at the end of the edge."""
  node: File!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  path_ASC
  path_DESC
  name_ASC
  name_DESC
  filename_ASC
  filename_DESC
  mimetype_ASC
  mimetype_DESC
  encoding_ASC
  encoding_DESC
  hash_ASC
  hash_DESC
  size_ASC
  size_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FilePreviousValues {
  id: ID!
  path: String!
  name: String
  filename: String
  mimetype: String!
  encoding: String!
  hash: String
  size: Float
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FileWhereInput
}

input FileUpdateInput {
  path: String
  name: String
  filename: String
  mimetype: String
  encoding: String
  hash: String
  size: Float
  CreatedBy: UserUpdateOneWithoutFilesInput
  ImageResource: ResourceUpdateOneWithoutImageInput
}

input FileUpdateManyWithoutCreatedByInput {
  create: [FileCreateWithoutCreatedByInput!]
  connect: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  delete: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [FileUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input FileUpdateOneWithoutImageResourceInput {
  create: FileCreateWithoutImageResourceInput
  connect: FileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: FileUpdateWithoutImageResourceDataInput
  upsert: FileUpsertWithoutImageResourceInput
}

input FileUpdateWithoutCreatedByDataInput {
  path: String
  name: String
  filename: String
  mimetype: String
  encoding: String
  hash: String
  size: Float
  ImageResource: ResourceUpdateOneWithoutImageInput
}

input FileUpdateWithoutImageResourceDataInput {
  path: String
  name: String
  filename: String
  mimetype: String
  encoding: String
  hash: String
  size: Float
  CreatedBy: UserUpdateOneWithoutFilesInput
}

input FileUpdateWithWhereUniqueWithoutCreatedByInput {
  where: FileWhereUniqueInput!
  data: FileUpdateWithoutCreatedByDataInput!
}

input FileUpsertWithoutImageResourceInput {
  update: FileUpdateWithoutImageResourceDataInput!
  create: FileCreateWithoutImageResourceInput!
}

input FileUpsertWithWhereUniqueWithoutCreatedByInput {
  where: FileWhereUniqueInput!
  update: FileUpdateWithoutCreatedByDataInput!
  create: FileCreateWithoutCreatedByInput!
}

input FileWhereInput {
  """Logical AND on all given filters."""
  AND: [FileWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  path: String

  """All values that are not equal to given value."""
  path_not: String

  """All values that are contained in given list."""
  path_in: [String!]

  """All values that are not contained in given list."""
  path_not_in: [String!]

  """All values less than the given value."""
  path_lt: String

  """All values less than or equal the given value."""
  path_lte: String

  """All values greater than the given value."""
  path_gt: String

  """All values greater than or equal the given value."""
  path_gte: String

  """All values containing the given string."""
  path_contains: String

  """All values not containing the given string."""
  path_not_contains: String

  """All values starting with the given string."""
  path_starts_with: String

  """All values not starting with the given string."""
  path_not_starts_with: String

  """All values ending with the given string."""
  path_ends_with: String

  """All values not ending with the given string."""
  path_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  filename: String

  """All values that are not equal to given value."""
  filename_not: String

  """All values that are contained in given list."""
  filename_in: [String!]

  """All values that are not contained in given list."""
  filename_not_in: [String!]

  """All values less than the given value."""
  filename_lt: String

  """All values less than or equal the given value."""
  filename_lte: String

  """All values greater than the given value."""
  filename_gt: String

  """All values greater than or equal the given value."""
  filename_gte: String

  """All values containing the given string."""
  filename_contains: String

  """All values not containing the given string."""
  filename_not_contains: String

  """All values starting with the given string."""
  filename_starts_with: String

  """All values not starting with the given string."""
  filename_not_starts_with: String

  """All values ending with the given string."""
  filename_ends_with: String

  """All values not ending with the given string."""
  filename_not_ends_with: String
  mimetype: String

  """All values that are not equal to given value."""
  mimetype_not: String

  """All values that are contained in given list."""
  mimetype_in: [String!]

  """All values that are not contained in given list."""
  mimetype_not_in: [String!]

  """All values less than the given value."""
  mimetype_lt: String

  """All values less than or equal the given value."""
  mimetype_lte: String

  """All values greater than the given value."""
  mimetype_gt: String

  """All values greater than or equal the given value."""
  mimetype_gte: String

  """All values containing the given string."""
  mimetype_contains: String

  """All values not containing the given string."""
  mimetype_not_contains: String

  """All values starting with the given string."""
  mimetype_starts_with: String

  """All values not starting with the given string."""
  mimetype_not_starts_with: String

  """All values ending with the given string."""
  mimetype_ends_with: String

  """All values not ending with the given string."""
  mimetype_not_ends_with: String
  encoding: String

  """All values that are not equal to given value."""
  encoding_not: String

  """All values that are contained in given list."""
  encoding_in: [String!]

  """All values that are not contained in given list."""
  encoding_not_in: [String!]

  """All values less than the given value."""
  encoding_lt: String

  """All values less than or equal the given value."""
  encoding_lte: String

  """All values greater than the given value."""
  encoding_gt: String

  """All values greater than or equal the given value."""
  encoding_gte: String

  """All values containing the given string."""
  encoding_contains: String

  """All values not containing the given string."""
  encoding_not_contains: String

  """All values starting with the given string."""
  encoding_starts_with: String

  """All values not starting with the given string."""
  encoding_not_starts_with: String

  """All values ending with the given string."""
  encoding_ends_with: String

  """All values not ending with the given string."""
  encoding_not_ends_with: String
  hash: String

  """All values that are not equal to given value."""
  hash_not: String

  """All values that are contained in given list."""
  hash_in: [String!]

  """All values that are not contained in given list."""
  hash_not_in: [String!]

  """All values less than the given value."""
  hash_lt: String

  """All values less than or equal the given value."""
  hash_lte: String

  """All values greater than the given value."""
  hash_gt: String

  """All values greater than or equal the given value."""
  hash_gte: String

  """All values containing the given string."""
  hash_contains: String

  """All values not containing the given string."""
  hash_not_contains: String

  """All values starting with the given string."""
  hash_starts_with: String

  """All values not starting with the given string."""
  hash_not_starts_with: String

  """All values ending with the given string."""
  hash_ends_with: String

  """All values not ending with the given string."""
  hash_not_ends_with: String
  size: Float

  """All values that are not equal to given value."""
  size_not: Float

  """All values that are contained in given list."""
  size_in: [Float!]

  """All values that are not contained in given list."""
  size_not_in: [Float!]

  """All values less than the given value."""
  size_lt: Float

  """All values less than or equal the given value."""
  size_lte: Float

  """All values greater than the given value."""
  size_gt: Float

  """All values greater than or equal the given value."""
  size_gte: Float
  CreatedBy: UserWhereInput
  ImageResource: ResourceWhereInput
}

input FileWhereUniqueInput {
  id: ID
}

type Game implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  start_date: DateTime
  end_date: DateTime
  sequence: Int
  CreatedBy(where: UserWhereInput): User
  Tourney(where: TourneyWhereInput): Tourney
  Users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  Teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team!]
  Parent(where: GameWhereInput): Game
  Childs(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game!]
  Results(where: GameResultWhereInput, orderBy: GameResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GameResult!]
}

"""A connection to a list of items."""
type GameConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GameEdge]!
  aggregate: AggregateGame!
}

input GameCreateInput {
  name: String
  start_date: DateTime
  end_date: DateTime
  sequence: Int
  CreatedBy: UserCreateOneInput
  Tourney: TourneyCreateOneWithoutGamesInput
  Users: UserCreateManyInput
  Teams: TeamCreateManyInput
  Parent: GameCreateOneWithoutChildsInput
  Childs: GameCreateManyWithoutParentInput
  Results: GameResultCreateManyWithoutGameInput
}

input GameCreateManyWithoutParentInput {
  create: [GameCreateWithoutParentInput!]
  connect: [GameWhereUniqueInput!]
}

input GameCreateManyWithoutTourneyInput {
  create: [GameCreateWithoutTourneyInput!]
  connect: [GameWhereUniqueInput!]
}

input GameCreateOneWithoutChildsInput {
  create: GameCreateWithoutChildsInput
  connect: GameWhereUniqueInput
}

input GameCreateOneWithoutResultsInput {
  create: GameCreateWithoutResultsInput
  connect: GameWhereUniqueInput
}

input GameCreateWithoutChildsInput {
  name: String
  start_date: DateTime
  end_date: DateTime
  sequence: Int
  CreatedBy: UserCreateOneInput
  Tourney: TourneyCreateOneWithoutGamesInput
  Users: UserCreateManyInput
  Teams: TeamCreateManyInput
  Parent: GameCreateOneWithoutChildsInput
  Results: GameResultCreateManyWithoutGameInput
}

input GameCreateWithoutParentInput {
  name: String
  start_date: DateTime
  end_date: DateTime
  sequence: Int
  CreatedBy: UserCreateOneInput
  Tourney: TourneyCreateOneWithoutGamesInput
  Users: UserCreateManyInput
  Teams: TeamCreateManyInput
  Childs: GameCreateManyWithoutParentInput
  Results: GameResultCreateManyWithoutGameInput
}

input GameCreateWithoutResultsInput {
  name: String
  start_date: DateTime
  end_date: DateTime
  sequence: Int
  CreatedBy: UserCreateOneInput
  Tourney: TourneyCreateOneWithoutGamesInput
  Users: UserCreateManyInput
  Teams: TeamCreateManyInput
  Parent: GameCreateOneWithoutChildsInput
  Childs: GameCreateManyWithoutParentInput
}

input GameCreateWithoutTourneyInput {
  name: String
  start_date: DateTime
  end_date: DateTime
  sequence: Int
  CreatedBy: UserCreateOneInput
  Users: UserCreateManyInput
  Teams: TeamCreateManyInput
  Parent: GameCreateOneWithoutChildsInput
  Childs: GameCreateManyWithoutParentInput
  Results: GameResultCreateManyWithoutGameInput
}

"""An edge in a connection."""
type GameEdge {
  """The item at the end of the edge."""
  node: Game!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GameOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  start_date_ASC
  start_date_DESC
  end_date_ASC
  end_date_DESC
  sequence_ASC
  sequence_DESC
}

type GamePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  start_date: DateTime
  end_date: DateTime
  sequence: Int
}

type GameResult implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  date: DateTime
  name: String
  CreatedBy(where: UserWhereInput): User
  User(where: UserWhereInput): User
  Team(where: TeamWhereInput): Team
  Game(where: GameWhereInput): Game!
  value: Float
}

"""A connection to a list of items."""
type GameResultConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GameResultEdge]!
  aggregate: AggregateGameResult!
}

input GameResultCreateInput {
  date: DateTime
  name: String
  value: Float
  CreatedBy: UserCreateOneInput
  User: UserCreateOneInput
  Team: TeamCreateOneInput
  Game: GameCreateOneWithoutResultsInput!
}

input GameResultCreateManyWithoutGameInput {
  create: [GameResultCreateWithoutGameInput!]
  connect: [GameResultWhereUniqueInput!]
}

input GameResultCreateWithoutGameInput {
  date: DateTime
  name: String
  value: Float
  CreatedBy: UserCreateOneInput
  User: UserCreateOneInput
  Team: TeamCreateOneInput
}

"""An edge in a connection."""
type GameResultEdge {
  """The item at the end of the edge."""
  node: GameResult!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GameResultOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  date_ASC
  date_DESC
  name_ASC
  name_DESC
  value_ASC
  value_DESC
}

type GameResultPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  date: DateTime
  name: String
  value: Float
}

type GameResultSubscriptionPayload {
  mutation: MutationType!
  node: GameResult
  updatedFields: [String!]
  previousValues: GameResultPreviousValues
}

input GameResultSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GameResultSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GameResultSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GameResultSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GameResultWhereInput
}

input GameResultUpdateInput {
  date: DateTime
  name: String
  value: Float
  CreatedBy: UserUpdateOneInput
  User: UserUpdateOneInput
  Team: TeamUpdateOneInput
  Game: GameUpdateOneWithoutResultsInput
}

input GameResultUpdateManyWithoutGameInput {
  create: [GameResultCreateWithoutGameInput!]
  connect: [GameResultWhereUniqueInput!]
  disconnect: [GameResultWhereUniqueInput!]
  delete: [GameResultWhereUniqueInput!]
  update: [GameResultUpdateWithWhereUniqueWithoutGameInput!]
  upsert: [GameResultUpsertWithWhereUniqueWithoutGameInput!]
}

input GameResultUpdateWithoutGameDataInput {
  date: DateTime
  name: String
  value: Float
  CreatedBy: UserUpdateOneInput
  User: UserUpdateOneInput
  Team: TeamUpdateOneInput
}

input GameResultUpdateWithWhereUniqueWithoutGameInput {
  where: GameResultWhereUniqueInput!
  data: GameResultUpdateWithoutGameDataInput!
}

input GameResultUpsertWithWhereUniqueWithoutGameInput {
  where: GameResultWhereUniqueInput!
  update: GameResultUpdateWithoutGameDataInput!
  create: GameResultCreateWithoutGameInput!
}

input GameResultWhereInput {
  """Logical AND on all given filters."""
  AND: [GameResultWhereInput!]

  """Logical OR on all given filters."""
  OR: [GameResultWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GameResultWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  value: Float

  """All values that are not equal to given value."""
  value_not: Float

  """All values that are contained in given list."""
  value_in: [Float!]

  """All values that are not contained in given list."""
  value_not_in: [Float!]

  """All values less than the given value."""
  value_lt: Float

  """All values less than or equal the given value."""
  value_lte: Float

  """All values greater than the given value."""
  value_gt: Float

  """All values greater than or equal the given value."""
  value_gte: Float
  CreatedBy: UserWhereInput
  User: UserWhereInput
  Team: TeamWhereInput
  Game: GameWhereInput
}

input GameResultWhereUniqueInput {
  id: ID
}

type GameSubscriptionPayload {
  mutation: MutationType!
  node: Game
  updatedFields: [String!]
  previousValues: GamePreviousValues
}

input GameSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GameSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GameSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GameSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GameWhereInput
}

input GameUpdateInput {
  name: String
  start_date: DateTime
  end_date: DateTime
  sequence: Int
  CreatedBy: UserUpdateOneInput
  Tourney: TourneyUpdateOneWithoutGamesInput
  Users: UserUpdateManyInput
  Teams: TeamUpdateManyInput
  Parent: GameUpdateOneWithoutChildsInput
  Childs: GameUpdateManyWithoutParentInput
  Results: GameResultUpdateManyWithoutGameInput
}

input GameUpdateManyWithoutParentInput {
  create: [GameCreateWithoutParentInput!]
  connect: [GameWhereUniqueInput!]
  disconnect: [GameWhereUniqueInput!]
  delete: [GameWhereUniqueInput!]
  update: [GameUpdateWithWhereUniqueWithoutParentInput!]
  upsert: [GameUpsertWithWhereUniqueWithoutParentInput!]
}

input GameUpdateManyWithoutTourneyInput {
  create: [GameCreateWithoutTourneyInput!]
  connect: [GameWhereUniqueInput!]
  disconnect: [GameWhereUniqueInput!]
  delete: [GameWhereUniqueInput!]
  update: [GameUpdateWithWhereUniqueWithoutTourneyInput!]
  upsert: [GameUpsertWithWhereUniqueWithoutTourneyInput!]
}

input GameUpdateOneWithoutChildsInput {
  create: GameCreateWithoutChildsInput
  connect: GameWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: GameUpdateWithoutChildsDataInput
  upsert: GameUpsertWithoutChildsInput
}

input GameUpdateOneWithoutResultsInput {
  create: GameCreateWithoutResultsInput
  connect: GameWhereUniqueInput
  delete: Boolean
  update: GameUpdateWithoutResultsDataInput
  upsert: GameUpsertWithoutResultsInput
}

input GameUpdateWithoutChildsDataInput {
  name: String
  start_date: DateTime
  end_date: DateTime
  sequence: Int
  CreatedBy: UserUpdateOneInput
  Tourney: TourneyUpdateOneWithoutGamesInput
  Users: UserUpdateManyInput
  Teams: TeamUpdateManyInput
  Parent: GameUpdateOneWithoutChildsInput
  Results: GameResultUpdateManyWithoutGameInput
}

input GameUpdateWithoutParentDataInput {
  name: String
  start_date: DateTime
  end_date: DateTime
  sequence: Int
  CreatedBy: UserUpdateOneInput
  Tourney: TourneyUpdateOneWithoutGamesInput
  Users: UserUpdateManyInput
  Teams: TeamUpdateManyInput
  Childs: GameUpdateManyWithoutParentInput
  Results: GameResultUpdateManyWithoutGameInput
}

input GameUpdateWithoutResultsDataInput {
  name: String
  start_date: DateTime
  end_date: DateTime
  sequence: Int
  CreatedBy: UserUpdateOneInput
  Tourney: TourneyUpdateOneWithoutGamesInput
  Users: UserUpdateManyInput
  Teams: TeamUpdateManyInput
  Parent: GameUpdateOneWithoutChildsInput
  Childs: GameUpdateManyWithoutParentInput
}

input GameUpdateWithoutTourneyDataInput {
  name: String
  start_date: DateTime
  end_date: DateTime
  sequence: Int
  CreatedBy: UserUpdateOneInput
  Users: UserUpdateManyInput
  Teams: TeamUpdateManyInput
  Parent: GameUpdateOneWithoutChildsInput
  Childs: GameUpdateManyWithoutParentInput
  Results: GameResultUpdateManyWithoutGameInput
}

input GameUpdateWithWhereUniqueWithoutParentInput {
  where: GameWhereUniqueInput!
  data: GameUpdateWithoutParentDataInput!
}

input GameUpdateWithWhereUniqueWithoutTourneyInput {
  where: GameWhereUniqueInput!
  data: GameUpdateWithoutTourneyDataInput!
}

input GameUpsertWithoutChildsInput {
  update: GameUpdateWithoutChildsDataInput!
  create: GameCreateWithoutChildsInput!
}

input GameUpsertWithoutResultsInput {
  update: GameUpdateWithoutResultsDataInput!
  create: GameCreateWithoutResultsInput!
}

input GameUpsertWithWhereUniqueWithoutParentInput {
  where: GameWhereUniqueInput!
  update: GameUpdateWithoutParentDataInput!
  create: GameCreateWithoutParentInput!
}

input GameUpsertWithWhereUniqueWithoutTourneyInput {
  where: GameWhereUniqueInput!
  update: GameUpdateWithoutTourneyDataInput!
  create: GameCreateWithoutTourneyInput!
}

input GameWhereInput {
  """Logical AND on all given filters."""
  AND: [GameWhereInput!]

  """Logical OR on all given filters."""
  OR: [GameWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GameWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  start_date: DateTime

  """All values that are not equal to given value."""
  start_date_not: DateTime

  """All values that are contained in given list."""
  start_date_in: [DateTime!]

  """All values that are not contained in given list."""
  start_date_not_in: [DateTime!]

  """All values less than the given value."""
  start_date_lt: DateTime

  """All values less than or equal the given value."""
  start_date_lte: DateTime

  """All values greater than the given value."""
  start_date_gt: DateTime

  """All values greater than or equal the given value."""
  start_date_gte: DateTime
  end_date: DateTime

  """All values that are not equal to given value."""
  end_date_not: DateTime

  """All values that are contained in given list."""
  end_date_in: [DateTime!]

  """All values that are not contained in given list."""
  end_date_not_in: [DateTime!]

  """All values less than the given value."""
  end_date_lt: DateTime

  """All values less than or equal the given value."""
  end_date_lte: DateTime

  """All values greater than the given value."""
  end_date_gt: DateTime

  """All values greater than or equal the given value."""
  end_date_gte: DateTime
  sequence: Int

  """All values that are not equal to given value."""
  sequence_not: Int

  """All values that are contained in given list."""
  sequence_in: [Int!]

  """All values that are not contained in given list."""
  sequence_not_in: [Int!]

  """All values less than the given value."""
  sequence_lt: Int

  """All values less than or equal the given value."""
  sequence_lte: Int

  """All values greater than the given value."""
  sequence_gt: Int

  """All values greater than or equal the given value."""
  sequence_gte: Int
  CreatedBy: UserWhereInput
  Tourney: TourneyWhereInput
  Users_every: UserWhereInput
  Users_some: UserWhereInput
  Users_none: UserWhereInput
  Teams_every: TeamWhereInput
  Teams_some: TeamWhereInput
  Teams_none: TeamWhereInput
  Parent: GameWhereInput
  Childs_every: GameWhereInput
  Childs_some: GameWhereInput
  Childs_none: GameWhereInput
  Results_every: GameResultWhereInput
  Results_some: GameResultWhereInput
  Results_none: GameResultWhereInput
}

input GameWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

type LetsadsSmsMessageStatus implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: LetsadsSmsMessageStatusEnum
  description: String
  errorCode: LetsadsSmsMessageStatusErrorCodeEnum
  SmsMessage(where: SmsMessageWhereInput): SmsMessage!
  Items(where: LetsadsSmsMessageStatusItemWhereInput, orderBy: LetsadsSmsMessageStatusItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LetsadsSmsMessageStatusItem!]
}

"""A connection to a list of items."""
type LetsadsSmsMessageStatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LetsadsSmsMessageStatusEdge]!
  aggregate: AggregateLetsadsSmsMessageStatus!
}

input LetsadsSmsMessageStatusCreateInput {
  name: LetsadsSmsMessageStatusEnum
  description: String
  errorCode: LetsadsSmsMessageStatusErrorCodeEnum
  SmsMessage: SmsMessageCreateOneWithoutStatusInput!
  Items: LetsadsSmsMessageStatusItemCreateManyInput
}

input LetsadsSmsMessageStatusCreateOneWithoutSmsMessageInput {
  create: LetsadsSmsMessageStatusCreateWithoutSmsMessageInput
  connect: LetsadsSmsMessageStatusWhereUniqueInput
}

input LetsadsSmsMessageStatusCreateWithoutSmsMessageInput {
  name: LetsadsSmsMessageStatusEnum
  description: String
  errorCode: LetsadsSmsMessageStatusErrorCodeEnum
  Items: LetsadsSmsMessageStatusItemCreateManyInput
}

"""An edge in a connection."""
type LetsadsSmsMessageStatusEdge {
  """The item at the end of the edge."""
  node: LetsadsSmsMessageStatus!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LetsadsSmsMessageStatusEnum {
  Complete
  Error
}

enum LetsadsSmsMessageStatusErrorCodeEnum {
  NO_DATA
  WRONG_DATA_FORMAT
  REQUEST_FORMAT
  AUTH_DATA
  API_DISABLED
  USER_NOT_MODERATED
  INCORRECT_FROM
  INVALID_FROM
  MESSAGE_TOO_LONG
  NO_MESSAGE
  MAX_MESSAGES_COUNT
  NOT_ENOUGH_MONEY
  UNKNOWN_ERROR
}

type LetsadsSmsMessageStatusItem implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  sms_id: Int!
}

"""A connection to a list of items."""
type LetsadsSmsMessageStatusItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LetsadsSmsMessageStatusItemEdge]!
  aggregate: AggregateLetsadsSmsMessageStatusItem!
}

input LetsadsSmsMessageStatusItemCreateInput {
  sms_id: Int!
}

input LetsadsSmsMessageStatusItemCreateManyInput {
  create: [LetsadsSmsMessageStatusItemCreateInput!]
  connect: [LetsadsSmsMessageStatusItemWhereUniqueInput!]
}

"""An edge in a connection."""
type LetsadsSmsMessageStatusItemEdge {
  """The item at the end of the edge."""
  node: LetsadsSmsMessageStatusItem!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LetsadsSmsMessageStatusItemOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  sms_id_ASC
  sms_id_DESC
}

type LetsadsSmsMessageStatusItemPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  sms_id: Int!
}

type LetsadsSmsMessageStatusItemSubscriptionPayload {
  mutation: MutationType!
  node: LetsadsSmsMessageStatusItem
  updatedFields: [String!]
  previousValues: LetsadsSmsMessageStatusItemPreviousValues
}

input LetsadsSmsMessageStatusItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LetsadsSmsMessageStatusItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LetsadsSmsMessageStatusItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LetsadsSmsMessageStatusItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LetsadsSmsMessageStatusItemWhereInput
}

input LetsadsSmsMessageStatusItemUpdateDataInput {
  sms_id: Int
}

input LetsadsSmsMessageStatusItemUpdateInput {
  sms_id: Int
}

input LetsadsSmsMessageStatusItemUpdateManyInput {
  create: [LetsadsSmsMessageStatusItemCreateInput!]
  connect: [LetsadsSmsMessageStatusItemWhereUniqueInput!]
  disconnect: [LetsadsSmsMessageStatusItemWhereUniqueInput!]
  delete: [LetsadsSmsMessageStatusItemWhereUniqueInput!]
  update: [LetsadsSmsMessageStatusItemUpdateWithWhereUniqueNestedInput!]
  upsert: [LetsadsSmsMessageStatusItemUpsertWithWhereUniqueNestedInput!]
}

input LetsadsSmsMessageStatusItemUpdateWithWhereUniqueNestedInput {
  where: LetsadsSmsMessageStatusItemWhereUniqueInput!
  data: LetsadsSmsMessageStatusItemUpdateDataInput!
}

input LetsadsSmsMessageStatusItemUpsertWithWhereUniqueNestedInput {
  where: LetsadsSmsMessageStatusItemWhereUniqueInput!
  update: LetsadsSmsMessageStatusItemUpdateDataInput!
  create: LetsadsSmsMessageStatusItemCreateInput!
}

input LetsadsSmsMessageStatusItemWhereInput {
  """Logical AND on all given filters."""
  AND: [LetsadsSmsMessageStatusItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [LetsadsSmsMessageStatusItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LetsadsSmsMessageStatusItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  sms_id: Int

  """All values that are not equal to given value."""
  sms_id_not: Int

  """All values that are contained in given list."""
  sms_id_in: [Int!]

  """All values that are not contained in given list."""
  sms_id_not_in: [Int!]

  """All values less than the given value."""
  sms_id_lt: Int

  """All values less than or equal the given value."""
  sms_id_lte: Int

  """All values greater than the given value."""
  sms_id_gt: Int

  """All values greater than or equal the given value."""
  sms_id_gte: Int
}

input LetsadsSmsMessageStatusItemWhereUniqueInput {
  id: ID
  sms_id: Int
}

enum LetsadsSmsMessageStatusOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  errorCode_ASC
  errorCode_DESC
}

type LetsadsSmsMessageStatusPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: LetsadsSmsMessageStatusEnum
  description: String
  errorCode: LetsadsSmsMessageStatusErrorCodeEnum
}

type LetsadsSmsMessageStatusSubscriptionPayload {
  mutation: MutationType!
  node: LetsadsSmsMessageStatus
  updatedFields: [String!]
  previousValues: LetsadsSmsMessageStatusPreviousValues
}

input LetsadsSmsMessageStatusSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LetsadsSmsMessageStatusSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LetsadsSmsMessageStatusSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LetsadsSmsMessageStatusSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LetsadsSmsMessageStatusWhereInput
}

input LetsadsSmsMessageStatusUpdateInput {
  name: LetsadsSmsMessageStatusEnum
  description: String
  errorCode: LetsadsSmsMessageStatusErrorCodeEnum
  SmsMessage: SmsMessageUpdateOneWithoutStatusInput
  Items: LetsadsSmsMessageStatusItemUpdateManyInput
}

input LetsadsSmsMessageStatusUpdateOneWithoutSmsMessageInput {
  create: LetsadsSmsMessageStatusCreateWithoutSmsMessageInput
  connect: LetsadsSmsMessageStatusWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: LetsadsSmsMessageStatusUpdateWithoutSmsMessageDataInput
  upsert: LetsadsSmsMessageStatusUpsertWithoutSmsMessageInput
}

input LetsadsSmsMessageStatusUpdateWithoutSmsMessageDataInput {
  name: LetsadsSmsMessageStatusEnum
  description: String
  errorCode: LetsadsSmsMessageStatusErrorCodeEnum
  Items: LetsadsSmsMessageStatusItemUpdateManyInput
}

input LetsadsSmsMessageStatusUpsertWithoutSmsMessageInput {
  update: LetsadsSmsMessageStatusUpdateWithoutSmsMessageDataInput!
  create: LetsadsSmsMessageStatusCreateWithoutSmsMessageInput!
}

input LetsadsSmsMessageStatusWhereInput {
  """Logical AND on all given filters."""
  AND: [LetsadsSmsMessageStatusWhereInput!]

  """Logical OR on all given filters."""
  OR: [LetsadsSmsMessageStatusWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LetsadsSmsMessageStatusWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: LetsadsSmsMessageStatusEnum

  """All values that are not equal to given value."""
  name_not: LetsadsSmsMessageStatusEnum

  """All values that are contained in given list."""
  name_in: [LetsadsSmsMessageStatusEnum!]

  """All values that are not contained in given list."""
  name_not_in: [LetsadsSmsMessageStatusEnum!]
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  errorCode: LetsadsSmsMessageStatusErrorCodeEnum

  """All values that are not equal to given value."""
  errorCode_not: LetsadsSmsMessageStatusErrorCodeEnum

  """All values that are contained in given list."""
  errorCode_in: [LetsadsSmsMessageStatusErrorCodeEnum!]

  """All values that are not contained in given list."""
  errorCode_not_in: [LetsadsSmsMessageStatusErrorCodeEnum!]
  SmsMessage: SmsMessageWhereInput
  Items_every: LetsadsSmsMessageStatusItemWhereInput
  Items_some: LetsadsSmsMessageStatusItemWhereInput
  Items_none: LetsadsSmsMessageStatusItemWhereInput
}

input LetsadsSmsMessageStatusWhereUniqueInput {
  id: ID
}

type Letter implements Node {
  id: ID!
  email: String!
  subject: String!
  message: String!
  status: LetterStatus!
  rank: Int
  deleteOnSend: Boolean
  replyTo: String
  returnTo: String
  Place(where: PlaceWhereInput): Place
}

"""A connection to a list of items."""
type LetterConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LetterEdge]!
  aggregate: AggregateLetter!
}

input LetterCreateInput {
  email: String!
  subject: String!
  message: String!
  status: LetterStatus
  rank: Int
  deleteOnSend: Boolean
  replyTo: String
  returnTo: String
  Place: PlaceCreateOneWithoutLettersInput
}

input LetterCreateManyWithoutPlaceInput {
  create: [LetterCreateWithoutPlaceInput!]
  connect: [LetterWhereUniqueInput!]
}

input LetterCreateWithoutPlaceInput {
  email: String!
  subject: String!
  message: String!
  status: LetterStatus
  rank: Int
  deleteOnSend: Boolean
  replyTo: String
  returnTo: String
}

"""An edge in a connection."""
type LetterEdge {
  """The item at the end of the edge."""
  node: Letter!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LetterOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  subject_ASC
  subject_DESC
  message_ASC
  message_DESC
  status_ASC
  status_DESC
  rank_ASC
  rank_DESC
  deleteOnSend_ASC
  deleteOnSend_DESC
  replyTo_ASC
  replyTo_DESC
  returnTo_ASC
  returnTo_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LetterPreviousValues {
  id: ID!
  email: String!
  subject: String!
  message: String!
  status: LetterStatus!
  rank: Int
  deleteOnSend: Boolean
  replyTo: String
  returnTo: String
}

enum LetterStatus {
  Created
  Processing
  Sended
  Error
}

type LetterSubscriptionPayload {
  mutation: MutationType!
  node: Letter
  updatedFields: [String!]
  previousValues: LetterPreviousValues
}

input LetterSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LetterSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LetterSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LetterSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LetterWhereInput
}

input LetterUpdateInput {
  email: String
  subject: String
  message: String
  status: LetterStatus
  rank: Int
  deleteOnSend: Boolean
  replyTo: String
  returnTo: String
  Place: PlaceUpdateOneWithoutLettersInput
}

input LetterUpdateManyWithoutPlaceInput {
  create: [LetterCreateWithoutPlaceInput!]
  connect: [LetterWhereUniqueInput!]
  disconnect: [LetterWhereUniqueInput!]
  delete: [LetterWhereUniqueInput!]
  update: [LetterUpdateWithWhereUniqueWithoutPlaceInput!]
  upsert: [LetterUpsertWithWhereUniqueWithoutPlaceInput!]
}

input LetterUpdateWithoutPlaceDataInput {
  email: String
  subject: String
  message: String
  status: LetterStatus
  rank: Int
  deleteOnSend: Boolean
  replyTo: String
  returnTo: String
}

input LetterUpdateWithWhereUniqueWithoutPlaceInput {
  where: LetterWhereUniqueInput!
  data: LetterUpdateWithoutPlaceDataInput!
}

input LetterUpsertWithWhereUniqueWithoutPlaceInput {
  where: LetterWhereUniqueInput!
  update: LetterUpdateWithoutPlaceDataInput!
  create: LetterCreateWithoutPlaceInput!
}

input LetterWhereInput {
  """Logical AND on all given filters."""
  AND: [LetterWhereInput!]

  """Logical OR on all given filters."""
  OR: [LetterWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LetterWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  subject: String

  """All values that are not equal to given value."""
  subject_not: String

  """All values that are contained in given list."""
  subject_in: [String!]

  """All values that are not contained in given list."""
  subject_not_in: [String!]

  """All values less than the given value."""
  subject_lt: String

  """All values less than or equal the given value."""
  subject_lte: String

  """All values greater than the given value."""
  subject_gt: String

  """All values greater than or equal the given value."""
  subject_gte: String

  """All values containing the given string."""
  subject_contains: String

  """All values not containing the given string."""
  subject_not_contains: String

  """All values starting with the given string."""
  subject_starts_with: String

  """All values not starting with the given string."""
  subject_not_starts_with: String

  """All values ending with the given string."""
  subject_ends_with: String

  """All values not ending with the given string."""
  subject_not_ends_with: String
  message: String

  """All values that are not equal to given value."""
  message_not: String

  """All values that are contained in given list."""
  message_in: [String!]

  """All values that are not contained in given list."""
  message_not_in: [String!]

  """All values less than the given value."""
  message_lt: String

  """All values less than or equal the given value."""
  message_lte: String

  """All values greater than the given value."""
  message_gt: String

  """All values greater than or equal the given value."""
  message_gte: String

  """All values containing the given string."""
  message_contains: String

  """All values not containing the given string."""
  message_not_contains: String

  """All values starting with the given string."""
  message_starts_with: String

  """All values not starting with the given string."""
  message_not_starts_with: String

  """All values ending with the given string."""
  message_ends_with: String

  """All values not ending with the given string."""
  message_not_ends_with: String
  status: LetterStatus

  """All values that are not equal to given value."""
  status_not: LetterStatus

  """All values that are contained in given list."""
  status_in: [LetterStatus!]

  """All values that are not contained in given list."""
  status_not_in: [LetterStatus!]
  rank: Int

  """All values that are not equal to given value."""
  rank_not: Int

  """All values that are contained in given list."""
  rank_in: [Int!]

  """All values that are not contained in given list."""
  rank_not_in: [Int!]

  """All values less than the given value."""
  rank_lt: Int

  """All values less than or equal the given value."""
  rank_lte: Int

  """All values greater than the given value."""
  rank_gt: Int

  """All values greater than or equal the given value."""
  rank_gte: Int
  deleteOnSend: Boolean

  """All values that are not equal to given value."""
  deleteOnSend_not: Boolean
  replyTo: String

  """All values that are not equal to given value."""
  replyTo_not: String

  """All values that are contained in given list."""
  replyTo_in: [String!]

  """All values that are not contained in given list."""
  replyTo_not_in: [String!]

  """All values less than the given value."""
  replyTo_lt: String

  """All values less than or equal the given value."""
  replyTo_lte: String

  """All values greater than the given value."""
  replyTo_gt: String

  """All values greater than or equal the given value."""
  replyTo_gte: String

  """All values containing the given string."""
  replyTo_contains: String

  """All values not containing the given string."""
  replyTo_not_contains: String

  """All values starting with the given string."""
  replyTo_starts_with: String

  """All values not starting with the given string."""
  replyTo_not_starts_with: String

  """All values ending with the given string."""
  replyTo_ends_with: String

  """All values not ending with the given string."""
  replyTo_not_ends_with: String
  returnTo: String

  """All values that are not equal to given value."""
  returnTo_not: String

  """All values that are contained in given list."""
  returnTo_in: [String!]

  """All values that are not contained in given list."""
  returnTo_not_in: [String!]

  """All values less than the given value."""
  returnTo_lt: String

  """All values less than or equal the given value."""
  returnTo_lte: String

  """All values greater than the given value."""
  returnTo_gt: String

  """All values greater than or equal the given value."""
  returnTo_gte: String

  """All values containing the given string."""
  returnTo_contains: String

  """All values not containing the given string."""
  returnTo_not_contains: String

  """All values starting with the given string."""
  returnTo_starts_with: String

  """All values not starting with the given string."""
  returnTo_not_starts_with: String

  """All values ending with the given string."""
  returnTo_ends_with: String

  """All values not ending with the given string."""
  returnTo_not_ends_with: String
  Place: PlaceWhereInput
}

input LetterWhereUniqueInput {
  id: ID
}

type Log implements Node {
  id: ID!
  level: LogLevel!
  objectType: ID
  message: String!
  stack: String
}

"""A connection to a list of items."""
type LogConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LogEdge]!
  aggregate: AggregateLog!
}

input LogCreateInput {
  level: LogLevel
  objectType: ID
  message: String!
  stack: String
}

"""An edge in a connection."""
type LogEdge {
  """The item at the end of the edge."""
  node: Log!

  """A cursor for use in pagination."""
  cursor: String!
}

type LogedIn implements Node {
  id: ID!
  createdAt: DateTime!
  fake: Boolean
  User(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type LogedInConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LogedInEdge]!
  aggregate: AggregateLogedIn!
}

input LogedInCreateInput {
  fake: Boolean
  User: UserCreateOneWithoutLogedInsInput!
}

input LogedInCreateManyWithoutUserInput {
  create: [LogedInCreateWithoutUserInput!]
  connect: [LogedInWhereUniqueInput!]
}

input LogedInCreateWithoutUserInput {
  fake: Boolean
}

"""An edge in a connection."""
type LogedInEdge {
  """The item at the end of the edge."""
  node: LogedIn!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LogedInOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  fake_ASC
  fake_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LogedInPreviousValues {
  id: ID!
  createdAt: DateTime!
  fake: Boolean
}

type LogedInSubscriptionPayload {
  mutation: MutationType!
  node: LogedIn
  updatedFields: [String!]
  previousValues: LogedInPreviousValues
}

input LogedInSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LogedInSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LogedInSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LogedInSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LogedInWhereInput
}

input LogedInUpdateInput {
  fake: Boolean
  User: UserUpdateOneWithoutLogedInsInput
}

input LogedInUpdateManyWithoutUserInput {
  create: [LogedInCreateWithoutUserInput!]
  connect: [LogedInWhereUniqueInput!]
  disconnect: [LogedInWhereUniqueInput!]
  delete: [LogedInWhereUniqueInput!]
  update: [LogedInUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [LogedInUpsertWithWhereUniqueWithoutUserInput!]
}

input LogedInUpdateWithoutUserDataInput {
  fake: Boolean
}

input LogedInUpdateWithWhereUniqueWithoutUserInput {
  where: LogedInWhereUniqueInput!
  data: LogedInUpdateWithoutUserDataInput!
}

input LogedInUpsertWithWhereUniqueWithoutUserInput {
  where: LogedInWhereUniqueInput!
  update: LogedInUpdateWithoutUserDataInput!
  create: LogedInCreateWithoutUserInput!
}

input LogedInWhereInput {
  """Logical AND on all given filters."""
  AND: [LogedInWhereInput!]

  """Logical OR on all given filters."""
  OR: [LogedInWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LogedInWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  fake: Boolean

  """All values that are not equal to given value."""
  fake_not: Boolean
  User: UserWhereInput
}

input LogedInWhereUniqueInput {
  id: ID
}

enum LogLevel {
  Info
  Notice
  Warning
  Error
  Fatal
}

enum LogOrderByInput {
  id_ASC
  id_DESC
  level_ASC
  level_DESC
  objectType_ASC
  objectType_DESC
  message_ASC
  message_DESC
  stack_ASC
  stack_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LogPreviousValues {
  id: ID!
  level: LogLevel!
  objectType: ID
  message: String!
  stack: String
}

type LogSubscriptionPayload {
  mutation: MutationType!
  node: Log
  updatedFields: [String!]
  previousValues: LogPreviousValues
}

input LogSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LogSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LogSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LogSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LogWhereInput
}

input LogUpdateInput {
  level: LogLevel
  objectType: ID
  message: String
  stack: String
}

input LogWhereInput {
  """Logical AND on all given filters."""
  AND: [LogWhereInput!]

  """Logical OR on all given filters."""
  OR: [LogWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LogWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  level: LogLevel

  """All values that are not equal to given value."""
  level_not: LogLevel

  """All values that are contained in given list."""
  level_in: [LogLevel!]

  """All values that are not contained in given list."""
  level_not_in: [LogLevel!]
  objectType: ID

  """All values that are not equal to given value."""
  objectType_not: ID

  """All values that are contained in given list."""
  objectType_in: [ID!]

  """All values that are not contained in given list."""
  objectType_not_in: [ID!]

  """All values less than the given value."""
  objectType_lt: ID

  """All values less than or equal the given value."""
  objectType_lte: ID

  """All values greater than the given value."""
  objectType_gt: ID

  """All values greater than or equal the given value."""
  objectType_gte: ID

  """All values containing the given string."""
  objectType_contains: ID

  """All values not containing the given string."""
  objectType_not_contains: ID

  """All values starting with the given string."""
  objectType_starts_with: ID

  """All values not starting with the given string."""
  objectType_not_starts_with: ID

  """All values ending with the given string."""
  objectType_ends_with: ID

  """All values not ending with the given string."""
  objectType_not_ends_with: ID
  message: String

  """All values that are not equal to given value."""
  message_not: String

  """All values that are contained in given list."""
  message_in: [String!]

  """All values that are not contained in given list."""
  message_not_in: [String!]

  """All values less than the given value."""
  message_lt: String

  """All values less than or equal the given value."""
  message_lte: String

  """All values greater than the given value."""
  message_gt: String

  """All values greater than or equal the given value."""
  message_gte: String

  """All values containing the given string."""
  message_contains: String

  """All values not containing the given string."""
  message_not_contains: String

  """All values starting with the given string."""
  message_starts_with: String

  """All values not starting with the given string."""
  message_not_starts_with: String

  """All values ending with the given string."""
  message_ends_with: String

  """All values not ending with the given string."""
  message_not_ends_with: String
  stack: String

  """All values that are not equal to given value."""
  stack_not: String

  """All values that are contained in given list."""
  stack_in: [String!]

  """All values that are not contained in given list."""
  stack_not_in: [String!]

  """All values less than the given value."""
  stack_lt: String

  """All values less than or equal the given value."""
  stack_lte: String

  """All values greater than the given value."""
  stack_gt: String

  """All values greater than or equal the given value."""
  stack_gte: String

  """All values containing the given string."""
  stack_contains: String

  """All values not containing the given string."""
  stack_not_contains: String

  """All values starting with the given string."""
  stack_starts_with: String

  """All values not starting with the given string."""
  stack_not_starts_with: String

  """All values ending with the given string."""
  stack_ends_with: String

  """All values not ending with the given string."""
  stack_not_ends_with: String
}

input LogWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createLetter(data: LetterCreateInput!): Letter!
  createLog(data: LogCreateInput!): Log!
  createFile(data: FileCreateInput!): File!
  createRoute(data: RouteCreateInput!): Route!
  createSmsMessage(data: SmsMessageCreateInput!): SmsMessage!
  createLetsadsSmsMessageStatus(data: LetsadsSmsMessageStatusCreateInput!): LetsadsSmsMessageStatus!
  createResetPassword(data: ResetPasswordCreateInput!): ResetPassword!
  createUserGroup(data: UserGroupCreateInput!): UserGroup!
  createLogedIn(data: LogedInCreateInput!): LogedIn!
  createEthAccount(data: EthAccountCreateInput!): EthAccount!
  createEthTransaction(data: EthTransactionCreateInput!): EthTransaction!
  createProject(data: ProjectCreateInput!): Project!
  createResource(data: ResourceCreateInput!): Resource!
  createChatMessageReaded(data: ChatMessageReadedCreateInput!): ChatMessageReaded!
  createChatRoom(data: ChatRoomCreateInput!): ChatRoom!
  createChatRoomInvitation(data: ChatRoomInvitationCreateInput!): ChatRoomInvitation!
  createNotice(data: NoticeCreateInput!): Notice!
  createNotificationType(data: NotificationTypeCreateInput!): NotificationType!
  createResourceTag(data: ResourceTagCreateInput!): ResourceTag!
  createTag(data: TagCreateInput!): Tag!
  createGame(data: GameCreateInput!): Game!
  createGameResult(data: GameResultCreateInput!): GameResult!
  createTournament(data: TournamentCreateInput!): Tournament!
  createTournamentGroup(data: TournamentGroupCreateInput!): TournamentGroup!
  createTourney(data: TourneyCreateInput!): Tourney!
  createVote(data: VoteCreateInput!): Vote!
  createCallRequest(data: CallRequestCreateInput!): CallRequest!
  createBeer(data: BeerCreateInput!): Beer!
  createAccount(data: AccountCreateInput!): Account!
  createTransaction(data: TransactionCreateInput!): Transaction!
  createUserTarif(data: UserTarifCreateInput!): UserTarif!
  createTarifRequest(data: TarifRequestCreateInput!): TarifRequest!
  createCity(data: CityCreateInput!): City!
  createComment(data: CommentCreateInput!): Comment!
  createCommentType(data: CommentTypeCreateInput!): CommentType!
  createPhoto(data: PhotoCreateInput!): Photo!
  createPlace(data: PlaceCreateInput!): Place!
  createPlaceBeer(data: PlaceBeerCreateInput!): PlaceBeer!
  createTopic(data: TopicCreateInput!): Topic!
  createLetsadsSmsMessageStatusItem(data: LetsadsSmsMessageStatusItemCreateInput!): LetsadsSmsMessageStatusItem!
  createTarif(data: TarifCreateInput!): Tarif!
  createEthBlock(data: EthBlockCreateInput!): EthBlock!
  createSmsProvider(data: SmsProviderCreateInput!): SmsProvider!
  createTeam: Team!
  createEthContractSource(data: EthContractSourceCreateInput!): EthContractSource!
  createUser(data: UserCreateInput!): User!
  createChatMessage(data: ChatMessageCreateInput!): ChatMessage!
  updateLetter(data: LetterUpdateInput!, where: LetterWhereUniqueInput!): Letter
  updateLog(data: LogUpdateInput!, where: LogWhereUniqueInput!): Log
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateRoute(data: RouteUpdateInput!, where: RouteWhereUniqueInput!): Route
  updateSmsMessage(data: SmsMessageUpdateInput!, where: SmsMessageWhereUniqueInput!): SmsMessage
  updateLetsadsSmsMessageStatus(data: LetsadsSmsMessageStatusUpdateInput!, where: LetsadsSmsMessageStatusWhereUniqueInput!): LetsadsSmsMessageStatus
  updateResetPassword(data: ResetPasswordUpdateInput!, where: ResetPasswordWhereUniqueInput!): ResetPassword
  updateUserGroup(data: UserGroupUpdateInput!, where: UserGroupWhereUniqueInput!): UserGroup
  updateLogedIn(data: LogedInUpdateInput!, where: LogedInWhereUniqueInput!): LogedIn
  updateEthAccount(data: EthAccountUpdateInput!, where: EthAccountWhereUniqueInput!): EthAccount
  updateEthTransaction(data: EthTransactionUpdateInput!, where: EthTransactionWhereUniqueInput!): EthTransaction
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateResource(data: ResourceUpdateInput!, where: ResourceWhereUniqueInput!): Resource
  updateChatMessageReaded(data: ChatMessageReadedUpdateInput!, where: ChatMessageReadedWhereUniqueInput!): ChatMessageReaded
  updateChatRoom(data: ChatRoomUpdateInput!, where: ChatRoomWhereUniqueInput!): ChatRoom
  updateChatRoomInvitation(data: ChatRoomInvitationUpdateInput!, where: ChatRoomInvitationWhereUniqueInput!): ChatRoomInvitation
  updateNotice(data: NoticeUpdateInput!, where: NoticeWhereUniqueInput!): Notice
  updateNotificationType(data: NotificationTypeUpdateInput!, where: NotificationTypeWhereUniqueInput!): NotificationType
  updateResourceTag(data: ResourceTagUpdateInput!, where: ResourceTagWhereUniqueInput!): ResourceTag
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateGame(data: GameUpdateInput!, where: GameWhereUniqueInput!): Game
  updateGameResult(data: GameResultUpdateInput!, where: GameResultWhereUniqueInput!): GameResult
  updateTournament(data: TournamentUpdateInput!, where: TournamentWhereUniqueInput!): Tournament
  updateTournamentGroup(data: TournamentGroupUpdateInput!, where: TournamentGroupWhereUniqueInput!): TournamentGroup
  updateTourney(data: TourneyUpdateInput!, where: TourneyWhereUniqueInput!): Tourney
  updateVote(data: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote
  updateCallRequest(data: CallRequestUpdateInput!, where: CallRequestWhereUniqueInput!): CallRequest
  updateBeer(data: BeerUpdateInput!, where: BeerWhereUniqueInput!): Beer
  updateAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account
  updateTransaction(data: TransactionUpdateInput!, where: TransactionWhereUniqueInput!): Transaction
  updateUserTarif(data: UserTarifUpdateInput!, where: UserTarifWhereUniqueInput!): UserTarif
  updateTarifRequest(data: TarifRequestUpdateInput!, where: TarifRequestWhereUniqueInput!): TarifRequest
  updateCity(data: CityUpdateInput!, where: CityWhereUniqueInput!): City
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateCommentType(data: CommentTypeUpdateInput!, where: CommentTypeWhereUniqueInput!): CommentType
  updatePhoto(data: PhotoUpdateInput!, where: PhotoWhereUniqueInput!): Photo
  updatePlace(data: PlaceUpdateInput!, where: PlaceWhereUniqueInput!): Place
  updatePlaceBeer(data: PlaceBeerUpdateInput!, where: PlaceBeerWhereUniqueInput!): PlaceBeer
  updateTopic(data: TopicUpdateInput!, where: TopicWhereUniqueInput!): Topic
  updateLetsadsSmsMessageStatusItem(data: LetsadsSmsMessageStatusItemUpdateInput!, where: LetsadsSmsMessageStatusItemWhereUniqueInput!): LetsadsSmsMessageStatusItem
  updateTarif(data: TarifUpdateInput!, where: TarifWhereUniqueInput!): Tarif
  updateEthBlock(data: EthBlockUpdateInput!, where: EthBlockWhereUniqueInput!): EthBlock
  updateSmsProvider(data: SmsProviderUpdateInput!, where: SmsProviderWhereUniqueInput!): SmsProvider
  updateEthContractSource(data: EthContractSourceUpdateInput!, where: EthContractSourceWhereUniqueInput!): EthContractSource
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateChatMessage(data: ChatMessageUpdateInput!, where: ChatMessageWhereUniqueInput!): ChatMessage
  deleteLetter(where: LetterWhereUniqueInput!): Letter
  deleteLog(where: LogWhereUniqueInput!): Log
  deleteFile(where: FileWhereUniqueInput!): File
  deleteRoute(where: RouteWhereUniqueInput!): Route
  deleteSmsMessage(where: SmsMessageWhereUniqueInput!): SmsMessage
  deleteLetsadsSmsMessageStatus(where: LetsadsSmsMessageStatusWhereUniqueInput!): LetsadsSmsMessageStatus
  deleteResetPassword(where: ResetPasswordWhereUniqueInput!): ResetPassword
  deleteUserGroup(where: UserGroupWhereUniqueInput!): UserGroup
  deleteLogedIn(where: LogedInWhereUniqueInput!): LogedIn
  deleteEthAccount(where: EthAccountWhereUniqueInput!): EthAccount
  deleteEthTransaction(where: EthTransactionWhereUniqueInput!): EthTransaction
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteResource(where: ResourceWhereUniqueInput!): Resource
  deleteChatMessageReaded(where: ChatMessageReadedWhereUniqueInput!): ChatMessageReaded
  deleteChatRoom(where: ChatRoomWhereUniqueInput!): ChatRoom
  deleteChatRoomInvitation(where: ChatRoomInvitationWhereUniqueInput!): ChatRoomInvitation
  deleteNotice(where: NoticeWhereUniqueInput!): Notice
  deleteNotificationType(where: NotificationTypeWhereUniqueInput!): NotificationType
  deleteResourceTag(where: ResourceTagWhereUniqueInput!): ResourceTag
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteGame(where: GameWhereUniqueInput!): Game
  deleteGameResult(where: GameResultWhereUniqueInput!): GameResult
  deleteTournament(where: TournamentWhereUniqueInput!): Tournament
  deleteTournamentGroup(where: TournamentGroupWhereUniqueInput!): TournamentGroup
  deleteTourney(where: TourneyWhereUniqueInput!): Tourney
  deleteVote(where: VoteWhereUniqueInput!): Vote
  deleteCallRequest(where: CallRequestWhereUniqueInput!): CallRequest
  deleteBeer(where: BeerWhereUniqueInput!): Beer
  deleteAccount(where: AccountWhereUniqueInput!): Account
  deleteTransaction(where: TransactionWhereUniqueInput!): Transaction
  deleteUserTarif(where: UserTarifWhereUniqueInput!): UserTarif
  deleteTarifRequest(where: TarifRequestWhereUniqueInput!): TarifRequest
  deleteCity(where: CityWhereUniqueInput!): City
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteCommentType(where: CommentTypeWhereUniqueInput!): CommentType
  deletePhoto(where: PhotoWhereUniqueInput!): Photo
  deletePlace(where: PlaceWhereUniqueInput!): Place
  deletePlaceBeer(where: PlaceBeerWhereUniqueInput!): PlaceBeer
  deleteTopic(where: TopicWhereUniqueInput!): Topic
  deleteLetsadsSmsMessageStatusItem(where: LetsadsSmsMessageStatusItemWhereUniqueInput!): LetsadsSmsMessageStatusItem
  deleteTarif(where: TarifWhereUniqueInput!): Tarif
  deleteEthBlock(where: EthBlockWhereUniqueInput!): EthBlock
  deleteSmsProvider(where: SmsProviderWhereUniqueInput!): SmsProvider
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteEthContractSource(where: EthContractSourceWhereUniqueInput!): EthContractSource
  deleteUser(where: UserWhereUniqueInput!): User
  deleteChatMessage(where: ChatMessageWhereUniqueInput!): ChatMessage
  upsertLetter(where: LetterWhereUniqueInput!, create: LetterCreateInput!, update: LetterUpdateInput!): Letter!
  upsertLog(where: LogWhereUniqueInput!, create: LogCreateInput!, update: LogUpdateInput!): Log!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  upsertRoute(where: RouteWhereUniqueInput!, create: RouteCreateInput!, update: RouteUpdateInput!): Route!
  upsertSmsMessage(where: SmsMessageWhereUniqueInput!, create: SmsMessageCreateInput!, update: SmsMessageUpdateInput!): SmsMessage!
  upsertLetsadsSmsMessageStatus(where: LetsadsSmsMessageStatusWhereUniqueInput!, create: LetsadsSmsMessageStatusCreateInput!, update: LetsadsSmsMessageStatusUpdateInput!): LetsadsSmsMessageStatus!
  upsertResetPassword(where: ResetPasswordWhereUniqueInput!, create: ResetPasswordCreateInput!, update: ResetPasswordUpdateInput!): ResetPassword!
  upsertUserGroup(where: UserGroupWhereUniqueInput!, create: UserGroupCreateInput!, update: UserGroupUpdateInput!): UserGroup!
  upsertLogedIn(where: LogedInWhereUniqueInput!, create: LogedInCreateInput!, update: LogedInUpdateInput!): LogedIn!
  upsertEthAccount(where: EthAccountWhereUniqueInput!, create: EthAccountCreateInput!, update: EthAccountUpdateInput!): EthAccount!
  upsertEthTransaction(where: EthTransactionWhereUniqueInput!, create: EthTransactionCreateInput!, update: EthTransactionUpdateInput!): EthTransaction!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  upsertResource(where: ResourceWhereUniqueInput!, create: ResourceCreateInput!, update: ResourceUpdateInput!): Resource!
  upsertChatMessageReaded(where: ChatMessageReadedWhereUniqueInput!, create: ChatMessageReadedCreateInput!, update: ChatMessageReadedUpdateInput!): ChatMessageReaded!
  upsertChatRoom(where: ChatRoomWhereUniqueInput!, create: ChatRoomCreateInput!, update: ChatRoomUpdateInput!): ChatRoom!
  upsertChatRoomInvitation(where: ChatRoomInvitationWhereUniqueInput!, create: ChatRoomInvitationCreateInput!, update: ChatRoomInvitationUpdateInput!): ChatRoomInvitation!
  upsertNotice(where: NoticeWhereUniqueInput!, create: NoticeCreateInput!, update: NoticeUpdateInput!): Notice!
  upsertNotificationType(where: NotificationTypeWhereUniqueInput!, create: NotificationTypeCreateInput!, update: NotificationTypeUpdateInput!): NotificationType!
  upsertResourceTag(where: ResourceTagWhereUniqueInput!, create: ResourceTagCreateInput!, update: ResourceTagUpdateInput!): ResourceTag!
  upsertTag(where: TagWhereUniqueInput!, create: TagCreateInput!, update: TagUpdateInput!): Tag!
  upsertGame(where: GameWhereUniqueInput!, create: GameCreateInput!, update: GameUpdateInput!): Game!
  upsertGameResult(where: GameResultWhereUniqueInput!, create: GameResultCreateInput!, update: GameResultUpdateInput!): GameResult!
  upsertTournament(where: TournamentWhereUniqueInput!, create: TournamentCreateInput!, update: TournamentUpdateInput!): Tournament!
  upsertTournamentGroup(where: TournamentGroupWhereUniqueInput!, create: TournamentGroupCreateInput!, update: TournamentGroupUpdateInput!): TournamentGroup!
  upsertTourney(where: TourneyWhereUniqueInput!, create: TourneyCreateInput!, update: TourneyUpdateInput!): Tourney!
  upsertVote(where: VoteWhereUniqueInput!, create: VoteCreateInput!, update: VoteUpdateInput!): Vote!
  upsertCallRequest(where: CallRequestWhereUniqueInput!, create: CallRequestCreateInput!, update: CallRequestUpdateInput!): CallRequest!
  upsertBeer(where: BeerWhereUniqueInput!, create: BeerCreateInput!, update: BeerUpdateInput!): Beer!
  upsertAccount(where: AccountWhereUniqueInput!, create: AccountCreateInput!, update: AccountUpdateInput!): Account!
  upsertTransaction(where: TransactionWhereUniqueInput!, create: TransactionCreateInput!, update: TransactionUpdateInput!): Transaction!
  upsertUserTarif(where: UserTarifWhereUniqueInput!, create: UserTarifCreateInput!, update: UserTarifUpdateInput!): UserTarif!
  upsertTarifRequest(where: TarifRequestWhereUniqueInput!, create: TarifRequestCreateInput!, update: TarifRequestUpdateInput!): TarifRequest!
  upsertCity(where: CityWhereUniqueInput!, create: CityCreateInput!, update: CityUpdateInput!): City!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  upsertCommentType(where: CommentTypeWhereUniqueInput!, create: CommentTypeCreateInput!, update: CommentTypeUpdateInput!): CommentType!
  upsertPhoto(where: PhotoWhereUniqueInput!, create: PhotoCreateInput!, update: PhotoUpdateInput!): Photo!
  upsertPlace(where: PlaceWhereUniqueInput!, create: PlaceCreateInput!, update: PlaceUpdateInput!): Place!
  upsertPlaceBeer(where: PlaceBeerWhereUniqueInput!, create: PlaceBeerCreateInput!, update: PlaceBeerUpdateInput!): PlaceBeer!
  upsertTopic(where: TopicWhereUniqueInput!, create: TopicCreateInput!, update: TopicUpdateInput!): Topic!
  upsertLetsadsSmsMessageStatusItem(where: LetsadsSmsMessageStatusItemWhereUniqueInput!, create: LetsadsSmsMessageStatusItemCreateInput!, update: LetsadsSmsMessageStatusItemUpdateInput!): LetsadsSmsMessageStatusItem!
  upsertTarif(where: TarifWhereUniqueInput!, create: TarifCreateInput!, update: TarifUpdateInput!): Tarif!
  upsertEthBlock(where: EthBlockWhereUniqueInput!, create: EthBlockCreateInput!, update: EthBlockUpdateInput!): EthBlock!
  upsertSmsProvider(where: SmsProviderWhereUniqueInput!, create: SmsProviderCreateInput!, update: SmsProviderUpdateInput!): SmsProvider!
  upsertEthContractSource(where: EthContractSourceWhereUniqueInput!, create: EthContractSourceCreateInput!, update: EthContractSourceUpdateInput!): EthContractSource!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertChatMessage(where: ChatMessageWhereUniqueInput!, create: ChatMessageCreateInput!, update: ChatMessageUpdateInput!): ChatMessage!
  updateManyLetters(data: LetterUpdateInput!, where: LetterWhereInput): BatchPayload!
  updateManyLogs(data: LogUpdateInput!, where: LogWhereInput): BatchPayload!
  updateManyFiles(data: FileUpdateInput!, where: FileWhereInput): BatchPayload!
  updateManyRoutes(data: RouteUpdateInput!, where: RouteWhereInput): BatchPayload!
  updateManySmsMessages(data: SmsMessageUpdateInput!, where: SmsMessageWhereInput): BatchPayload!
  updateManyLetsadsSmsMessageStatuses(data: LetsadsSmsMessageStatusUpdateInput!, where: LetsadsSmsMessageStatusWhereInput): BatchPayload!
  updateManyResetPasswords(data: ResetPasswordUpdateInput!, where: ResetPasswordWhereInput): BatchPayload!
  updateManyUserGroups(data: UserGroupUpdateInput!, where: UserGroupWhereInput): BatchPayload!
  updateManyLogedIns(data: LogedInUpdateInput!, where: LogedInWhereInput): BatchPayload!
  updateManyEthAccounts(data: EthAccountUpdateInput!, where: EthAccountWhereInput): BatchPayload!
  updateManyEthTransactions(data: EthTransactionUpdateInput!, where: EthTransactionWhereInput): BatchPayload!
  updateManyProjects(data: ProjectUpdateInput!, where: ProjectWhereInput): BatchPayload!
  updateManyResources(data: ResourceUpdateInput!, where: ResourceWhereInput): BatchPayload!
  updateManyChatMessageReadeds(data: ChatMessageReadedUpdateInput!, where: ChatMessageReadedWhereInput): BatchPayload!
  updateManyChatRooms(data: ChatRoomUpdateInput!, where: ChatRoomWhereInput): BatchPayload!
  updateManyChatRoomInvitations(data: ChatRoomInvitationUpdateInput!, where: ChatRoomInvitationWhereInput): BatchPayload!
  updateManyNotices(data: NoticeUpdateInput!, where: NoticeWhereInput): BatchPayload!
  updateManyNotificationTypes(data: NotificationTypeUpdateInput!, where: NotificationTypeWhereInput): BatchPayload!
  updateManyResourceTags(data: ResourceTagUpdateInput!, where: ResourceTagWhereInput): BatchPayload!
  updateManyTags(data: TagUpdateInput!, where: TagWhereInput): BatchPayload!
  updateManyGames(data: GameUpdateInput!, where: GameWhereInput): BatchPayload!
  updateManyGameResults(data: GameResultUpdateInput!, where: GameResultWhereInput): BatchPayload!
  updateManyTournaments(data: TournamentUpdateInput!, where: TournamentWhereInput): BatchPayload!
  updateManyTournamentGroups(data: TournamentGroupUpdateInput!, where: TournamentGroupWhereInput): BatchPayload!
  updateManyTourneys(data: TourneyUpdateInput!, where: TourneyWhereInput): BatchPayload!
  updateManyVotes(data: VoteUpdateInput!, where: VoteWhereInput): BatchPayload!
  updateManyCallRequests(data: CallRequestUpdateInput!, where: CallRequestWhereInput): BatchPayload!
  updateManyBeers(data: BeerUpdateInput!, where: BeerWhereInput): BatchPayload!
  updateManyAccounts(data: AccountUpdateInput!, where: AccountWhereInput): BatchPayload!
  updateManyTransactions(data: TransactionUpdateInput!, where: TransactionWhereInput): BatchPayload!
  updateManyUserTarifs(data: UserTarifUpdateInput!, where: UserTarifWhereInput): BatchPayload!
  updateManyTarifRequests(data: TarifRequestUpdateInput!, where: TarifRequestWhereInput): BatchPayload!
  updateManyCities(data: CityUpdateInput!, where: CityWhereInput): BatchPayload!
  updateManyComments(data: CommentUpdateInput!, where: CommentWhereInput): BatchPayload!
  updateManyCommentTypes(data: CommentTypeUpdateInput!, where: CommentTypeWhereInput): BatchPayload!
  updateManyPhotos(data: PhotoUpdateInput!, where: PhotoWhereInput): BatchPayload!
  updateManyPlaces(data: PlaceUpdateInput!, where: PlaceWhereInput): BatchPayload!
  updateManyPlaceBeers(data: PlaceBeerUpdateInput!, where: PlaceBeerWhereInput): BatchPayload!
  updateManyTopics(data: TopicUpdateInput!, where: TopicWhereInput): BatchPayload!
  updateManyLetsadsSmsMessageStatusItems(data: LetsadsSmsMessageStatusItemUpdateInput!, where: LetsadsSmsMessageStatusItemWhereInput): BatchPayload!
  updateManyTarifs(data: TarifUpdateInput!, where: TarifWhereInput): BatchPayload!
  updateManyEthBlocks(data: EthBlockUpdateInput!, where: EthBlockWhereInput): BatchPayload!
  updateManySmsProviders(data: SmsProviderUpdateInput!, where: SmsProviderWhereInput): BatchPayload!
  updateManyEthContractSources(data: EthContractSourceUpdateInput!, where: EthContractSourceWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyChatMessages(data: ChatMessageUpdateInput!, where: ChatMessageWhereInput): BatchPayload!
  deleteManyLetters(where: LetterWhereInput): BatchPayload!
  deleteManyLogs(where: LogWhereInput): BatchPayload!
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  deleteManyRoutes(where: RouteWhereInput): BatchPayload!
  deleteManySmsMessages(where: SmsMessageWhereInput): BatchPayload!
  deleteManyLetsadsSmsMessageStatuses(where: LetsadsSmsMessageStatusWhereInput): BatchPayload!
  deleteManyResetPasswords(where: ResetPasswordWhereInput): BatchPayload!
  deleteManyUserGroups(where: UserGroupWhereInput): BatchPayload!
  deleteManyLogedIns(where: LogedInWhereInput): BatchPayload!
  deleteManyEthAccounts(where: EthAccountWhereInput): BatchPayload!
  deleteManyEthTransactions(where: EthTransactionWhereInput): BatchPayload!
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  deleteManyResources(where: ResourceWhereInput): BatchPayload!
  deleteManyChatMessageReadeds(where: ChatMessageReadedWhereInput): BatchPayload!
  deleteManyChatRooms(where: ChatRoomWhereInput): BatchPayload!
  deleteManyChatRoomInvitations(where: ChatRoomInvitationWhereInput): BatchPayload!
  deleteManyNotices(where: NoticeWhereInput): BatchPayload!
  deleteManyNotificationTypes(where: NotificationTypeWhereInput): BatchPayload!
  deleteManyResourceTags(where: ResourceTagWhereInput): BatchPayload!
  deleteManyTags(where: TagWhereInput): BatchPayload!
  deleteManyGames(where: GameWhereInput): BatchPayload!
  deleteManyGameResults(where: GameResultWhereInput): BatchPayload!
  deleteManyTournaments(where: TournamentWhereInput): BatchPayload!
  deleteManyTournamentGroups(where: TournamentGroupWhereInput): BatchPayload!
  deleteManyTourneys(where: TourneyWhereInput): BatchPayload!
  deleteManyVotes(where: VoteWhereInput): BatchPayload!
  deleteManyCallRequests(where: CallRequestWhereInput): BatchPayload!
  deleteManyBeers(where: BeerWhereInput): BatchPayload!
  deleteManyAccounts(where: AccountWhereInput): BatchPayload!
  deleteManyTransactions(where: TransactionWhereInput): BatchPayload!
  deleteManyUserTarifs(where: UserTarifWhereInput): BatchPayload!
  deleteManyTarifRequests(where: TarifRequestWhereInput): BatchPayload!
  deleteManyCities(where: CityWhereInput): BatchPayload!
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  deleteManyCommentTypes(where: CommentTypeWhereInput): BatchPayload!
  deleteManyPhotos(where: PhotoWhereInput): BatchPayload!
  deleteManyPlaces(where: PlaceWhereInput): BatchPayload!
  deleteManyPlaceBeers(where: PlaceBeerWhereInput): BatchPayload!
  deleteManyTopics(where: TopicWhereInput): BatchPayload!
  deleteManyLetsadsSmsMessageStatusItems(where: LetsadsSmsMessageStatusItemWhereInput): BatchPayload!
  deleteManyTarifs(where: TarifWhereInput): BatchPayload!
  deleteManyEthBlocks(where: EthBlockWhereInput): BatchPayload!
  deleteManySmsProviders(where: SmsProviderWhereInput): BatchPayload!
  deleteManyTeams(where: TeamWhereInput): BatchPayload!
  deleteManyEthContractSources(where: EthContractSourceWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyChatMessages(where: ChatMessageWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Notice implements Node {
  id: ID!
  createdAt: DateTime!
  type: NoticeType!
  User(where: UserWhereInput): User!
  CreatedBy(where: UserWhereInput): User
  ChatMessage(where: ChatMessageWhereInput): ChatMessage
  ChatRoomInvitation(where: ChatRoomInvitationWhereInput): ChatRoomInvitation
}

"""A connection to a list of items."""
type NoticeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NoticeEdge]!
  aggregate: AggregateNotice!
}

input NoticeCreateInput {
  type: NoticeType!
  User: UserCreateOneWithoutNoticesInput!
  CreatedBy: UserCreateOneInput
  ChatMessage: ChatMessageCreateOneInput
  ChatRoomInvitation: ChatRoomInvitationCreateOneWithoutNoticeInput
}

input NoticeCreateManyWithoutUserInput {
  create: [NoticeCreateWithoutUserInput!]
  connect: [NoticeWhereUniqueInput!]
}

input NoticeCreateOneWithoutChatRoomInvitationInput {
  create: NoticeCreateWithoutChatRoomInvitationInput
  connect: NoticeWhereUniqueInput
}

input NoticeCreateWithoutChatRoomInvitationInput {
  type: NoticeType!
  User: UserCreateOneWithoutNoticesInput!
  CreatedBy: UserCreateOneInput
  ChatMessage: ChatMessageCreateOneInput
}

input NoticeCreateWithoutUserInput {
  type: NoticeType!
  CreatedBy: UserCreateOneInput
  ChatMessage: ChatMessageCreateOneInput
  ChatRoomInvitation: ChatRoomInvitationCreateOneWithoutNoticeInput
}

"""An edge in a connection."""
type NoticeEdge {
  """The item at the end of the edge."""
  node: Notice!

  """A cursor for use in pagination."""
  cursor: String!
}

enum NoticeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type NoticePreviousValues {
  id: ID!
  createdAt: DateTime!
  type: NoticeType!
}

type NoticeSubscriptionPayload {
  mutation: MutationType!
  node: Notice
  updatedFields: [String!]
  previousValues: NoticePreviousValues
}

input NoticeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [NoticeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [NoticeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NoticeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NoticeWhereInput
}

enum NoticeType {
  ChatMessage
  Call
  CallRequest
  ChatRoomInvitation
}

input NoticeUpdateInput {
  type: NoticeType
  User: UserUpdateOneWithoutNoticesInput
  CreatedBy: UserUpdateOneInput
  ChatMessage: ChatMessageUpdateOneInput
  ChatRoomInvitation: ChatRoomInvitationUpdateOneWithoutNoticeInput
}

input NoticeUpdateManyWithoutUserInput {
  create: [NoticeCreateWithoutUserInput!]
  connect: [NoticeWhereUniqueInput!]
  disconnect: [NoticeWhereUniqueInput!]
  delete: [NoticeWhereUniqueInput!]
  update: [NoticeUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [NoticeUpsertWithWhereUniqueWithoutUserInput!]
}

input NoticeUpdateOneWithoutChatRoomInvitationInput {
  create: NoticeCreateWithoutChatRoomInvitationInput
  connect: NoticeWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: NoticeUpdateWithoutChatRoomInvitationDataInput
  upsert: NoticeUpsertWithoutChatRoomInvitationInput
}

input NoticeUpdateWithoutChatRoomInvitationDataInput {
  type: NoticeType
  User: UserUpdateOneWithoutNoticesInput
  CreatedBy: UserUpdateOneInput
  ChatMessage: ChatMessageUpdateOneInput
}

input NoticeUpdateWithoutUserDataInput {
  type: NoticeType
  CreatedBy: UserUpdateOneInput
  ChatMessage: ChatMessageUpdateOneInput
  ChatRoomInvitation: ChatRoomInvitationUpdateOneWithoutNoticeInput
}

input NoticeUpdateWithWhereUniqueWithoutUserInput {
  where: NoticeWhereUniqueInput!
  data: NoticeUpdateWithoutUserDataInput!
}

input NoticeUpsertWithoutChatRoomInvitationInput {
  update: NoticeUpdateWithoutChatRoomInvitationDataInput!
  create: NoticeCreateWithoutChatRoomInvitationInput!
}

input NoticeUpsertWithWhereUniqueWithoutUserInput {
  where: NoticeWhereUniqueInput!
  update: NoticeUpdateWithoutUserDataInput!
  create: NoticeCreateWithoutUserInput!
}

input NoticeWhereInput {
  """Logical AND on all given filters."""
  AND: [NoticeWhereInput!]

  """Logical OR on all given filters."""
  OR: [NoticeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NoticeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  type: NoticeType

  """All values that are not equal to given value."""
  type_not: NoticeType

  """All values that are contained in given list."""
  type_in: [NoticeType!]

  """All values that are not contained in given list."""
  type_not_in: [NoticeType!]
  User: UserWhereInput
  CreatedBy: UserWhereInput
  ChatMessage: ChatMessageWhereInput
  ChatRoomInvitation: ChatRoomInvitationWhereInput
}

input NoticeWhereUniqueInput {
  id: ID
}

type NotificationType implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  code: ID
  comment: String
  Users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  CreatedBy(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type NotificationTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NotificationTypeEdge]!
  aggregate: AggregateNotificationType!
}

input NotificationTypeCreateInput {
  name: String!
  code: ID
  comment: String
  Users: UserCreateManyWithoutNotificationTypesInput
  CreatedBy: UserCreateOneWithoutNotificationTypesCreatedInput!
}

input NotificationTypeCreateManyWithoutCreatedByInput {
  create: [NotificationTypeCreateWithoutCreatedByInput!]
  connect: [NotificationTypeWhereUniqueInput!]
}

input NotificationTypeCreateManyWithoutUsersInput {
  create: [NotificationTypeCreateWithoutUsersInput!]
  connect: [NotificationTypeWhereUniqueInput!]
}

input NotificationTypeCreateWithoutCreatedByInput {
  name: String!
  code: ID
  comment: String
  Users: UserCreateManyWithoutNotificationTypesInput
}

input NotificationTypeCreateWithoutUsersInput {
  name: String!
  code: ID
  comment: String
  CreatedBy: UserCreateOneWithoutNotificationTypesCreatedInput!
}

"""An edge in a connection."""
type NotificationTypeEdge {
  """The item at the end of the edge."""
  node: NotificationType!

  """A cursor for use in pagination."""
  cursor: String!
}

enum NotificationTypeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  code_ASC
  code_DESC
  comment_ASC
  comment_DESC
}

type NotificationTypePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  code: ID
  comment: String
}

type NotificationTypeSubscriptionPayload {
  mutation: MutationType!
  node: NotificationType
  updatedFields: [String!]
  previousValues: NotificationTypePreviousValues
}

input NotificationTypeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [NotificationTypeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [NotificationTypeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NotificationTypeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NotificationTypeWhereInput
}

input NotificationTypeUpdateInput {
  name: String
  code: ID
  comment: String
  Users: UserUpdateManyWithoutNotificationTypesInput
  CreatedBy: UserUpdateOneWithoutNotificationTypesCreatedInput
}

input NotificationTypeUpdateManyWithoutCreatedByInput {
  create: [NotificationTypeCreateWithoutCreatedByInput!]
  connect: [NotificationTypeWhereUniqueInput!]
  disconnect: [NotificationTypeWhereUniqueInput!]
  delete: [NotificationTypeWhereUniqueInput!]
  update: [NotificationTypeUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [NotificationTypeUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input NotificationTypeUpdateManyWithoutUsersInput {
  create: [NotificationTypeCreateWithoutUsersInput!]
  connect: [NotificationTypeWhereUniqueInput!]
  disconnect: [NotificationTypeWhereUniqueInput!]
  delete: [NotificationTypeWhereUniqueInput!]
  update: [NotificationTypeUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [NotificationTypeUpsertWithWhereUniqueWithoutUsersInput!]
}

input NotificationTypeUpdateWithoutCreatedByDataInput {
  name: String
  code: ID
  comment: String
  Users: UserUpdateManyWithoutNotificationTypesInput
}

input NotificationTypeUpdateWithoutUsersDataInput {
  name: String
  code: ID
  comment: String
  CreatedBy: UserUpdateOneWithoutNotificationTypesCreatedInput
}

input NotificationTypeUpdateWithWhereUniqueWithoutCreatedByInput {
  where: NotificationTypeWhereUniqueInput!
  data: NotificationTypeUpdateWithoutCreatedByDataInput!
}

input NotificationTypeUpdateWithWhereUniqueWithoutUsersInput {
  where: NotificationTypeWhereUniqueInput!
  data: NotificationTypeUpdateWithoutUsersDataInput!
}

input NotificationTypeUpsertWithWhereUniqueWithoutCreatedByInput {
  where: NotificationTypeWhereUniqueInput!
  update: NotificationTypeUpdateWithoutCreatedByDataInput!
  create: NotificationTypeCreateWithoutCreatedByInput!
}

input NotificationTypeUpsertWithWhereUniqueWithoutUsersInput {
  where: NotificationTypeWhereUniqueInput!
  update: NotificationTypeUpdateWithoutUsersDataInput!
  create: NotificationTypeCreateWithoutUsersInput!
}

input NotificationTypeWhereInput {
  """Logical AND on all given filters."""
  AND: [NotificationTypeWhereInput!]

  """Logical OR on all given filters."""
  OR: [NotificationTypeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NotificationTypeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  code: ID

  """All values that are not equal to given value."""
  code_not: ID

  """All values that are contained in given list."""
  code_in: [ID!]

  """All values that are not contained in given list."""
  code_not_in: [ID!]

  """All values less than the given value."""
  code_lt: ID

  """All values less than or equal the given value."""
  code_lte: ID

  """All values greater than the given value."""
  code_gt: ID

  """All values greater than or equal the given value."""
  code_gte: ID

  """All values containing the given string."""
  code_contains: ID

  """All values not containing the given string."""
  code_not_contains: ID

  """All values starting with the given string."""
  code_starts_with: ID

  """All values not starting with the given string."""
  code_not_starts_with: ID

  """All values ending with the given string."""
  code_ends_with: ID

  """All values not ending with the given string."""
  code_not_ends_with: ID
  comment: String

  """All values that are not equal to given value."""
  comment_not: String

  """All values that are contained in given list."""
  comment_in: [String!]

  """All values that are not contained in given list."""
  comment_not_in: [String!]

  """All values less than the given value."""
  comment_lt: String

  """All values less than or equal the given value."""
  comment_lte: String

  """All values greater than the given value."""
  comment_gt: String

  """All values greater than or equal the given value."""
  comment_gte: String

  """All values containing the given string."""
  comment_contains: String

  """All values not containing the given string."""
  comment_not_contains: String

  """All values starting with the given string."""
  comment_starts_with: String

  """All values not starting with the given string."""
  comment_not_starts_with: String

  """All values ending with the given string."""
  comment_ends_with: String

  """All values not ending with the given string."""
  comment_not_ends_with: String
  Users_every: UserWhereInput
  Users_some: UserWhereInput
  Users_none: UserWhereInput
  CreatedBy: UserWhereInput
}

input NotificationTypeWhereUniqueInput {
  id: ID
  name: String
  code: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Photo implements Node {
  id: ID!
  photo_id: Int
  user_id: Int
  type_id: Int
  name: String
  description: String
  num_comments: Int
  created_at: DateTime
  updated_at: DateTime
  file_name: String
}

"""A connection to a list of items."""
type PhotoConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PhotoEdge]!
  aggregate: AggregatePhoto!
}

input PhotoCreateInput {
  photo_id: Int
  user_id: Int
  type_id: Int
  name: String
  description: String
  num_comments: Int
  created_at: DateTime
  updated_at: DateTime
  file_name: String
}

"""An edge in a connection."""
type PhotoEdge {
  """The item at the end of the edge."""
  node: Photo!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PhotoOrderByInput {
  id_ASC
  id_DESC
  photo_id_ASC
  photo_id_DESC
  user_id_ASC
  user_id_DESC
  type_id_ASC
  type_id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  num_comments_ASC
  num_comments_DESC
  created_at_ASC
  created_at_DESC
  updated_at_ASC
  updated_at_DESC
  file_name_ASC
  file_name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PhotoPreviousValues {
  id: ID!
  photo_id: Int
  user_id: Int
  type_id: Int
  name: String
  description: String
  num_comments: Int
  created_at: DateTime
  updated_at: DateTime
  file_name: String
}

type PhotoSubscriptionPayload {
  mutation: MutationType!
  node: Photo
  updatedFields: [String!]
  previousValues: PhotoPreviousValues
}

input PhotoSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PhotoSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PhotoSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PhotoSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PhotoWhereInput
}

input PhotoUpdateInput {
  photo_id: Int
  user_id: Int
  type_id: Int
  name: String
  description: String
  num_comments: Int
  created_at: DateTime
  updated_at: DateTime
  file_name: String
}

input PhotoWhereInput {
  """Logical AND on all given filters."""
  AND: [PhotoWhereInput!]

  """Logical OR on all given filters."""
  OR: [PhotoWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PhotoWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  photo_id: Int

  """All values that are not equal to given value."""
  photo_id_not: Int

  """All values that are contained in given list."""
  photo_id_in: [Int!]

  """All values that are not contained in given list."""
  photo_id_not_in: [Int!]

  """All values less than the given value."""
  photo_id_lt: Int

  """All values less than or equal the given value."""
  photo_id_lte: Int

  """All values greater than the given value."""
  photo_id_gt: Int

  """All values greater than or equal the given value."""
  photo_id_gte: Int
  user_id: Int

  """All values that are not equal to given value."""
  user_id_not: Int

  """All values that are contained in given list."""
  user_id_in: [Int!]

  """All values that are not contained in given list."""
  user_id_not_in: [Int!]

  """All values less than the given value."""
  user_id_lt: Int

  """All values less than or equal the given value."""
  user_id_lte: Int

  """All values greater than the given value."""
  user_id_gt: Int

  """All values greater than or equal the given value."""
  user_id_gte: Int
  type_id: Int

  """All values that are not equal to given value."""
  type_id_not: Int

  """All values that are contained in given list."""
  type_id_in: [Int!]

  """All values that are not contained in given list."""
  type_id_not_in: [Int!]

  """All values less than the given value."""
  type_id_lt: Int

  """All values less than or equal the given value."""
  type_id_lte: Int

  """All values greater than the given value."""
  type_id_gt: Int

  """All values greater than or equal the given value."""
  type_id_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  num_comments: Int

  """All values that are not equal to given value."""
  num_comments_not: Int

  """All values that are contained in given list."""
  num_comments_in: [Int!]

  """All values that are not contained in given list."""
  num_comments_not_in: [Int!]

  """All values less than the given value."""
  num_comments_lt: Int

  """All values less than or equal the given value."""
  num_comments_lte: Int

  """All values greater than the given value."""
  num_comments_gt: Int

  """All values greater than or equal the given value."""
  num_comments_gte: Int
  created_at: DateTime

  """All values that are not equal to given value."""
  created_at_not: DateTime

  """All values that are contained in given list."""
  created_at_in: [DateTime!]

  """All values that are not contained in given list."""
  created_at_not_in: [DateTime!]

  """All values less than the given value."""
  created_at_lt: DateTime

  """All values less than or equal the given value."""
  created_at_lte: DateTime

  """All values greater than the given value."""
  created_at_gt: DateTime

  """All values greater than or equal the given value."""
  created_at_gte: DateTime
  updated_at: DateTime

  """All values that are not equal to given value."""
  updated_at_not: DateTime

  """All values that are contained in given list."""
  updated_at_in: [DateTime!]

  """All values that are not contained in given list."""
  updated_at_not_in: [DateTime!]

  """All values less than the given value."""
  updated_at_lt: DateTime

  """All values less than or equal the given value."""
  updated_at_lte: DateTime

  """All values greater than the given value."""
  updated_at_gt: DateTime

  """All values greater than or equal the given value."""
  updated_at_gte: DateTime
  file_name: String

  """All values that are not equal to given value."""
  file_name_not: String

  """All values that are contained in given list."""
  file_name_in: [String!]

  """All values that are not contained in given list."""
  file_name_not_in: [String!]

  """All values less than the given value."""
  file_name_lt: String

  """All values less than or equal the given value."""
  file_name_lte: String

  """All values greater than the given value."""
  file_name_gt: String

  """All values greater than or equal the given value."""
  file_name_gte: String

  """All values containing the given string."""
  file_name_contains: String

  """All values not containing the given string."""
  file_name_not_contains: String

  """All values starting with the given string."""
  file_name_starts_with: String

  """All values not starting with the given string."""
  file_name_not_starts_with: String

  """All values ending with the given string."""
  file_name_ends_with: String

  """All values not ending with the given string."""
  file_name_not_ends_with: String
}

input PhotoWhereUniqueInput {
  id: ID
  photo_id: Int
}

type Place implements Node {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  place_id: Int
  name: String!
  description: String
  address: String
  lng: Float
  lat: Float
  website: String
  phone: String
  work_hours: String
  metro: String
  content: Json
  schedules: Json
  url_name: String
  image: String
  gallery: Json
  is_bar: Boolean
  is_shop: Boolean
  is_brewery: Boolean
  active: Boolean
  email: String
  beers(where: PlaceBeerWhereInput, orderBy: PlaceBeerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PlaceBeer!]
  Owner(where: UserWhereInput): User
  Letters(where: LetterWhereInput, orderBy: LetterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Letter!]
  best: Boolean
  is_request: Int
}

type PlaceBeer implements Node {
  id: ID!
  price: Float
  Place(where: PlaceWhereInput): Place!
  Beer(where: BeerWhereInput): Beer!
}

"""A connection to a list of items."""
type PlaceBeerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PlaceBeerEdge]!
  aggregate: AggregatePlaceBeer!
}

input PlaceBeerCreateInput {
  price: Float
  Place: PlaceCreateOneWithoutBeersInput!
  Beer: BeerCreateOneWithoutPlacesInput!
}

input PlaceBeerCreateManyWithoutBeerInput {
  create: [PlaceBeerCreateWithoutBeerInput!]
  connect: [PlaceBeerWhereUniqueInput!]
}

input PlaceBeerCreateManyWithoutPlaceInput {
  create: [PlaceBeerCreateWithoutPlaceInput!]
  connect: [PlaceBeerWhereUniqueInput!]
}

input PlaceBeerCreateWithoutBeerInput {
  price: Float
  Place: PlaceCreateOneWithoutBeersInput!
}

input PlaceBeerCreateWithoutPlaceInput {
  price: Float
  Beer: BeerCreateOneWithoutPlacesInput!
}

"""An edge in a connection."""
type PlaceBeerEdge {
  """The item at the end of the edge."""
  node: PlaceBeer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PlaceBeerOrderByInput {
  id_ASC
  id_DESC
  price_ASC
  price_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PlaceBeerPreviousValues {
  id: ID!
  price: Float
}

type PlaceBeerSubscriptionPayload {
  mutation: MutationType!
  node: PlaceBeer
  updatedFields: [String!]
  previousValues: PlaceBeerPreviousValues
}

input PlaceBeerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PlaceBeerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PlaceBeerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PlaceBeerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PlaceBeerWhereInput
}

input PlaceBeerUpdateInput {
  price: Float
  Place: PlaceUpdateOneWithoutBeersInput
  Beer: BeerUpdateOneWithoutPlacesInput
}

input PlaceBeerUpdateManyWithoutBeerInput {
  create: [PlaceBeerCreateWithoutBeerInput!]
  connect: [PlaceBeerWhereUniqueInput!]
  disconnect: [PlaceBeerWhereUniqueInput!]
  delete: [PlaceBeerWhereUniqueInput!]
  update: [PlaceBeerUpdateWithWhereUniqueWithoutBeerInput!]
  upsert: [PlaceBeerUpsertWithWhereUniqueWithoutBeerInput!]
}

input PlaceBeerUpdateManyWithoutPlaceInput {
  create: [PlaceBeerCreateWithoutPlaceInput!]
  connect: [PlaceBeerWhereUniqueInput!]
  disconnect: [PlaceBeerWhereUniqueInput!]
  delete: [PlaceBeerWhereUniqueInput!]
  update: [PlaceBeerUpdateWithWhereUniqueWithoutPlaceInput!]
  upsert: [PlaceBeerUpsertWithWhereUniqueWithoutPlaceInput!]
}

input PlaceBeerUpdateWithoutBeerDataInput {
  price: Float
  Place: PlaceUpdateOneWithoutBeersInput
}

input PlaceBeerUpdateWithoutPlaceDataInput {
  price: Float
  Beer: BeerUpdateOneWithoutPlacesInput
}

input PlaceBeerUpdateWithWhereUniqueWithoutBeerInput {
  where: PlaceBeerWhereUniqueInput!
  data: PlaceBeerUpdateWithoutBeerDataInput!
}

input PlaceBeerUpdateWithWhereUniqueWithoutPlaceInput {
  where: PlaceBeerWhereUniqueInput!
  data: PlaceBeerUpdateWithoutPlaceDataInput!
}

input PlaceBeerUpsertWithWhereUniqueWithoutBeerInput {
  where: PlaceBeerWhereUniqueInput!
  update: PlaceBeerUpdateWithoutBeerDataInput!
  create: PlaceBeerCreateWithoutBeerInput!
}

input PlaceBeerUpsertWithWhereUniqueWithoutPlaceInput {
  where: PlaceBeerWhereUniqueInput!
  update: PlaceBeerUpdateWithoutPlaceDataInput!
  create: PlaceBeerCreateWithoutPlaceInput!
}

input PlaceBeerWhereInput {
  """Logical AND on all given filters."""
  AND: [PlaceBeerWhereInput!]

  """Logical OR on all given filters."""
  OR: [PlaceBeerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PlaceBeerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  Place: PlaceWhereInput
  Beer: BeerWhereInput
}

input PlaceBeerWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type PlaceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PlaceEdge]!
  aggregate: AggregatePlace!
}

input PlaceCreateInput {
  place_id: Int
  name: String!
  description: String
  address: String
  lng: Float
  lat: Float
  website: String
  phone: String
  work_hours: String
  metro: String
  content: Json
  schedules: Json
  url_name: String
  image: String
  gallery: Json
  is_bar: Boolean
  is_shop: Boolean
  is_brewery: Boolean
  active: Boolean
  email: String
  best: Boolean
  is_request: Int
  beers: PlaceBeerCreateManyWithoutPlaceInput
  Owner: UserCreateOneWithoutPlacesInput
  Letters: LetterCreateManyWithoutPlaceInput
}

input PlaceCreateManyWithoutOwnerInput {
  create: [PlaceCreateWithoutOwnerInput!]
  connect: [PlaceWhereUniqueInput!]
}

input PlaceCreateOneWithoutBeersInput {
  create: PlaceCreateWithoutBeersInput
  connect: PlaceWhereUniqueInput
}

input PlaceCreateOneWithoutLettersInput {
  create: PlaceCreateWithoutLettersInput
  connect: PlaceWhereUniqueInput
}

input PlaceCreateWithoutBeersInput {
  place_id: Int
  name: String!
  description: String
  address: String
  lng: Float
  lat: Float
  website: String
  phone: String
  work_hours: String
  metro: String
  content: Json
  schedules: Json
  url_name: String
  image: String
  gallery: Json
  is_bar: Boolean
  is_shop: Boolean
  is_brewery: Boolean
  active: Boolean
  email: String
  best: Boolean
  is_request: Int
  Owner: UserCreateOneWithoutPlacesInput
  Letters: LetterCreateManyWithoutPlaceInput
}

input PlaceCreateWithoutLettersInput {
  place_id: Int
  name: String!
  description: String
  address: String
  lng: Float
  lat: Float
  website: String
  phone: String
  work_hours: String
  metro: String
  content: Json
  schedules: Json
  url_name: String
  image: String
  gallery: Json
  is_bar: Boolean
  is_shop: Boolean
  is_brewery: Boolean
  active: Boolean
  email: String
  best: Boolean
  is_request: Int
  beers: PlaceBeerCreateManyWithoutPlaceInput
  Owner: UserCreateOneWithoutPlacesInput
}

input PlaceCreateWithoutOwnerInput {
  place_id: Int
  name: String!
  description: String
  address: String
  lng: Float
  lat: Float
  website: String
  phone: String
  work_hours: String
  metro: String
  content: Json
  schedules: Json
  url_name: String
  image: String
  gallery: Json
  is_bar: Boolean
  is_shop: Boolean
  is_brewery: Boolean
  active: Boolean
  email: String
  best: Boolean
  is_request: Int
  beers: PlaceBeerCreateManyWithoutPlaceInput
  Letters: LetterCreateManyWithoutPlaceInput
}

"""An edge in a connection."""
type PlaceEdge {
  """The item at the end of the edge."""
  node: Place!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PlaceOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  place_id_ASC
  place_id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  address_ASC
  address_DESC
  lng_ASC
  lng_DESC
  lat_ASC
  lat_DESC
  website_ASC
  website_DESC
  phone_ASC
  phone_DESC
  work_hours_ASC
  work_hours_DESC
  metro_ASC
  metro_DESC
  content_ASC
  content_DESC
  schedules_ASC
  schedules_DESC
  url_name_ASC
  url_name_DESC
  image_ASC
  image_DESC
  gallery_ASC
  gallery_DESC
  is_bar_ASC
  is_bar_DESC
  is_shop_ASC
  is_shop_DESC
  is_brewery_ASC
  is_brewery_DESC
  active_ASC
  active_DESC
  email_ASC
  email_DESC
  best_ASC
  best_DESC
  is_request_ASC
  is_request_DESC
}

type PlacePreviousValues {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  place_id: Int
  name: String!
  description: String
  address: String
  lng: Float
  lat: Float
  website: String
  phone: String
  work_hours: String
  metro: String
  content: Json
  schedules: Json
  url_name: String
  image: String
  gallery: Json
  is_bar: Boolean
  is_shop: Boolean
  is_brewery: Boolean
  active: Boolean
  email: String
  best: Boolean
  is_request: Int
}

type PlaceSubscriptionPayload {
  mutation: MutationType!
  node: Place
  updatedFields: [String!]
  previousValues: PlacePreviousValues
}

input PlaceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PlaceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PlaceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PlaceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PlaceWhereInput
}

input PlaceUpdateInput {
  place_id: Int
  name: String
  description: String
  address: String
  lng: Float
  lat: Float
  website: String
  phone: String
  work_hours: String
  metro: String
  content: Json
  schedules: Json
  url_name: String
  image: String
  gallery: Json
  is_bar: Boolean
  is_shop: Boolean
  is_brewery: Boolean
  active: Boolean
  email: String
  best: Boolean
  is_request: Int
  beers: PlaceBeerUpdateManyWithoutPlaceInput
  Owner: UserUpdateOneWithoutPlacesInput
  Letters: LetterUpdateManyWithoutPlaceInput
}

input PlaceUpdateManyWithoutOwnerInput {
  create: [PlaceCreateWithoutOwnerInput!]
  connect: [PlaceWhereUniqueInput!]
  disconnect: [PlaceWhereUniqueInput!]
  delete: [PlaceWhereUniqueInput!]
  update: [PlaceUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [PlaceUpsertWithWhereUniqueWithoutOwnerInput!]
}

input PlaceUpdateOneWithoutBeersInput {
  create: PlaceCreateWithoutBeersInput
  connect: PlaceWhereUniqueInput
  delete: Boolean
  update: PlaceUpdateWithoutBeersDataInput
  upsert: PlaceUpsertWithoutBeersInput
}

input PlaceUpdateOneWithoutLettersInput {
  create: PlaceCreateWithoutLettersInput
  connect: PlaceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PlaceUpdateWithoutLettersDataInput
  upsert: PlaceUpsertWithoutLettersInput
}

input PlaceUpdateWithoutBeersDataInput {
  place_id: Int
  name: String
  description: String
  address: String
  lng: Float
  lat: Float
  website: String
  phone: String
  work_hours: String
  metro: String
  content: Json
  schedules: Json
  url_name: String
  image: String
  gallery: Json
  is_bar: Boolean
  is_shop: Boolean
  is_brewery: Boolean
  active: Boolean
  email: String
  best: Boolean
  is_request: Int
  Owner: UserUpdateOneWithoutPlacesInput
  Letters: LetterUpdateManyWithoutPlaceInput
}

input PlaceUpdateWithoutLettersDataInput {
  place_id: Int
  name: String
  description: String
  address: String
  lng: Float
  lat: Float
  website: String
  phone: String
  work_hours: String
  metro: String
  content: Json
  schedules: Json
  url_name: String
  image: String
  gallery: Json
  is_bar: Boolean
  is_shop: Boolean
  is_brewery: Boolean
  active: Boolean
  email: String
  best: Boolean
  is_request: Int
  beers: PlaceBeerUpdateManyWithoutPlaceInput
  Owner: UserUpdateOneWithoutPlacesInput
}

input PlaceUpdateWithoutOwnerDataInput {
  place_id: Int
  name: String
  description: String
  address: String
  lng: Float
  lat: Float
  website: String
  phone: String
  work_hours: String
  metro: String
  content: Json
  schedules: Json
  url_name: String
  image: String
  gallery: Json
  is_bar: Boolean
  is_shop: Boolean
  is_brewery: Boolean
  active: Boolean
  email: String
  best: Boolean
  is_request: Int
  beers: PlaceBeerUpdateManyWithoutPlaceInput
  Letters: LetterUpdateManyWithoutPlaceInput
}

input PlaceUpdateWithWhereUniqueWithoutOwnerInput {
  where: PlaceWhereUniqueInput!
  data: PlaceUpdateWithoutOwnerDataInput!
}

input PlaceUpsertWithoutBeersInput {
  update: PlaceUpdateWithoutBeersDataInput!
  create: PlaceCreateWithoutBeersInput!
}

input PlaceUpsertWithoutLettersInput {
  update: PlaceUpdateWithoutLettersDataInput!
  create: PlaceCreateWithoutLettersInput!
}

input PlaceUpsertWithWhereUniqueWithoutOwnerInput {
  where: PlaceWhereUniqueInput!
  update: PlaceUpdateWithoutOwnerDataInput!
  create: PlaceCreateWithoutOwnerInput!
}

input PlaceWhereInput {
  """Logical AND on all given filters."""
  AND: [PlaceWhereInput!]

  """Logical OR on all given filters."""
  OR: [PlaceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PlaceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  place_id: Int

  """All values that are not equal to given value."""
  place_id_not: Int

  """All values that are contained in given list."""
  place_id_in: [Int!]

  """All values that are not contained in given list."""
  place_id_not_in: [Int!]

  """All values less than the given value."""
  place_id_lt: Int

  """All values less than or equal the given value."""
  place_id_lte: Int

  """All values greater than the given value."""
  place_id_gt: Int

  """All values greater than or equal the given value."""
  place_id_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  lng: Float

  """All values that are not equal to given value."""
  lng_not: Float

  """All values that are contained in given list."""
  lng_in: [Float!]

  """All values that are not contained in given list."""
  lng_not_in: [Float!]

  """All values less than the given value."""
  lng_lt: Float

  """All values less than or equal the given value."""
  lng_lte: Float

  """All values greater than the given value."""
  lng_gt: Float

  """All values greater than or equal the given value."""
  lng_gte: Float
  lat: Float

  """All values that are not equal to given value."""
  lat_not: Float

  """All values that are contained in given list."""
  lat_in: [Float!]

  """All values that are not contained in given list."""
  lat_not_in: [Float!]

  """All values less than the given value."""
  lat_lt: Float

  """All values less than or equal the given value."""
  lat_lte: Float

  """All values greater than the given value."""
  lat_gt: Float

  """All values greater than or equal the given value."""
  lat_gte: Float
  website: String

  """All values that are not equal to given value."""
  website_not: String

  """All values that are contained in given list."""
  website_in: [String!]

  """All values that are not contained in given list."""
  website_not_in: [String!]

  """All values less than the given value."""
  website_lt: String

  """All values less than or equal the given value."""
  website_lte: String

  """All values greater than the given value."""
  website_gt: String

  """All values greater than or equal the given value."""
  website_gte: String

  """All values containing the given string."""
  website_contains: String

  """All values not containing the given string."""
  website_not_contains: String

  """All values starting with the given string."""
  website_starts_with: String

  """All values not starting with the given string."""
  website_not_starts_with: String

  """All values ending with the given string."""
  website_ends_with: String

  """All values not ending with the given string."""
  website_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  work_hours: String

  """All values that are not equal to given value."""
  work_hours_not: String

  """All values that are contained in given list."""
  work_hours_in: [String!]

  """All values that are not contained in given list."""
  work_hours_not_in: [String!]

  """All values less than the given value."""
  work_hours_lt: String

  """All values less than or equal the given value."""
  work_hours_lte: String

  """All values greater than the given value."""
  work_hours_gt: String

  """All values greater than or equal the given value."""
  work_hours_gte: String

  """All values containing the given string."""
  work_hours_contains: String

  """All values not containing the given string."""
  work_hours_not_contains: String

  """All values starting with the given string."""
  work_hours_starts_with: String

  """All values not starting with the given string."""
  work_hours_not_starts_with: String

  """All values ending with the given string."""
  work_hours_ends_with: String

  """All values not ending with the given string."""
  work_hours_not_ends_with: String
  metro: String

  """All values that are not equal to given value."""
  metro_not: String

  """All values that are contained in given list."""
  metro_in: [String!]

  """All values that are not contained in given list."""
  metro_not_in: [String!]

  """All values less than the given value."""
  metro_lt: String

  """All values less than or equal the given value."""
  metro_lte: String

  """All values greater than the given value."""
  metro_gt: String

  """All values greater than or equal the given value."""
  metro_gte: String

  """All values containing the given string."""
  metro_contains: String

  """All values not containing the given string."""
  metro_not_contains: String

  """All values starting with the given string."""
  metro_starts_with: String

  """All values not starting with the given string."""
  metro_not_starts_with: String

  """All values ending with the given string."""
  metro_ends_with: String

  """All values not ending with the given string."""
  metro_not_ends_with: String
  url_name: String

  """All values that are not equal to given value."""
  url_name_not: String

  """All values that are contained in given list."""
  url_name_in: [String!]

  """All values that are not contained in given list."""
  url_name_not_in: [String!]

  """All values less than the given value."""
  url_name_lt: String

  """All values less than or equal the given value."""
  url_name_lte: String

  """All values greater than the given value."""
  url_name_gt: String

  """All values greater than or equal the given value."""
  url_name_gte: String

  """All values containing the given string."""
  url_name_contains: String

  """All values not containing the given string."""
  url_name_not_contains: String

  """All values starting with the given string."""
  url_name_starts_with: String

  """All values not starting with the given string."""
  url_name_not_starts_with: String

  """All values ending with the given string."""
  url_name_ends_with: String

  """All values not ending with the given string."""
  url_name_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  is_bar: Boolean

  """All values that are not equal to given value."""
  is_bar_not: Boolean
  is_shop: Boolean

  """All values that are not equal to given value."""
  is_shop_not: Boolean
  is_brewery: Boolean

  """All values that are not equal to given value."""
  is_brewery_not: Boolean
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  best: Boolean

  """All values that are not equal to given value."""
  best_not: Boolean
  is_request: Int

  """All values that are not equal to given value."""
  is_request_not: Int

  """All values that are contained in given list."""
  is_request_in: [Int!]

  """All values that are not contained in given list."""
  is_request_not_in: [Int!]

  """All values less than the given value."""
  is_request_lt: Int

  """All values less than or equal the given value."""
  is_request_lte: Int

  """All values greater than the given value."""
  is_request_gt: Int

  """All values greater than or equal the given value."""
  is_request_gte: Int
  beers_every: PlaceBeerWhereInput
  beers_some: PlaceBeerWhereInput
  beers_none: PlaceBeerWhereInput
  Owner: UserWhereInput
  Letters_every: LetterWhereInput
  Letters_some: LetterWhereInput
  Letters_none: LetterWhereInput
}

input PlaceWhereUniqueInput {
  id: ID
  place_id: Int
}

type Project implements Node {
  id: ID!
  domain: String
  PrismaResources(where: ResourceWhereInput, orderBy: ResourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Resource!]
  PrismaUsers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type ProjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  domain: String
  PrismaResources: ResourceCreateManyWithoutPrismaProjectInput
  PrismaUsers: UserCreateManyWithoutPrismaProjectsInput
}

input ProjectCreateManyWithoutPrismaUsersInput {
  create: [ProjectCreateWithoutPrismaUsersInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateOneWithoutPrismaResourcesInput {
  create: ProjectCreateWithoutPrismaResourcesInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateWithoutPrismaResourcesInput {
  domain: String
  PrismaUsers: UserCreateManyWithoutPrismaProjectsInput
}

input ProjectCreateWithoutPrismaUsersInput {
  domain: String
  PrismaResources: ResourceCreateManyWithoutPrismaProjectInput
}

"""An edge in a connection."""
type ProjectEdge {
  """The item at the end of the edge."""
  node: Project!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  domain_ASC
  domain_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProjectPreviousValues {
  id: ID!
  domain: String
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
}

input ProjectUpdateInput {
  domain: String
  PrismaResources: ResourceUpdateManyWithoutPrismaProjectInput
  PrismaUsers: UserUpdateManyWithoutPrismaProjectsInput
}

input ProjectUpdateManyWithoutPrismaUsersInput {
  create: [ProjectCreateWithoutPrismaUsersInput!]
  connect: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  delete: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutPrismaUsersInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutPrismaUsersInput!]
}

input ProjectUpdateOneWithoutPrismaResourcesInput {
  create: ProjectCreateWithoutPrismaResourcesInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProjectUpdateWithoutPrismaResourcesDataInput
  upsert: ProjectUpsertWithoutPrismaResourcesInput
}

input ProjectUpdateWithoutPrismaResourcesDataInput {
  domain: String
  PrismaUsers: UserUpdateManyWithoutPrismaProjectsInput
}

input ProjectUpdateWithoutPrismaUsersDataInput {
  domain: String
  PrismaResources: ResourceUpdateManyWithoutPrismaProjectInput
}

input ProjectUpdateWithWhereUniqueWithoutPrismaUsersInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutPrismaUsersDataInput!
}

input ProjectUpsertWithoutPrismaResourcesInput {
  update: ProjectUpdateWithoutPrismaResourcesDataInput!
  create: ProjectCreateWithoutPrismaResourcesInput!
}

input ProjectUpsertWithWhereUniqueWithoutPrismaUsersInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutPrismaUsersDataInput!
  create: ProjectCreateWithoutPrismaUsersInput!
}

input ProjectWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  domain: String

  """All values that are not equal to given value."""
  domain_not: String

  """All values that are contained in given list."""
  domain_in: [String!]

  """All values that are not contained in given list."""
  domain_not_in: [String!]

  """All values less than the given value."""
  domain_lt: String

  """All values less than or equal the given value."""
  domain_lte: String

  """All values greater than the given value."""
  domain_gt: String

  """All values greater than or equal the given value."""
  domain_gte: String

  """All values containing the given string."""
  domain_contains: String

  """All values not containing the given string."""
  domain_not_contains: String

  """All values starting with the given string."""
  domain_starts_with: String

  """All values not starting with the given string."""
  domain_not_starts_with: String

  """All values ending with the given string."""
  domain_ends_with: String

  """All values not ending with the given string."""
  domain_not_ends_with: String
  PrismaResources_every: ResourceWhereInput
  PrismaResources_some: ResourceWhereInput
  PrismaResources_none: ResourceWhereInput
  PrismaUsers_every: UserWhereInput
  PrismaUsers_some: UserWhereInput
  PrismaUsers_none: UserWhereInput
}

input ProjectWhereUniqueInput {
  id: ID
  domain: String
}

type Query {
  letters(where: LetterWhereInput, orderBy: LetterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Letter]!
  logs(where: LogWhereInput, orderBy: LogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Log]!
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  routes(where: RouteWhereInput, orderBy: RouteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Route]!
  smsMessages(where: SmsMessageWhereInput, orderBy: SmsMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SmsMessage]!
  letsadsSmsMessageStatuses(where: LetsadsSmsMessageStatusWhereInput, orderBy: LetsadsSmsMessageStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LetsadsSmsMessageStatus]!
  resetPasswords(where: ResetPasswordWhereInput, orderBy: ResetPasswordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ResetPassword]!
  userGroups(where: UserGroupWhereInput, orderBy: UserGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserGroup]!
  logedIns(where: LogedInWhereInput, orderBy: LogedInOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LogedIn]!
  ethAccounts(where: EthAccountWhereInput, orderBy: EthAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EthAccount]!
  ethTransactions(where: EthTransactionWhereInput, orderBy: EthTransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EthTransaction]!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  resources(where: ResourceWhereInput, orderBy: ResourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Resource]!
  chatMessageReadeds(where: ChatMessageReadedWhereInput, orderBy: ChatMessageReadedOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChatMessageReaded]!
  chatRooms(where: ChatRoomWhereInput, orderBy: ChatRoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChatRoom]!
  chatRoomInvitations(where: ChatRoomInvitationWhereInput, orderBy: ChatRoomInvitationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChatRoomInvitation]!
  notices(where: NoticeWhereInput, orderBy: NoticeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notice]!
  notificationTypes(where: NotificationTypeWhereInput, orderBy: NotificationTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NotificationType]!
  resourceTags(where: ResourceTagWhereInput, orderBy: ResourceTagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ResourceTag]!
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag]!
  games(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game]!
  gameResults(where: GameResultWhereInput, orderBy: GameResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GameResult]!
  tournaments(where: TournamentWhereInput, orderBy: TournamentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tournament]!
  tournamentGroups(where: TournamentGroupWhereInput, orderBy: TournamentGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TournamentGroup]!
  tourneys(where: TourneyWhereInput, orderBy: TourneyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tourney]!
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote]!
  callRequests(where: CallRequestWhereInput, orderBy: CallRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CallRequest]!
  beers(where: BeerWhereInput, orderBy: BeerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Beer]!
  accounts(where: AccountWhereInput, orderBy: AccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Account]!
  transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction]!
  userTarifs(where: UserTarifWhereInput, orderBy: UserTarifOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserTarif]!
  tarifRequests(where: TarifRequestWhereInput, orderBy: TarifRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TarifRequest]!
  cities(where: CityWhereInput, orderBy: CityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [City]!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentTypes(where: CommentTypeWhereInput, orderBy: CommentTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CommentType]!
  photos(where: PhotoWhereInput, orderBy: PhotoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Photo]!
  places(where: PlaceWhereInput, orderBy: PlaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Place]!
  placeBeers(where: PlaceBeerWhereInput, orderBy: PlaceBeerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PlaceBeer]!
  topics(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic]!
  letsadsSmsMessageStatusItems(where: LetsadsSmsMessageStatusItemWhereInput, orderBy: LetsadsSmsMessageStatusItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LetsadsSmsMessageStatusItem]!
  tarifs(where: TarifWhereInput, orderBy: TarifOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tarif]!
  ethBlocks(where: EthBlockWhereInput, orderBy: EthBlockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EthBlock]!
  smsProviders(where: SmsProviderWhereInput, orderBy: SmsProviderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SmsProvider]!
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team]!
  ethContractSources(where: EthContractSourceWhereInput, orderBy: EthContractSourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EthContractSource]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  chatMessages(where: ChatMessageWhereInput, orderBy: ChatMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChatMessage]!
  letter(where: LetterWhereUniqueInput!): Letter
  log(where: LogWhereUniqueInput!): Log
  file(where: FileWhereUniqueInput!): File
  route(where: RouteWhereUniqueInput!): Route
  smsMessage(where: SmsMessageWhereUniqueInput!): SmsMessage
  letsadsSmsMessageStatus(where: LetsadsSmsMessageStatusWhereUniqueInput!): LetsadsSmsMessageStatus
  resetPassword(where: ResetPasswordWhereUniqueInput!): ResetPassword
  userGroup(where: UserGroupWhereUniqueInput!): UserGroup
  logedIn(where: LogedInWhereUniqueInput!): LogedIn
  ethAccount(where: EthAccountWhereUniqueInput!): EthAccount
  ethTransaction(where: EthTransactionWhereUniqueInput!): EthTransaction
  project(where: ProjectWhereUniqueInput!): Project
  resource(where: ResourceWhereUniqueInput!): Resource
  chatMessageReaded(where: ChatMessageReadedWhereUniqueInput!): ChatMessageReaded
  chatRoom(where: ChatRoomWhereUniqueInput!): ChatRoom
  chatRoomInvitation(where: ChatRoomInvitationWhereUniqueInput!): ChatRoomInvitation
  notice(where: NoticeWhereUniqueInput!): Notice
  notificationType(where: NotificationTypeWhereUniqueInput!): NotificationType
  resourceTag(where: ResourceTagWhereUniqueInput!): ResourceTag
  tag(where: TagWhereUniqueInput!): Tag
  game(where: GameWhereUniqueInput!): Game
  gameResult(where: GameResultWhereUniqueInput!): GameResult
  tournament(where: TournamentWhereUniqueInput!): Tournament
  tournamentGroup(where: TournamentGroupWhereUniqueInput!): TournamentGroup
  tourney(where: TourneyWhereUniqueInput!): Tourney
  vote(where: VoteWhereUniqueInput!): Vote
  callRequest(where: CallRequestWhereUniqueInput!): CallRequest
  beer(where: BeerWhereUniqueInput!): Beer
  account(where: AccountWhereUniqueInput!): Account
  transaction(where: TransactionWhereUniqueInput!): Transaction
  userTarif(where: UserTarifWhereUniqueInput!): UserTarif
  tarifRequest(where: TarifRequestWhereUniqueInput!): TarifRequest
  city(where: CityWhereUniqueInput!): City
  comment(where: CommentWhereUniqueInput!): Comment
  commentType(where: CommentTypeWhereUniqueInput!): CommentType
  photo(where: PhotoWhereUniqueInput!): Photo
  place(where: PlaceWhereUniqueInput!): Place
  placeBeer(where: PlaceBeerWhereUniqueInput!): PlaceBeer
  topic(where: TopicWhereUniqueInput!): Topic
  letsadsSmsMessageStatusItem(where: LetsadsSmsMessageStatusItemWhereUniqueInput!): LetsadsSmsMessageStatusItem
  tarif(where: TarifWhereUniqueInput!): Tarif
  ethBlock(where: EthBlockWhereUniqueInput!): EthBlock
  smsProvider(where: SmsProviderWhereUniqueInput!): SmsProvider
  team(where: TeamWhereUniqueInput!): Team
  ethContractSource(where: EthContractSourceWhereUniqueInput!): EthContractSource
  user(where: UserWhereUniqueInput!): User
  chatMessage(where: ChatMessageWhereUniqueInput!): ChatMessage
  lettersConnection(where: LetterWhereInput, orderBy: LetterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LetterConnection!
  logsConnection(where: LogWhereInput, orderBy: LogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LogConnection!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  routesConnection(where: RouteWhereInput, orderBy: RouteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RouteConnection!
  smsMessagesConnection(where: SmsMessageWhereInput, orderBy: SmsMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SmsMessageConnection!
  letsadsSmsMessageStatusesConnection(where: LetsadsSmsMessageStatusWhereInput, orderBy: LetsadsSmsMessageStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LetsadsSmsMessageStatusConnection!
  resetPasswordsConnection(where: ResetPasswordWhereInput, orderBy: ResetPasswordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ResetPasswordConnection!
  userGroupsConnection(where: UserGroupWhereInput, orderBy: UserGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserGroupConnection!
  logedInsConnection(where: LogedInWhereInput, orderBy: LogedInOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LogedInConnection!
  ethAccountsConnection(where: EthAccountWhereInput, orderBy: EthAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EthAccountConnection!
  ethTransactionsConnection(where: EthTransactionWhereInput, orderBy: EthTransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EthTransactionConnection!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  resourcesConnection(where: ResourceWhereInput, orderBy: ResourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ResourceConnection!
  chatMessageReadedsConnection(where: ChatMessageReadedWhereInput, orderBy: ChatMessageReadedOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChatMessageReadedConnection!
  chatRoomsConnection(where: ChatRoomWhereInput, orderBy: ChatRoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChatRoomConnection!
  chatRoomInvitationsConnection(where: ChatRoomInvitationWhereInput, orderBy: ChatRoomInvitationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChatRoomInvitationConnection!
  noticesConnection(where: NoticeWhereInput, orderBy: NoticeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NoticeConnection!
  notificationTypesConnection(where: NotificationTypeWhereInput, orderBy: NotificationTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NotificationTypeConnection!
  resourceTagsConnection(where: ResourceTagWhereInput, orderBy: ResourceTagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ResourceTagConnection!
  tagsConnection(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TagConnection!
  gamesConnection(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GameConnection!
  gameResultsConnection(where: GameResultWhereInput, orderBy: GameResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GameResultConnection!
  tournamentsConnection(where: TournamentWhereInput, orderBy: TournamentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TournamentConnection!
  tournamentGroupsConnection(where: TournamentGroupWhereInput, orderBy: TournamentGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TournamentGroupConnection!
  tourneysConnection(where: TourneyWhereInput, orderBy: TourneyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TourneyConnection!
  votesConnection(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoteConnection!
  callRequestsConnection(where: CallRequestWhereInput, orderBy: CallRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CallRequestConnection!
  beersConnection(where: BeerWhereInput, orderBy: BeerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BeerConnection!
  accountsConnection(where: AccountWhereInput, orderBy: AccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AccountConnection!
  transactionsConnection(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TransactionConnection!
  userTarifsConnection(where: UserTarifWhereInput, orderBy: UserTarifOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserTarifConnection!
  tarifRequestsConnection(where: TarifRequestWhereInput, orderBy: TarifRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TarifRequestConnection!
  citiesConnection(where: CityWhereInput, orderBy: CityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CityConnection!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  commentTypesConnection(where: CommentTypeWhereInput, orderBy: CommentTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentTypeConnection!
  photosConnection(where: PhotoWhereInput, orderBy: PhotoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PhotoConnection!
  placesConnection(where: PlaceWhereInput, orderBy: PlaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlaceConnection!
  placeBeersConnection(where: PlaceBeerWhereInput, orderBy: PlaceBeerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlaceBeerConnection!
  topicsConnection(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TopicConnection!
  letsadsSmsMessageStatusItemsConnection(where: LetsadsSmsMessageStatusItemWhereInput, orderBy: LetsadsSmsMessageStatusItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LetsadsSmsMessageStatusItemConnection!
  tarifsConnection(where: TarifWhereInput, orderBy: TarifOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TarifConnection!
  ethBlocksConnection(where: EthBlockWhereInput, orderBy: EthBlockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EthBlockConnection!
  smsProvidersConnection(where: SmsProviderWhereInput, orderBy: SmsProviderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SmsProviderConnection!
  teamsConnection(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeamConnection!
  ethContractSourcesConnection(where: EthContractSourceWhereInput, orderBy: EthContractSourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EthContractSourceConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  chatMessagesConnection(where: ChatMessageWhereInput, orderBy: ChatMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChatMessageConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type ResetPassword implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  code: ID
  password: String
  validTill: DateTime
  User(where: UserWhereInput): User
}

"""A connection to a list of items."""
type ResetPasswordConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ResetPasswordEdge]!
  aggregate: AggregateResetPassword!
}

input ResetPasswordCreateInput {
  code: ID
  password: String
  validTill: DateTime
  User: UserCreateOneInput
}

"""An edge in a connection."""
type ResetPasswordEdge {
  """The item at the end of the edge."""
  node: ResetPassword!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ResetPasswordOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  code_ASC
  code_DESC
  password_ASC
  password_DESC
  validTill_ASC
  validTill_DESC
}

type ResetPasswordPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  code: ID
  password: String
  validTill: DateTime
}

type ResetPasswordSubscriptionPayload {
  mutation: MutationType!
  node: ResetPassword
  updatedFields: [String!]
  previousValues: ResetPasswordPreviousValues
}

input ResetPasswordSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ResetPasswordSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ResetPasswordSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ResetPasswordSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ResetPasswordWhereInput
}

input ResetPasswordUpdateInput {
  code: ID
  password: String
  validTill: DateTime
  User: UserUpdateOneInput
}

input ResetPasswordWhereInput {
  """Logical AND on all given filters."""
  AND: [ResetPasswordWhereInput!]

  """Logical OR on all given filters."""
  OR: [ResetPasswordWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ResetPasswordWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  code: ID

  """All values that are not equal to given value."""
  code_not: ID

  """All values that are contained in given list."""
  code_in: [ID!]

  """All values that are not contained in given list."""
  code_not_in: [ID!]

  """All values less than the given value."""
  code_lt: ID

  """All values less than or equal the given value."""
  code_lte: ID

  """All values greater than the given value."""
  code_gt: ID

  """All values greater than or equal the given value."""
  code_gte: ID

  """All values containing the given string."""
  code_contains: ID

  """All values not containing the given string."""
  code_not_contains: ID

  """All values starting with the given string."""
  code_starts_with: ID

  """All values not starting with the given string."""
  code_not_starts_with: ID

  """All values ending with the given string."""
  code_ends_with: ID

  """All values not ending with the given string."""
  code_not_ends_with: ID
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  validTill: DateTime

  """All values that are not equal to given value."""
  validTill_not: DateTime

  """All values that are contained in given list."""
  validTill_in: [DateTime!]

  """All values that are not contained in given list."""
  validTill_not_in: [DateTime!]

  """All values less than the given value."""
  validTill_lt: DateTime

  """All values less than or equal the given value."""
  validTill_lte: DateTime

  """All values greater than the given value."""
  validTill_gt: DateTime

  """All values greater than or equal the given value."""
  validTill_gte: DateTime
  User: UserWhereInput
}

input ResetPasswordWhereUniqueInput {
  id: ID
  code: ID
}

type Resource implements Node {
  id: ID!
  code: ID
  createdAt: DateTime!
  updatedAt: DateTime!
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean!
  deleted: Boolean!
  hidemenu: Boolean!
  searchable: Boolean!
  uri: String
  isfolder: Boolean!
  CreatedBy(where: UserWhereInput): User!
  Parent(where: ResourceWhereInput): Resource
  Childs(where: ResourceWhereInput, orderBy: ResourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Resource!]
  Image(where: FileWhereInput): File
  PrismaProject(where: ProjectWhereInput): Project
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CommentTarget(where: ResourceWhereInput): Resource
  Comments(where: ResourceWhereInput, orderBy: ResourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Resource!]
  Votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  Tags(where: ResourceTagWhereInput, orderBy: ResourceTagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ResourceTag!]
}

"""A connection to a list of items."""
type ResourceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ResourceEdge]!
  aggregate: AggregateResource!
}

input ResourceCreateInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserCreateOneWithoutResourcesInput!
  Parent: ResourceCreateOneWithoutChildsInput
  Childs: ResourceCreateManyWithoutParentInput
  Image: FileCreateOneWithoutImageResourceInput
  PrismaProject: ProjectCreateOneWithoutPrismaResourcesInput
  CommentTarget: ResourceCreateOneWithoutCommentsInput
  Comments: ResourceCreateManyWithoutCommentTargetInput
  Votes: VoteCreateManyWithoutResourceInput
  Tags: ResourceTagCreateManyWithoutResourceInput
}

input ResourceCreateManyWithoutCommentTargetInput {
  create: [ResourceCreateWithoutCommentTargetInput!]
  connect: [ResourceWhereUniqueInput!]
}

input ResourceCreateManyWithoutCreatedByInput {
  create: [ResourceCreateWithoutCreatedByInput!]
  connect: [ResourceWhereUniqueInput!]
}

input ResourceCreateManyWithoutParentInput {
  create: [ResourceCreateWithoutParentInput!]
  connect: [ResourceWhereUniqueInput!]
}

input ResourceCreateManyWithoutPrismaProjectInput {
  create: [ResourceCreateWithoutPrismaProjectInput!]
  connect: [ResourceWhereUniqueInput!]
}

input ResourceCreateOneWithoutChildsInput {
  create: ResourceCreateWithoutChildsInput
  connect: ResourceWhereUniqueInput
}

input ResourceCreateOneWithoutCommentsInput {
  create: ResourceCreateWithoutCommentsInput
  connect: ResourceWhereUniqueInput
}

input ResourceCreateOneWithoutImageInput {
  create: ResourceCreateWithoutImageInput
  connect: ResourceWhereUniqueInput
}

input ResourceCreateOneWithoutTagsInput {
  create: ResourceCreateWithoutTagsInput
  connect: ResourceWhereUniqueInput
}

input ResourceCreateOneWithoutVotesInput {
  create: ResourceCreateWithoutVotesInput
  connect: ResourceWhereUniqueInput
}

input ResourceCreateWithoutChildsInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserCreateOneWithoutResourcesInput!
  Parent: ResourceCreateOneWithoutChildsInput
  Image: FileCreateOneWithoutImageResourceInput
  PrismaProject: ProjectCreateOneWithoutPrismaResourcesInput
  CommentTarget: ResourceCreateOneWithoutCommentsInput
  Comments: ResourceCreateManyWithoutCommentTargetInput
  Votes: VoteCreateManyWithoutResourceInput
  Tags: ResourceTagCreateManyWithoutResourceInput
}

input ResourceCreateWithoutCommentsInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserCreateOneWithoutResourcesInput!
  Parent: ResourceCreateOneWithoutChildsInput
  Childs: ResourceCreateManyWithoutParentInput
  Image: FileCreateOneWithoutImageResourceInput
  PrismaProject: ProjectCreateOneWithoutPrismaResourcesInput
  CommentTarget: ResourceCreateOneWithoutCommentsInput
  Votes: VoteCreateManyWithoutResourceInput
  Tags: ResourceTagCreateManyWithoutResourceInput
}

input ResourceCreateWithoutCommentTargetInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserCreateOneWithoutResourcesInput!
  Parent: ResourceCreateOneWithoutChildsInput
  Childs: ResourceCreateManyWithoutParentInput
  Image: FileCreateOneWithoutImageResourceInput
  PrismaProject: ProjectCreateOneWithoutPrismaResourcesInput
  Comments: ResourceCreateManyWithoutCommentTargetInput
  Votes: VoteCreateManyWithoutResourceInput
  Tags: ResourceTagCreateManyWithoutResourceInput
}

input ResourceCreateWithoutCreatedByInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  Parent: ResourceCreateOneWithoutChildsInput
  Childs: ResourceCreateManyWithoutParentInput
  Image: FileCreateOneWithoutImageResourceInput
  PrismaProject: ProjectCreateOneWithoutPrismaResourcesInput
  CommentTarget: ResourceCreateOneWithoutCommentsInput
  Comments: ResourceCreateManyWithoutCommentTargetInput
  Votes: VoteCreateManyWithoutResourceInput
  Tags: ResourceTagCreateManyWithoutResourceInput
}

input ResourceCreateWithoutImageInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserCreateOneWithoutResourcesInput!
  Parent: ResourceCreateOneWithoutChildsInput
  Childs: ResourceCreateManyWithoutParentInput
  PrismaProject: ProjectCreateOneWithoutPrismaResourcesInput
  CommentTarget: ResourceCreateOneWithoutCommentsInput
  Comments: ResourceCreateManyWithoutCommentTargetInput
  Votes: VoteCreateManyWithoutResourceInput
  Tags: ResourceTagCreateManyWithoutResourceInput
}

input ResourceCreateWithoutParentInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserCreateOneWithoutResourcesInput!
  Childs: ResourceCreateManyWithoutParentInput
  Image: FileCreateOneWithoutImageResourceInput
  PrismaProject: ProjectCreateOneWithoutPrismaResourcesInput
  CommentTarget: ResourceCreateOneWithoutCommentsInput
  Comments: ResourceCreateManyWithoutCommentTargetInput
  Votes: VoteCreateManyWithoutResourceInput
  Tags: ResourceTagCreateManyWithoutResourceInput
}

input ResourceCreateWithoutPrismaProjectInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserCreateOneWithoutResourcesInput!
  Parent: ResourceCreateOneWithoutChildsInput
  Childs: ResourceCreateManyWithoutParentInput
  Image: FileCreateOneWithoutImageResourceInput
  CommentTarget: ResourceCreateOneWithoutCommentsInput
  Comments: ResourceCreateManyWithoutCommentTargetInput
  Votes: VoteCreateManyWithoutResourceInput
  Tags: ResourceTagCreateManyWithoutResourceInput
}

input ResourceCreateWithoutTagsInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserCreateOneWithoutResourcesInput!
  Parent: ResourceCreateOneWithoutChildsInput
  Childs: ResourceCreateManyWithoutParentInput
  Image: FileCreateOneWithoutImageResourceInput
  PrismaProject: ProjectCreateOneWithoutPrismaResourcesInput
  CommentTarget: ResourceCreateOneWithoutCommentsInput
  Comments: ResourceCreateManyWithoutCommentTargetInput
  Votes: VoteCreateManyWithoutResourceInput
}

input ResourceCreateWithoutVotesInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserCreateOneWithoutResourcesInput!
  Parent: ResourceCreateOneWithoutChildsInput
  Childs: ResourceCreateManyWithoutParentInput
  Image: FileCreateOneWithoutImageResourceInput
  PrismaProject: ProjectCreateOneWithoutPrismaResourcesInput
  CommentTarget: ResourceCreateOneWithoutCommentsInput
  Comments: ResourceCreateManyWithoutCommentTargetInput
  Tags: ResourceTagCreateManyWithoutResourceInput
}

"""An edge in a connection."""
type ResourceEdge {
  """The item at the end of the edge."""
  node: Resource!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ResourceOrderByInput {
  id_ASC
  id_DESC
  code_ASC
  code_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  type_ASC
  type_DESC
  name_ASC
  name_DESC
  longtitle_ASC
  longtitle_DESC
  content_ASC
  content_DESC
  contentText_ASC
  contentText_DESC
  published_ASC
  published_DESC
  deleted_ASC
  deleted_DESC
  hidemenu_ASC
  hidemenu_DESC
  searchable_ASC
  searchable_DESC
  uri_ASC
  uri_DESC
  isfolder_ASC
  isfolder_DESC
  rating_ASC
  rating_DESC
  positiveVotesCount_ASC
  positiveVotesCount_DESC
  negativeVotesCount_ASC
  negativeVotesCount_DESC
  neutralVotesCount_ASC
  neutralVotesCount_DESC
}

type ResourcePreviousValues {
  id: ID!
  code: ID
  createdAt: DateTime!
  updatedAt: DateTime!
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean!
  deleted: Boolean!
  hidemenu: Boolean!
  searchable: Boolean!
  uri: String
  isfolder: Boolean!
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
}

type ResourceSubscriptionPayload {
  mutation: MutationType!
  node: Resource
  updatedFields: [String!]
  previousValues: ResourcePreviousValues
}

input ResourceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ResourceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ResourceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ResourceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ResourceWhereInput
}

type ResourceTag implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: TagStatus!
  Resource(where: ResourceWhereInput): Resource!
  Tag(where: TagWhereInput): Tag!
  CreatedBy(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type ResourceTagConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ResourceTagEdge]!
  aggregate: AggregateResourceTag!
}

input ResourceTagCreateInput {
  status: TagStatus
  Resource: ResourceCreateOneWithoutTagsInput!
  Tag: TagCreateOneWithoutResourcesInput!
  CreatedBy: UserCreateOneWithoutResourceTagsInput!
}

input ResourceTagCreateManyWithoutCreatedByInput {
  create: [ResourceTagCreateWithoutCreatedByInput!]
  connect: [ResourceTagWhereUniqueInput!]
}

input ResourceTagCreateManyWithoutResourceInput {
  create: [ResourceTagCreateWithoutResourceInput!]
  connect: [ResourceTagWhereUniqueInput!]
}

input ResourceTagCreateManyWithoutTagInput {
  create: [ResourceTagCreateWithoutTagInput!]
  connect: [ResourceTagWhereUniqueInput!]
}

input ResourceTagCreateWithoutCreatedByInput {
  status: TagStatus
  Resource: ResourceCreateOneWithoutTagsInput!
  Tag: TagCreateOneWithoutResourcesInput!
}

input ResourceTagCreateWithoutResourceInput {
  status: TagStatus
  Tag: TagCreateOneWithoutResourcesInput!
  CreatedBy: UserCreateOneWithoutResourceTagsInput!
}

input ResourceTagCreateWithoutTagInput {
  status: TagStatus
  Resource: ResourceCreateOneWithoutTagsInput!
  CreatedBy: UserCreateOneWithoutResourceTagsInput!
}

"""An edge in a connection."""
type ResourceTagEdge {
  """The item at the end of the edge."""
  node: ResourceTag!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ResourceTagOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  status_ASC
  status_DESC
}

type ResourceTagPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: TagStatus!
}

type ResourceTagSubscriptionPayload {
  mutation: MutationType!
  node: ResourceTag
  updatedFields: [String!]
  previousValues: ResourceTagPreviousValues
}

input ResourceTagSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ResourceTagSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ResourceTagSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ResourceTagSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ResourceTagWhereInput
}

input ResourceTagUpdateInput {
  status: TagStatus
  Resource: ResourceUpdateOneWithoutTagsInput
  Tag: TagUpdateOneWithoutResourcesInput
  CreatedBy: UserUpdateOneWithoutResourceTagsInput
}

input ResourceTagUpdateManyWithoutCreatedByInput {
  create: [ResourceTagCreateWithoutCreatedByInput!]
  connect: [ResourceTagWhereUniqueInput!]
  disconnect: [ResourceTagWhereUniqueInput!]
  delete: [ResourceTagWhereUniqueInput!]
  update: [ResourceTagUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [ResourceTagUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input ResourceTagUpdateManyWithoutResourceInput {
  create: [ResourceTagCreateWithoutResourceInput!]
  connect: [ResourceTagWhereUniqueInput!]
  disconnect: [ResourceTagWhereUniqueInput!]
  delete: [ResourceTagWhereUniqueInput!]
  update: [ResourceTagUpdateWithWhereUniqueWithoutResourceInput!]
  upsert: [ResourceTagUpsertWithWhereUniqueWithoutResourceInput!]
}

input ResourceTagUpdateManyWithoutTagInput {
  create: [ResourceTagCreateWithoutTagInput!]
  connect: [ResourceTagWhereUniqueInput!]
  disconnect: [ResourceTagWhereUniqueInput!]
  delete: [ResourceTagWhereUniqueInput!]
  update: [ResourceTagUpdateWithWhereUniqueWithoutTagInput!]
  upsert: [ResourceTagUpsertWithWhereUniqueWithoutTagInput!]
}

input ResourceTagUpdateWithoutCreatedByDataInput {
  status: TagStatus
  Resource: ResourceUpdateOneWithoutTagsInput
  Tag: TagUpdateOneWithoutResourcesInput
}

input ResourceTagUpdateWithoutResourceDataInput {
  status: TagStatus
  Tag: TagUpdateOneWithoutResourcesInput
  CreatedBy: UserUpdateOneWithoutResourceTagsInput
}

input ResourceTagUpdateWithoutTagDataInput {
  status: TagStatus
  Resource: ResourceUpdateOneWithoutTagsInput
  CreatedBy: UserUpdateOneWithoutResourceTagsInput
}

input ResourceTagUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ResourceTagWhereUniqueInput!
  data: ResourceTagUpdateWithoutCreatedByDataInput!
}

input ResourceTagUpdateWithWhereUniqueWithoutResourceInput {
  where: ResourceTagWhereUniqueInput!
  data: ResourceTagUpdateWithoutResourceDataInput!
}

input ResourceTagUpdateWithWhereUniqueWithoutTagInput {
  where: ResourceTagWhereUniqueInput!
  data: ResourceTagUpdateWithoutTagDataInput!
}

input ResourceTagUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ResourceTagWhereUniqueInput!
  update: ResourceTagUpdateWithoutCreatedByDataInput!
  create: ResourceTagCreateWithoutCreatedByInput!
}

input ResourceTagUpsertWithWhereUniqueWithoutResourceInput {
  where: ResourceTagWhereUniqueInput!
  update: ResourceTagUpdateWithoutResourceDataInput!
  create: ResourceTagCreateWithoutResourceInput!
}

input ResourceTagUpsertWithWhereUniqueWithoutTagInput {
  where: ResourceTagWhereUniqueInput!
  update: ResourceTagUpdateWithoutTagDataInput!
  create: ResourceTagCreateWithoutTagInput!
}

input ResourceTagWhereInput {
  """Logical AND on all given filters."""
  AND: [ResourceTagWhereInput!]

  """Logical OR on all given filters."""
  OR: [ResourceTagWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ResourceTagWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  status: TagStatus

  """All values that are not equal to given value."""
  status_not: TagStatus

  """All values that are contained in given list."""
  status_in: [TagStatus!]

  """All values that are not contained in given list."""
  status_not_in: [TagStatus!]
  Resource: ResourceWhereInput
  Tag: TagWhereInput
  CreatedBy: UserWhereInput
}

input ResourceTagWhereUniqueInput {
  id: ID
}

enum ResourceType {
  Resource
  Blog
  Topic
  Comment
}

input ResourceUpdateInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserUpdateOneWithoutResourcesInput
  Parent: ResourceUpdateOneWithoutChildsInput
  Childs: ResourceUpdateManyWithoutParentInput
  Image: FileUpdateOneWithoutImageResourceInput
  PrismaProject: ProjectUpdateOneWithoutPrismaResourcesInput
  CommentTarget: ResourceUpdateOneWithoutCommentsInput
  Comments: ResourceUpdateManyWithoutCommentTargetInput
  Votes: VoteUpdateManyWithoutResourceInput
  Tags: ResourceTagUpdateManyWithoutResourceInput
}

input ResourceUpdateManyWithoutCommentTargetInput {
  create: [ResourceCreateWithoutCommentTargetInput!]
  connect: [ResourceWhereUniqueInput!]
  disconnect: [ResourceWhereUniqueInput!]
  delete: [ResourceWhereUniqueInput!]
  update: [ResourceUpdateWithWhereUniqueWithoutCommentTargetInput!]
  upsert: [ResourceUpsertWithWhereUniqueWithoutCommentTargetInput!]
}

input ResourceUpdateManyWithoutCreatedByInput {
  create: [ResourceCreateWithoutCreatedByInput!]
  connect: [ResourceWhereUniqueInput!]
  disconnect: [ResourceWhereUniqueInput!]
  delete: [ResourceWhereUniqueInput!]
  update: [ResourceUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [ResourceUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input ResourceUpdateManyWithoutParentInput {
  create: [ResourceCreateWithoutParentInput!]
  connect: [ResourceWhereUniqueInput!]
  disconnect: [ResourceWhereUniqueInput!]
  delete: [ResourceWhereUniqueInput!]
  update: [ResourceUpdateWithWhereUniqueWithoutParentInput!]
  upsert: [ResourceUpsertWithWhereUniqueWithoutParentInput!]
}

input ResourceUpdateManyWithoutPrismaProjectInput {
  create: [ResourceCreateWithoutPrismaProjectInput!]
  connect: [ResourceWhereUniqueInput!]
  disconnect: [ResourceWhereUniqueInput!]
  delete: [ResourceWhereUniqueInput!]
  update: [ResourceUpdateWithWhereUniqueWithoutPrismaProjectInput!]
  upsert: [ResourceUpsertWithWhereUniqueWithoutPrismaProjectInput!]
}

input ResourceUpdateOneWithoutChildsInput {
  create: ResourceCreateWithoutChildsInput
  connect: ResourceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ResourceUpdateWithoutChildsDataInput
  upsert: ResourceUpsertWithoutChildsInput
}

input ResourceUpdateOneWithoutCommentsInput {
  create: ResourceCreateWithoutCommentsInput
  connect: ResourceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ResourceUpdateWithoutCommentsDataInput
  upsert: ResourceUpsertWithoutCommentsInput
}

input ResourceUpdateOneWithoutImageInput {
  create: ResourceCreateWithoutImageInput
  connect: ResourceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ResourceUpdateWithoutImageDataInput
  upsert: ResourceUpsertWithoutImageInput
}

input ResourceUpdateOneWithoutTagsInput {
  create: ResourceCreateWithoutTagsInput
  connect: ResourceWhereUniqueInput
  delete: Boolean
  update: ResourceUpdateWithoutTagsDataInput
  upsert: ResourceUpsertWithoutTagsInput
}

input ResourceUpdateOneWithoutVotesInput {
  create: ResourceCreateWithoutVotesInput
  connect: ResourceWhereUniqueInput
  delete: Boolean
  update: ResourceUpdateWithoutVotesDataInput
  upsert: ResourceUpsertWithoutVotesInput
}

input ResourceUpdateWithoutChildsDataInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserUpdateOneWithoutResourcesInput
  Parent: ResourceUpdateOneWithoutChildsInput
  Image: FileUpdateOneWithoutImageResourceInput
  PrismaProject: ProjectUpdateOneWithoutPrismaResourcesInput
  CommentTarget: ResourceUpdateOneWithoutCommentsInput
  Comments: ResourceUpdateManyWithoutCommentTargetInput
  Votes: VoteUpdateManyWithoutResourceInput
  Tags: ResourceTagUpdateManyWithoutResourceInput
}

input ResourceUpdateWithoutCommentsDataInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserUpdateOneWithoutResourcesInput
  Parent: ResourceUpdateOneWithoutChildsInput
  Childs: ResourceUpdateManyWithoutParentInput
  Image: FileUpdateOneWithoutImageResourceInput
  PrismaProject: ProjectUpdateOneWithoutPrismaResourcesInput
  CommentTarget: ResourceUpdateOneWithoutCommentsInput
  Votes: VoteUpdateManyWithoutResourceInput
  Tags: ResourceTagUpdateManyWithoutResourceInput
}

input ResourceUpdateWithoutCommentTargetDataInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserUpdateOneWithoutResourcesInput
  Parent: ResourceUpdateOneWithoutChildsInput
  Childs: ResourceUpdateManyWithoutParentInput
  Image: FileUpdateOneWithoutImageResourceInput
  PrismaProject: ProjectUpdateOneWithoutPrismaResourcesInput
  Comments: ResourceUpdateManyWithoutCommentTargetInput
  Votes: VoteUpdateManyWithoutResourceInput
  Tags: ResourceTagUpdateManyWithoutResourceInput
}

input ResourceUpdateWithoutCreatedByDataInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  Parent: ResourceUpdateOneWithoutChildsInput
  Childs: ResourceUpdateManyWithoutParentInput
  Image: FileUpdateOneWithoutImageResourceInput
  PrismaProject: ProjectUpdateOneWithoutPrismaResourcesInput
  CommentTarget: ResourceUpdateOneWithoutCommentsInput
  Comments: ResourceUpdateManyWithoutCommentTargetInput
  Votes: VoteUpdateManyWithoutResourceInput
  Tags: ResourceTagUpdateManyWithoutResourceInput
}

input ResourceUpdateWithoutImageDataInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserUpdateOneWithoutResourcesInput
  Parent: ResourceUpdateOneWithoutChildsInput
  Childs: ResourceUpdateManyWithoutParentInput
  PrismaProject: ProjectUpdateOneWithoutPrismaResourcesInput
  CommentTarget: ResourceUpdateOneWithoutCommentsInput
  Comments: ResourceUpdateManyWithoutCommentTargetInput
  Votes: VoteUpdateManyWithoutResourceInput
  Tags: ResourceTagUpdateManyWithoutResourceInput
}

input ResourceUpdateWithoutParentDataInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserUpdateOneWithoutResourcesInput
  Childs: ResourceUpdateManyWithoutParentInput
  Image: FileUpdateOneWithoutImageResourceInput
  PrismaProject: ProjectUpdateOneWithoutPrismaResourcesInput
  CommentTarget: ResourceUpdateOneWithoutCommentsInput
  Comments: ResourceUpdateManyWithoutCommentTargetInput
  Votes: VoteUpdateManyWithoutResourceInput
  Tags: ResourceTagUpdateManyWithoutResourceInput
}

input ResourceUpdateWithoutPrismaProjectDataInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserUpdateOneWithoutResourcesInput
  Parent: ResourceUpdateOneWithoutChildsInput
  Childs: ResourceUpdateManyWithoutParentInput
  Image: FileUpdateOneWithoutImageResourceInput
  CommentTarget: ResourceUpdateOneWithoutCommentsInput
  Comments: ResourceUpdateManyWithoutCommentTargetInput
  Votes: VoteUpdateManyWithoutResourceInput
  Tags: ResourceTagUpdateManyWithoutResourceInput
}

input ResourceUpdateWithoutTagsDataInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserUpdateOneWithoutResourcesInput
  Parent: ResourceUpdateOneWithoutChildsInput
  Childs: ResourceUpdateManyWithoutParentInput
  Image: FileUpdateOneWithoutImageResourceInput
  PrismaProject: ProjectUpdateOneWithoutPrismaResourcesInput
  CommentTarget: ResourceUpdateOneWithoutCommentsInput
  Comments: ResourceUpdateManyWithoutCommentTargetInput
  Votes: VoteUpdateManyWithoutResourceInput
}

input ResourceUpdateWithoutVotesDataInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserUpdateOneWithoutResourcesInput
  Parent: ResourceUpdateOneWithoutChildsInput
  Childs: ResourceUpdateManyWithoutParentInput
  Image: FileUpdateOneWithoutImageResourceInput
  PrismaProject: ProjectUpdateOneWithoutPrismaResourcesInput
  CommentTarget: ResourceUpdateOneWithoutCommentsInput
  Comments: ResourceUpdateManyWithoutCommentTargetInput
  Tags: ResourceTagUpdateManyWithoutResourceInput
}

input ResourceUpdateWithWhereUniqueWithoutCommentTargetInput {
  where: ResourceWhereUniqueInput!
  data: ResourceUpdateWithoutCommentTargetDataInput!
}

input ResourceUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ResourceWhereUniqueInput!
  data: ResourceUpdateWithoutCreatedByDataInput!
}

input ResourceUpdateWithWhereUniqueWithoutParentInput {
  where: ResourceWhereUniqueInput!
  data: ResourceUpdateWithoutParentDataInput!
}

input ResourceUpdateWithWhereUniqueWithoutPrismaProjectInput {
  where: ResourceWhereUniqueInput!
  data: ResourceUpdateWithoutPrismaProjectDataInput!
}

input ResourceUpsertWithoutChildsInput {
  update: ResourceUpdateWithoutChildsDataInput!
  create: ResourceCreateWithoutChildsInput!
}

input ResourceUpsertWithoutCommentsInput {
  update: ResourceUpdateWithoutCommentsDataInput!
  create: ResourceCreateWithoutCommentsInput!
}

input ResourceUpsertWithoutImageInput {
  update: ResourceUpdateWithoutImageDataInput!
  create: ResourceCreateWithoutImageInput!
}

input ResourceUpsertWithoutTagsInput {
  update: ResourceUpdateWithoutTagsDataInput!
  create: ResourceCreateWithoutTagsInput!
}

input ResourceUpsertWithoutVotesInput {
  update: ResourceUpdateWithoutVotesDataInput!
  create: ResourceCreateWithoutVotesInput!
}

input ResourceUpsertWithWhereUniqueWithoutCommentTargetInput {
  where: ResourceWhereUniqueInput!
  update: ResourceUpdateWithoutCommentTargetDataInput!
  create: ResourceCreateWithoutCommentTargetInput!
}

input ResourceUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ResourceWhereUniqueInput!
  update: ResourceUpdateWithoutCreatedByDataInput!
  create: ResourceCreateWithoutCreatedByInput!
}

input ResourceUpsertWithWhereUniqueWithoutParentInput {
  where: ResourceWhereUniqueInput!
  update: ResourceUpdateWithoutParentDataInput!
  create: ResourceCreateWithoutParentInput!
}

input ResourceUpsertWithWhereUniqueWithoutPrismaProjectInput {
  where: ResourceWhereUniqueInput!
  update: ResourceUpdateWithoutPrismaProjectDataInput!
  create: ResourceCreateWithoutPrismaProjectInput!
}

input ResourceWhereInput {
  """Logical AND on all given filters."""
  AND: [ResourceWhereInput!]

  """Logical OR on all given filters."""
  OR: [ResourceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ResourceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  code: ID

  """All values that are not equal to given value."""
  code_not: ID

  """All values that are contained in given list."""
  code_in: [ID!]

  """All values that are not contained in given list."""
  code_not_in: [ID!]

  """All values less than the given value."""
  code_lt: ID

  """All values less than or equal the given value."""
  code_lte: ID

  """All values greater than the given value."""
  code_gt: ID

  """All values greater than or equal the given value."""
  code_gte: ID

  """All values containing the given string."""
  code_contains: ID

  """All values not containing the given string."""
  code_not_contains: ID

  """All values starting with the given string."""
  code_starts_with: ID

  """All values not starting with the given string."""
  code_not_starts_with: ID

  """All values ending with the given string."""
  code_ends_with: ID

  """All values not ending with the given string."""
  code_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  type: ResourceType

  """All values that are not equal to given value."""
  type_not: ResourceType

  """All values that are contained in given list."""
  type_in: [ResourceType!]

  """All values that are not contained in given list."""
  type_not_in: [ResourceType!]
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  longtitle: String

  """All values that are not equal to given value."""
  longtitle_not: String

  """All values that are contained in given list."""
  longtitle_in: [String!]

  """All values that are not contained in given list."""
  longtitle_not_in: [String!]

  """All values less than the given value."""
  longtitle_lt: String

  """All values less than or equal the given value."""
  longtitle_lte: String

  """All values greater than the given value."""
  longtitle_gt: String

  """All values greater than or equal the given value."""
  longtitle_gte: String

  """All values containing the given string."""
  longtitle_contains: String

  """All values not containing the given string."""
  longtitle_not_contains: String

  """All values starting with the given string."""
  longtitle_starts_with: String

  """All values not starting with the given string."""
  longtitle_not_starts_with: String

  """All values ending with the given string."""
  longtitle_ends_with: String

  """All values not ending with the given string."""
  longtitle_not_ends_with: String
  contentText: String

  """All values that are not equal to given value."""
  contentText_not: String

  """All values that are contained in given list."""
  contentText_in: [String!]

  """All values that are not contained in given list."""
  contentText_not_in: [String!]

  """All values less than the given value."""
  contentText_lt: String

  """All values less than or equal the given value."""
  contentText_lte: String

  """All values greater than the given value."""
  contentText_gt: String

  """All values greater than or equal the given value."""
  contentText_gte: String

  """All values containing the given string."""
  contentText_contains: String

  """All values not containing the given string."""
  contentText_not_contains: String

  """All values starting with the given string."""
  contentText_starts_with: String

  """All values not starting with the given string."""
  contentText_not_starts_with: String

  """All values ending with the given string."""
  contentText_ends_with: String

  """All values not ending with the given string."""
  contentText_not_ends_with: String
  published: Boolean

  """All values that are not equal to given value."""
  published_not: Boolean
  deleted: Boolean

  """All values that are not equal to given value."""
  deleted_not: Boolean
  hidemenu: Boolean

  """All values that are not equal to given value."""
  hidemenu_not: Boolean
  searchable: Boolean

  """All values that are not equal to given value."""
  searchable_not: Boolean
  uri: String

  """All values that are not equal to given value."""
  uri_not: String

  """All values that are contained in given list."""
  uri_in: [String!]

  """All values that are not contained in given list."""
  uri_not_in: [String!]

  """All values less than the given value."""
  uri_lt: String

  """All values less than or equal the given value."""
  uri_lte: String

  """All values greater than the given value."""
  uri_gt: String

  """All values greater than or equal the given value."""
  uri_gte: String

  """All values containing the given string."""
  uri_contains: String

  """All values not containing the given string."""
  uri_not_contains: String

  """All values starting with the given string."""
  uri_starts_with: String

  """All values not starting with the given string."""
  uri_not_starts_with: String

  """All values ending with the given string."""
  uri_ends_with: String

  """All values not ending with the given string."""
  uri_not_ends_with: String
  isfolder: Boolean

  """All values that are not equal to given value."""
  isfolder_not: Boolean
  rating: Float

  """All values that are not equal to given value."""
  rating_not: Float

  """All values that are contained in given list."""
  rating_in: [Float!]

  """All values that are not contained in given list."""
  rating_not_in: [Float!]

  """All values less than the given value."""
  rating_lt: Float

  """All values less than or equal the given value."""
  rating_lte: Float

  """All values greater than the given value."""
  rating_gt: Float

  """All values greater than or equal the given value."""
  rating_gte: Float
  positiveVotesCount: Int

  """All values that are not equal to given value."""
  positiveVotesCount_not: Int

  """All values that are contained in given list."""
  positiveVotesCount_in: [Int!]

  """All values that are not contained in given list."""
  positiveVotesCount_not_in: [Int!]

  """All values less than the given value."""
  positiveVotesCount_lt: Int

  """All values less than or equal the given value."""
  positiveVotesCount_lte: Int

  """All values greater than the given value."""
  positiveVotesCount_gt: Int

  """All values greater than or equal the given value."""
  positiveVotesCount_gte: Int
  negativeVotesCount: Int

  """All values that are not equal to given value."""
  negativeVotesCount_not: Int

  """All values that are contained in given list."""
  negativeVotesCount_in: [Int!]

  """All values that are not contained in given list."""
  negativeVotesCount_not_in: [Int!]

  """All values less than the given value."""
  negativeVotesCount_lt: Int

  """All values less than or equal the given value."""
  negativeVotesCount_lte: Int

  """All values greater than the given value."""
  negativeVotesCount_gt: Int

  """All values greater than or equal the given value."""
  negativeVotesCount_gte: Int
  neutralVotesCount: Int

  """All values that are not equal to given value."""
  neutralVotesCount_not: Int

  """All values that are contained in given list."""
  neutralVotesCount_in: [Int!]

  """All values that are not contained in given list."""
  neutralVotesCount_not_in: [Int!]

  """All values less than the given value."""
  neutralVotesCount_lt: Int

  """All values less than or equal the given value."""
  neutralVotesCount_lte: Int

  """All values greater than the given value."""
  neutralVotesCount_gt: Int

  """All values greater than or equal the given value."""
  neutralVotesCount_gte: Int
  CreatedBy: UserWhereInput
  Parent: ResourceWhereInput
  Childs_every: ResourceWhereInput
  Childs_some: ResourceWhereInput
  Childs_none: ResourceWhereInput
  Image: FileWhereInput
  PrismaProject: ProjectWhereInput
  CommentTarget: ResourceWhereInput
  Comments_every: ResourceWhereInput
  Comments_some: ResourceWhereInput
  Comments_none: ResourceWhereInput
  Votes_every: VoteWhereInput
  Votes_some: VoteWhereInput
  Votes_none: VoteWhereInput
  Tags_every: ResourceTagWhereInput
  Tags_some: ResourceTagWhereInput
  Tags_none: ResourceTagWhereInput
}

input ResourceWhereUniqueInput {
  id: ID
  code: ID
  uri: String
}

type Route implements Node {
  id: ID!
  name: String
  path: String!
  exact: Boolean!
  component: String!
  Parent(where: RouteWhereInput): Route
  Childs(where: RouteWhereInput, orderBy: RouteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Route!]
  CreatedBy(where: UserWhereInput): User
}

"""A connection to a list of items."""
type RouteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RouteEdge]!
  aggregate: AggregateRoute!
}

input RouteCreateInput {
  name: String
  path: String!
  exact: Boolean
  component: String!
  Parent: RouteCreateOneWithoutChildsInput
  Childs: RouteCreateManyWithoutParentInput
  CreatedBy: UserCreateOneInput
}

input RouteCreateManyWithoutParentInput {
  create: [RouteCreateWithoutParentInput!]
  connect: [RouteWhereUniqueInput!]
}

input RouteCreateOneWithoutChildsInput {
  create: RouteCreateWithoutChildsInput
  connect: RouteWhereUniqueInput
}

input RouteCreateWithoutChildsInput {
  name: String
  path: String!
  exact: Boolean
  component: String!
  Parent: RouteCreateOneWithoutChildsInput
  CreatedBy: UserCreateOneInput
}

input RouteCreateWithoutParentInput {
  name: String
  path: String!
  exact: Boolean
  component: String!
  Childs: RouteCreateManyWithoutParentInput
  CreatedBy: UserCreateOneInput
}

"""An edge in a connection."""
type RouteEdge {
  """The item at the end of the edge."""
  node: Route!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RouteOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  path_ASC
  path_DESC
  exact_ASC
  exact_DESC
  component_ASC
  component_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RoutePreviousValues {
  id: ID!
  name: String
  path: String!
  exact: Boolean!
  component: String!
}

type RouteSubscriptionPayload {
  mutation: MutationType!
  node: Route
  updatedFields: [String!]
  previousValues: RoutePreviousValues
}

input RouteSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RouteSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RouteSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RouteSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RouteWhereInput
}

input RouteUpdateInput {
  name: String
  path: String
  exact: Boolean
  component: String
  Parent: RouteUpdateOneWithoutChildsInput
  Childs: RouteUpdateManyWithoutParentInput
  CreatedBy: UserUpdateOneInput
}

input RouteUpdateManyWithoutParentInput {
  create: [RouteCreateWithoutParentInput!]
  connect: [RouteWhereUniqueInput!]
  disconnect: [RouteWhereUniqueInput!]
  delete: [RouteWhereUniqueInput!]
  update: [RouteUpdateWithWhereUniqueWithoutParentInput!]
  upsert: [RouteUpsertWithWhereUniqueWithoutParentInput!]
}

input RouteUpdateOneWithoutChildsInput {
  create: RouteCreateWithoutChildsInput
  connect: RouteWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: RouteUpdateWithoutChildsDataInput
  upsert: RouteUpsertWithoutChildsInput
}

input RouteUpdateWithoutChildsDataInput {
  name: String
  path: String
  exact: Boolean
  component: String
  Parent: RouteUpdateOneWithoutChildsInput
  CreatedBy: UserUpdateOneInput
}

input RouteUpdateWithoutParentDataInput {
  name: String
  path: String
  exact: Boolean
  component: String
  Childs: RouteUpdateManyWithoutParentInput
  CreatedBy: UserUpdateOneInput
}

input RouteUpdateWithWhereUniqueWithoutParentInput {
  where: RouteWhereUniqueInput!
  data: RouteUpdateWithoutParentDataInput!
}

input RouteUpsertWithoutChildsInput {
  update: RouteUpdateWithoutChildsDataInput!
  create: RouteCreateWithoutChildsInput!
}

input RouteUpsertWithWhereUniqueWithoutParentInput {
  where: RouteWhereUniqueInput!
  update: RouteUpdateWithoutParentDataInput!
  create: RouteCreateWithoutParentInput!
}

input RouteWhereInput {
  """Logical AND on all given filters."""
  AND: [RouteWhereInput!]

  """Logical OR on all given filters."""
  OR: [RouteWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RouteWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  path: String

  """All values that are not equal to given value."""
  path_not: String

  """All values that are contained in given list."""
  path_in: [String!]

  """All values that are not contained in given list."""
  path_not_in: [String!]

  """All values less than the given value."""
  path_lt: String

  """All values less than or equal the given value."""
  path_lte: String

  """All values greater than the given value."""
  path_gt: String

  """All values greater than or equal the given value."""
  path_gte: String

  """All values containing the given string."""
  path_contains: String

  """All values not containing the given string."""
  path_not_contains: String

  """All values starting with the given string."""
  path_starts_with: String

  """All values not starting with the given string."""
  path_not_starts_with: String

  """All values ending with the given string."""
  path_ends_with: String

  """All values not ending with the given string."""
  path_not_ends_with: String
  exact: Boolean

  """All values that are not equal to given value."""
  exact_not: Boolean
  component: String

  """All values that are not equal to given value."""
  component_not: String

  """All values that are contained in given list."""
  component_in: [String!]

  """All values that are not contained in given list."""
  component_not_in: [String!]

  """All values less than the given value."""
  component_lt: String

  """All values less than or equal the given value."""
  component_lte: String

  """All values greater than the given value."""
  component_gt: String

  """All values greater than or equal the given value."""
  component_gte: String

  """All values containing the given string."""
  component_contains: String

  """All values not containing the given string."""
  component_not_contains: String

  """All values starting with the given string."""
  component_starts_with: String

  """All values not starting with the given string."""
  component_not_starts_with: String

  """All values ending with the given string."""
  component_ends_with: String

  """All values not ending with the given string."""
  component_not_ends_with: String
  Parent: RouteWhereInput
  Childs_every: RouteWhereInput
  Childs_some: RouteWhereInput
  Childs_none: RouteWhereInput
  CreatedBy: UserWhereInput
}

input RouteWhereUniqueInput {
  id: ID
  path: String
}

type SmsMessage implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  from: String!
  text: String!
  recipients: [String!]!
  Provider(where: SmsProviderWhereInput): SmsProvider!
  deletOnSend: Boolean
  CreatedBy(where: UserWhereInput): User
  Status(where: LetsadsSmsMessageStatusWhereInput): LetsadsSmsMessageStatus
}

"""A connection to a list of items."""
type SmsMessageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SmsMessageEdge]!
  aggregate: AggregateSmsMessage!
}

input SmsMessageCreateInput {
  from: String!
  text: String!
  deletOnSend: Boolean
  recipients: SmsMessageCreaterecipientsInput
  Provider: SmsProviderCreateOneInput!
  CreatedBy: UserCreateOneInput
  Status: LetsadsSmsMessageStatusCreateOneWithoutSmsMessageInput
}

input SmsMessageCreateOneWithoutStatusInput {
  create: SmsMessageCreateWithoutStatusInput
  connect: SmsMessageWhereUniqueInput
}

input SmsMessageCreaterecipientsInput {
  set: [String!]
}

input SmsMessageCreateWithoutStatusInput {
  from: String!
  text: String!
  deletOnSend: Boolean
  recipients: SmsMessageCreaterecipientsInput
  Provider: SmsProviderCreateOneInput!
  CreatedBy: UserCreateOneInput
}

"""An edge in a connection."""
type SmsMessageEdge {
  """The item at the end of the edge."""
  node: SmsMessage!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SmsMessageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  from_ASC
  from_DESC
  text_ASC
  text_DESC
  deletOnSend_ASC
  deletOnSend_DESC
}

type SmsMessagePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  from: String!
  text: String!
  recipients: [String!]!
  deletOnSend: Boolean
}

type SmsMessageSubscriptionPayload {
  mutation: MutationType!
  node: SmsMessage
  updatedFields: [String!]
  previousValues: SmsMessagePreviousValues
}

input SmsMessageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SmsMessageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SmsMessageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SmsMessageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SmsMessageWhereInput
}

input SmsMessageUpdateInput {
  from: String
  text: String
  deletOnSend: Boolean
  recipients: SmsMessageUpdaterecipientsInput
  Provider: SmsProviderUpdateOneInput
  CreatedBy: UserUpdateOneInput
  Status: LetsadsSmsMessageStatusUpdateOneWithoutSmsMessageInput
}

input SmsMessageUpdateOneWithoutStatusInput {
  create: SmsMessageCreateWithoutStatusInput
  connect: SmsMessageWhereUniqueInput
  delete: Boolean
  update: SmsMessageUpdateWithoutStatusDataInput
  upsert: SmsMessageUpsertWithoutStatusInput
}

input SmsMessageUpdaterecipientsInput {
  set: [String!]
}

input SmsMessageUpdateWithoutStatusDataInput {
  from: String
  text: String
  deletOnSend: Boolean
  recipients: SmsMessageUpdaterecipientsInput
  Provider: SmsProviderUpdateOneInput
  CreatedBy: UserUpdateOneInput
}

input SmsMessageUpsertWithoutStatusInput {
  update: SmsMessageUpdateWithoutStatusDataInput!
  create: SmsMessageCreateWithoutStatusInput!
}

input SmsMessageWhereInput {
  """Logical AND on all given filters."""
  AND: [SmsMessageWhereInput!]

  """Logical OR on all given filters."""
  OR: [SmsMessageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SmsMessageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  from: String

  """All values that are not equal to given value."""
  from_not: String

  """All values that are contained in given list."""
  from_in: [String!]

  """All values that are not contained in given list."""
  from_not_in: [String!]

  """All values less than the given value."""
  from_lt: String

  """All values less than or equal the given value."""
  from_lte: String

  """All values greater than the given value."""
  from_gt: String

  """All values greater than or equal the given value."""
  from_gte: String

  """All values containing the given string."""
  from_contains: String

  """All values not containing the given string."""
  from_not_contains: String

  """All values starting with the given string."""
  from_starts_with: String

  """All values not starting with the given string."""
  from_not_starts_with: String

  """All values ending with the given string."""
  from_ends_with: String

  """All values not ending with the given string."""
  from_not_ends_with: String
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  deletOnSend: Boolean

  """All values that are not equal to given value."""
  deletOnSend_not: Boolean
  Provider: SmsProviderWhereInput
  CreatedBy: UserWhereInput
  Status: LetsadsSmsMessageStatusWhereInput
}

input SmsMessageWhereUniqueInput {
  id: ID
}

type SmsProvider implements Node {
  id: ID!
  name: String!
  credentials: Json
  CreatedBy(where: UserWhereInput): User
}

"""A connection to a list of items."""
type SmsProviderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SmsProviderEdge]!
  aggregate: AggregateSmsProvider!
}

input SmsProviderCreateInput {
  name: String!
  credentials: Json
  CreatedBy: UserCreateOneInput
}

input SmsProviderCreateOneInput {
  create: SmsProviderCreateInput
  connect: SmsProviderWhereUniqueInput
}

"""An edge in a connection."""
type SmsProviderEdge {
  """The item at the end of the edge."""
  node: SmsProvider!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SmsProviderOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  credentials_ASC
  credentials_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SmsProviderPreviousValues {
  id: ID!
  name: String!
  credentials: Json
}

type SmsProviderSubscriptionPayload {
  mutation: MutationType!
  node: SmsProvider
  updatedFields: [String!]
  previousValues: SmsProviderPreviousValues
}

input SmsProviderSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SmsProviderSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SmsProviderSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SmsProviderSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SmsProviderWhereInput
}

input SmsProviderUpdateDataInput {
  name: String
  credentials: Json
  CreatedBy: UserUpdateOneInput
}

input SmsProviderUpdateInput {
  name: String
  credentials: Json
  CreatedBy: UserUpdateOneInput
}

input SmsProviderUpdateOneInput {
  create: SmsProviderCreateInput
  connect: SmsProviderWhereUniqueInput
  delete: Boolean
  update: SmsProviderUpdateDataInput
  upsert: SmsProviderUpsertNestedInput
}

input SmsProviderUpsertNestedInput {
  update: SmsProviderUpdateDataInput!
  create: SmsProviderCreateInput!
}

input SmsProviderWhereInput {
  """Logical AND on all given filters."""
  AND: [SmsProviderWhereInput!]

  """Logical OR on all given filters."""
  OR: [SmsProviderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SmsProviderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  CreatedBy: UserWhereInput
}

input SmsProviderWhereUniqueInput {
  id: ID
  name: String
}

type Subscription {
  letter(where: LetterSubscriptionWhereInput): LetterSubscriptionPayload
  log(where: LogSubscriptionWhereInput): LogSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  route(where: RouteSubscriptionWhereInput): RouteSubscriptionPayload
  smsMessage(where: SmsMessageSubscriptionWhereInput): SmsMessageSubscriptionPayload
  letsadsSmsMessageStatus(where: LetsadsSmsMessageStatusSubscriptionWhereInput): LetsadsSmsMessageStatusSubscriptionPayload
  resetPassword(where: ResetPasswordSubscriptionWhereInput): ResetPasswordSubscriptionPayload
  userGroup(where: UserGroupSubscriptionWhereInput): UserGroupSubscriptionPayload
  logedIn(where: LogedInSubscriptionWhereInput): LogedInSubscriptionPayload
  ethAccount(where: EthAccountSubscriptionWhereInput): EthAccountSubscriptionPayload
  ethTransaction(where: EthTransactionSubscriptionWhereInput): EthTransactionSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  resource(where: ResourceSubscriptionWhereInput): ResourceSubscriptionPayload
  chatMessageReaded(where: ChatMessageReadedSubscriptionWhereInput): ChatMessageReadedSubscriptionPayload
  chatRoom(where: ChatRoomSubscriptionWhereInput): ChatRoomSubscriptionPayload
  chatRoomInvitation(where: ChatRoomInvitationSubscriptionWhereInput): ChatRoomInvitationSubscriptionPayload
  notice(where: NoticeSubscriptionWhereInput): NoticeSubscriptionPayload
  notificationType(where: NotificationTypeSubscriptionWhereInput): NotificationTypeSubscriptionPayload
  resourceTag(where: ResourceTagSubscriptionWhereInput): ResourceTagSubscriptionPayload
  tag(where: TagSubscriptionWhereInput): TagSubscriptionPayload
  game(where: GameSubscriptionWhereInput): GameSubscriptionPayload
  gameResult(where: GameResultSubscriptionWhereInput): GameResultSubscriptionPayload
  tournament(where: TournamentSubscriptionWhereInput): TournamentSubscriptionPayload
  tournamentGroup(where: TournamentGroupSubscriptionWhereInput): TournamentGroupSubscriptionPayload
  tourney(where: TourneySubscriptionWhereInput): TourneySubscriptionPayload
  vote(where: VoteSubscriptionWhereInput): VoteSubscriptionPayload
  callRequest(where: CallRequestSubscriptionWhereInput): CallRequestSubscriptionPayload
  beer(where: BeerSubscriptionWhereInput): BeerSubscriptionPayload
  account(where: AccountSubscriptionWhereInput): AccountSubscriptionPayload
  transaction(where: TransactionSubscriptionWhereInput): TransactionSubscriptionPayload
  userTarif(where: UserTarifSubscriptionWhereInput): UserTarifSubscriptionPayload
  tarifRequest(where: TarifRequestSubscriptionWhereInput): TarifRequestSubscriptionPayload
  city(where: CitySubscriptionWhereInput): CitySubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  commentType(where: CommentTypeSubscriptionWhereInput): CommentTypeSubscriptionPayload
  photo(where: PhotoSubscriptionWhereInput): PhotoSubscriptionPayload
  place(where: PlaceSubscriptionWhereInput): PlaceSubscriptionPayload
  placeBeer(where: PlaceBeerSubscriptionWhereInput): PlaceBeerSubscriptionPayload
  topic(where: TopicSubscriptionWhereInput): TopicSubscriptionPayload
  letsadsSmsMessageStatusItem(where: LetsadsSmsMessageStatusItemSubscriptionWhereInput): LetsadsSmsMessageStatusItemSubscriptionPayload
  tarif(where: TarifSubscriptionWhereInput): TarifSubscriptionPayload
  ethBlock(where: EthBlockSubscriptionWhereInput): EthBlockSubscriptionPayload
  smsProvider(where: SmsProviderSubscriptionWhereInput): SmsProviderSubscriptionPayload
  team(where: TeamSubscriptionWhereInput): TeamSubscriptionPayload
  ethContractSource(where: EthContractSourceSubscriptionWhereInput): EthContractSourceSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  chatMessage(where: ChatMessageSubscriptionWhereInput): ChatMessageSubscriptionPayload
}

type Tag implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  status: TagStatus!
  Resources(where: ResourceTagWhereInput, orderBy: ResourceTagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ResourceTag!]
  CreatedBy(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type TagConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TagEdge]!
  aggregate: AggregateTag!
}

input TagCreateInput {
  name: String!
  status: TagStatus
  Resources: ResourceTagCreateManyWithoutTagInput
  CreatedBy: UserCreateOneWithoutTagsInput!
}

input TagCreateManyWithoutCreatedByInput {
  create: [TagCreateWithoutCreatedByInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateOneWithoutResourcesInput {
  create: TagCreateWithoutResourcesInput
  connect: TagWhereUniqueInput
}

input TagCreateWithoutCreatedByInput {
  name: String!
  status: TagStatus
  Resources: ResourceTagCreateManyWithoutTagInput
}

input TagCreateWithoutResourcesInput {
  name: String!
  status: TagStatus
  CreatedBy: UserCreateOneWithoutTagsInput!
}

"""An edge in a connection."""
type TagEdge {
  """The item at the end of the edge."""
  node: Tag!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TagOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  status_ASC
  status_DESC
}

type TagPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  status: TagStatus!
}

enum TagStatus {
  Active
  Moderated
  Blocked
}

type TagSubscriptionPayload {
  mutation: MutationType!
  node: Tag
  updatedFields: [String!]
  previousValues: TagPreviousValues
}

input TagSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TagSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TagSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TagSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TagWhereInput
}

input TagUpdateInput {
  name: String
  status: TagStatus
  Resources: ResourceTagUpdateManyWithoutTagInput
  CreatedBy: UserUpdateOneWithoutTagsInput
}

input TagUpdateManyWithoutCreatedByInput {
  create: [TagCreateWithoutCreatedByInput!]
  connect: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  delete: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input TagUpdateOneWithoutResourcesInput {
  create: TagCreateWithoutResourcesInput
  connect: TagWhereUniqueInput
  delete: Boolean
  update: TagUpdateWithoutResourcesDataInput
  upsert: TagUpsertWithoutResourcesInput
}

input TagUpdateWithoutCreatedByDataInput {
  name: String
  status: TagStatus
  Resources: ResourceTagUpdateManyWithoutTagInput
}

input TagUpdateWithoutResourcesDataInput {
  name: String
  status: TagStatus
  CreatedBy: UserUpdateOneWithoutTagsInput
}

input TagUpdateWithWhereUniqueWithoutCreatedByInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutCreatedByDataInput!
}

input TagUpsertWithoutResourcesInput {
  update: TagUpdateWithoutResourcesDataInput!
  create: TagCreateWithoutResourcesInput!
}

input TagUpsertWithWhereUniqueWithoutCreatedByInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutCreatedByDataInput!
  create: TagCreateWithoutCreatedByInput!
}

input TagWhereInput {
  """Logical AND on all given filters."""
  AND: [TagWhereInput!]

  """Logical OR on all given filters."""
  OR: [TagWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TagWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  status: TagStatus

  """All values that are not equal to given value."""
  status_not: TagStatus

  """All values that are contained in given list."""
  status_in: [TagStatus!]

  """All values that are not contained in given list."""
  status_not_in: [TagStatus!]
  Resources_every: ResourceTagWhereInput
  Resources_some: ResourceTagWhereInput
  Resources_none: ResourceTagWhereInput
  CreatedBy: UserWhereInput
}

input TagWhereUniqueInput {
  id: ID
  name: String
}

type Tarif implements Node {
  id: ID!
  name: String!
  active: Boolean
  maxPriceItems: Int
  price: Float
  UserTarifs(where: UserTarifWhereInput, orderBy: UserTarifOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserTarif!]
  allowIcon: Boolean
  allowBanner: Boolean
}

"""A connection to a list of items."""
type TarifConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TarifEdge]!
  aggregate: AggregateTarif!
}

input TarifCreateInput {
  name: String!
  active: Boolean
  maxPriceItems: Int
  price: Float
  allowIcon: Boolean
  allowBanner: Boolean
  UserTarifs: UserTarifCreateManyWithoutTarifInput
}

input TarifCreateOneInput {
  create: TarifCreateInput
  connect: TarifWhereUniqueInput
}

input TarifCreateOneWithoutUserTarifsInput {
  create: TarifCreateWithoutUserTarifsInput
  connect: TarifWhereUniqueInput
}

input TarifCreateWithoutUserTarifsInput {
  name: String!
  active: Boolean
  maxPriceItems: Int
  price: Float
  allowIcon: Boolean
  allowBanner: Boolean
}

"""An edge in a connection."""
type TarifEdge {
  """The item at the end of the edge."""
  node: Tarif!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TarifOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  active_ASC
  active_DESC
  maxPriceItems_ASC
  maxPriceItems_DESC
  price_ASC
  price_DESC
  allowIcon_ASC
  allowIcon_DESC
  allowBanner_ASC
  allowBanner_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TarifPreviousValues {
  id: ID!
  name: String!
  active: Boolean
  maxPriceItems: Int
  price: Float
  allowIcon: Boolean
  allowBanner: Boolean
}

type TarifRequest implements Node {
  id: ID!
  User(where: UserWhereInput): User!
  Tarif(where: TarifWhereInput): Tarif!
  createdAt: DateTime!
  executed: Boolean!
}

"""A connection to a list of items."""
type TarifRequestConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TarifRequestEdge]!
  aggregate: AggregateTarifRequest!
}

input TarifRequestCreateInput {
  executed: Boolean
  User: UserCreateOneInput!
  Tarif: TarifCreateOneInput!
}

"""An edge in a connection."""
type TarifRequestEdge {
  """The item at the end of the edge."""
  node: TarifRequest!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TarifRequestOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  executed_ASC
  executed_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TarifRequestPreviousValues {
  id: ID!
  createdAt: DateTime!
  executed: Boolean!
}

type TarifRequestSubscriptionPayload {
  mutation: MutationType!
  node: TarifRequest
  updatedFields: [String!]
  previousValues: TarifRequestPreviousValues
}

input TarifRequestSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TarifRequestSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TarifRequestSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TarifRequestSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TarifRequestWhereInput
}

input TarifRequestUpdateInput {
  executed: Boolean
  User: UserUpdateOneInput
  Tarif: TarifUpdateOneInput
}

input TarifRequestWhereInput {
  """Logical AND on all given filters."""
  AND: [TarifRequestWhereInput!]

  """Logical OR on all given filters."""
  OR: [TarifRequestWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TarifRequestWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  executed: Boolean

  """All values that are not equal to given value."""
  executed_not: Boolean
  User: UserWhereInput
  Tarif: TarifWhereInput
}

input TarifRequestWhereUniqueInput {
  id: ID
}

type TarifSubscriptionPayload {
  mutation: MutationType!
  node: Tarif
  updatedFields: [String!]
  previousValues: TarifPreviousValues
}

input TarifSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TarifSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TarifSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TarifSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TarifWhereInput
}

input TarifUpdateDataInput {
  name: String
  active: Boolean
  maxPriceItems: Int
  price: Float
  allowIcon: Boolean
  allowBanner: Boolean
  UserTarifs: UserTarifUpdateManyWithoutTarifInput
}

input TarifUpdateInput {
  name: String
  active: Boolean
  maxPriceItems: Int
  price: Float
  allowIcon: Boolean
  allowBanner: Boolean
  UserTarifs: UserTarifUpdateManyWithoutTarifInput
}

input TarifUpdateOneInput {
  create: TarifCreateInput
  connect: TarifWhereUniqueInput
  delete: Boolean
  update: TarifUpdateDataInput
  upsert: TarifUpsertNestedInput
}

input TarifUpdateOneWithoutUserTarifsInput {
  create: TarifCreateWithoutUserTarifsInput
  connect: TarifWhereUniqueInput
  delete: Boolean
  update: TarifUpdateWithoutUserTarifsDataInput
  upsert: TarifUpsertWithoutUserTarifsInput
}

input TarifUpdateWithoutUserTarifsDataInput {
  name: String
  active: Boolean
  maxPriceItems: Int
  price: Float
  allowIcon: Boolean
  allowBanner: Boolean
}

input TarifUpsertNestedInput {
  update: TarifUpdateDataInput!
  create: TarifCreateInput!
}

input TarifUpsertWithoutUserTarifsInput {
  update: TarifUpdateWithoutUserTarifsDataInput!
  create: TarifCreateWithoutUserTarifsInput!
}

input TarifWhereInput {
  """Logical AND on all given filters."""
  AND: [TarifWhereInput!]

  """Logical OR on all given filters."""
  OR: [TarifWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TarifWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  maxPriceItems: Int

  """All values that are not equal to given value."""
  maxPriceItems_not: Int

  """All values that are contained in given list."""
  maxPriceItems_in: [Int!]

  """All values that are not contained in given list."""
  maxPriceItems_not_in: [Int!]

  """All values less than the given value."""
  maxPriceItems_lt: Int

  """All values less than or equal the given value."""
  maxPriceItems_lte: Int

  """All values greater than the given value."""
  maxPriceItems_gt: Int

  """All values greater than or equal the given value."""
  maxPriceItems_gte: Int
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  allowIcon: Boolean

  """All values that are not equal to given value."""
  allowIcon_not: Boolean
  allowBanner: Boolean

  """All values that are not equal to given value."""
  allowBanner_not: Boolean
  UserTarifs_every: UserTarifWhereInput
  UserTarifs_some: UserTarifWhereInput
  UserTarifs_none: UserTarifWhereInput
}

input TarifWhereUniqueInput {
  id: ID
}

type Team implements Node {
  id: ID!
}

"""A connection to a list of items."""
type TeamConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TeamEdge]!
  aggregate: AggregateTeam!
}

input TeamCreateManyInput {
  connect: [TeamWhereUniqueInput!]
}

input TeamCreateOneInput {
  connect: TeamWhereUniqueInput
}

"""An edge in a connection."""
type TeamEdge {
  """The item at the end of the edge."""
  node: Team!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TeamOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TeamPreviousValues {
  id: ID!
}

type TeamSubscriptionPayload {
  mutation: MutationType!
  node: Team
  updatedFields: [String!]
  previousValues: TeamPreviousValues
}

input TeamSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TeamSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeamSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeamSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TeamWhereInput
}

input TeamUpdateManyInput {
  connect: [TeamWhereUniqueInput!]
  disconnect: [TeamWhereUniqueInput!]
  delete: [TeamWhereUniqueInput!]
}

input TeamUpdateOneInput {
  connect: TeamWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
}

input TeamWhereInput {
  """Logical AND on all given filters."""
  AND: [TeamWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeamWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeamWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
}

input TeamWhereUniqueInput {
  id: ID
}

type Topic implements Node {
  id: ID!
  topic_id: Int
  updatedAt: DateTime!
  createdAt: DateTime!
  created_at: DateTime!
  created_by(where: UserWhereInput): User!
  name: String!
  editor_content: Json
  url_name: String
  type_id: Int!
  published: Boolean
  description: String
}

"""A connection to a list of items."""
type TopicConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TopicEdge]!
  aggregate: AggregateTopic!
}

input TopicCreateInput {
  topic_id: Int
  created_at: DateTime!
  name: String!
  editor_content: Json
  url_name: String
  type_id: Int!
  published: Boolean
  description: String
  created_by: UserCreateOneWithoutTopicsInput!
}

input TopicCreateManyWithoutCreated_byInput {
  create: [TopicCreateWithoutCreated_byInput!]
  connect: [TopicWhereUniqueInput!]
}

input TopicCreateWithoutCreated_byInput {
  topic_id: Int
  created_at: DateTime!
  name: String!
  editor_content: Json
  url_name: String
  type_id: Int!
  published: Boolean
  description: String
}

"""An edge in a connection."""
type TopicEdge {
  """The item at the end of the edge."""
  node: Topic!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TopicOrderByInput {
  id_ASC
  id_DESC
  topic_id_ASC
  topic_id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  created_at_ASC
  created_at_DESC
  name_ASC
  name_DESC
  editor_content_ASC
  editor_content_DESC
  url_name_ASC
  url_name_DESC
  type_id_ASC
  type_id_DESC
  published_ASC
  published_DESC
  description_ASC
  description_DESC
}

type TopicPreviousValues {
  id: ID!
  topic_id: Int
  updatedAt: DateTime!
  createdAt: DateTime!
  created_at: DateTime!
  name: String!
  editor_content: Json
  url_name: String
  type_id: Int!
  published: Boolean
  description: String
}

type TopicSubscriptionPayload {
  mutation: MutationType!
  node: Topic
  updatedFields: [String!]
  previousValues: TopicPreviousValues
}

input TopicSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TopicSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TopicSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TopicSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TopicWhereInput
}

input TopicUpdateInput {
  topic_id: Int
  created_at: DateTime
  name: String
  editor_content: Json
  url_name: String
  type_id: Int
  published: Boolean
  description: String
  created_by: UserUpdateOneWithoutTopicsInput
}

input TopicUpdateManyWithoutCreated_byInput {
  create: [TopicCreateWithoutCreated_byInput!]
  connect: [TopicWhereUniqueInput!]
  disconnect: [TopicWhereUniqueInput!]
  delete: [TopicWhereUniqueInput!]
  update: [TopicUpdateWithWhereUniqueWithoutCreated_byInput!]
  upsert: [TopicUpsertWithWhereUniqueWithoutCreated_byInput!]
}

input TopicUpdateWithoutCreated_byDataInput {
  topic_id: Int
  created_at: DateTime
  name: String
  editor_content: Json
  url_name: String
  type_id: Int
  published: Boolean
  description: String
}

input TopicUpdateWithWhereUniqueWithoutCreated_byInput {
  where: TopicWhereUniqueInput!
  data: TopicUpdateWithoutCreated_byDataInput!
}

input TopicUpsertWithWhereUniqueWithoutCreated_byInput {
  where: TopicWhereUniqueInput!
  update: TopicUpdateWithoutCreated_byDataInput!
  create: TopicCreateWithoutCreated_byInput!
}

input TopicWhereInput {
  """Logical AND on all given filters."""
  AND: [TopicWhereInput!]

  """Logical OR on all given filters."""
  OR: [TopicWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TopicWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  topic_id: Int

  """All values that are not equal to given value."""
  topic_id_not: Int

  """All values that are contained in given list."""
  topic_id_in: [Int!]

  """All values that are not contained in given list."""
  topic_id_not_in: [Int!]

  """All values less than the given value."""
  topic_id_lt: Int

  """All values less than or equal the given value."""
  topic_id_lte: Int

  """All values greater than the given value."""
  topic_id_gt: Int

  """All values greater than or equal the given value."""
  topic_id_gte: Int
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  created_at: DateTime

  """All values that are not equal to given value."""
  created_at_not: DateTime

  """All values that are contained in given list."""
  created_at_in: [DateTime!]

  """All values that are not contained in given list."""
  created_at_not_in: [DateTime!]

  """All values less than the given value."""
  created_at_lt: DateTime

  """All values less than or equal the given value."""
  created_at_lte: DateTime

  """All values greater than the given value."""
  created_at_gt: DateTime

  """All values greater than or equal the given value."""
  created_at_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  url_name: String

  """All values that are not equal to given value."""
  url_name_not: String

  """All values that are contained in given list."""
  url_name_in: [String!]

  """All values that are not contained in given list."""
  url_name_not_in: [String!]

  """All values less than the given value."""
  url_name_lt: String

  """All values less than or equal the given value."""
  url_name_lte: String

  """All values greater than the given value."""
  url_name_gt: String

  """All values greater than or equal the given value."""
  url_name_gte: String

  """All values containing the given string."""
  url_name_contains: String

  """All values not containing the given string."""
  url_name_not_contains: String

  """All values starting with the given string."""
  url_name_starts_with: String

  """All values not starting with the given string."""
  url_name_not_starts_with: String

  """All values ending with the given string."""
  url_name_ends_with: String

  """All values not ending with the given string."""
  url_name_not_ends_with: String
  type_id: Int

  """All values that are not equal to given value."""
  type_id_not: Int

  """All values that are contained in given list."""
  type_id_in: [Int!]

  """All values that are not contained in given list."""
  type_id_not_in: [Int!]

  """All values less than the given value."""
  type_id_lt: Int

  """All values less than or equal the given value."""
  type_id_lte: Int

  """All values greater than the given value."""
  type_id_gt: Int

  """All values greater than or equal the given value."""
  type_id_gte: Int
  published: Boolean

  """All values that are not equal to given value."""
  published_not: Boolean
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  created_by: UserWhereInput
}

input TopicWhereUniqueInput {
  id: ID
  topic_id: Int
  url_name: String
}

type Tournament implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  code: ID
  CreatedBy(where: UserWhereInput): User
  Tourneys(where: TourneyWhereInput, orderBy: TourneyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tourney!]
  Group(where: TournamentGroupWhereInput): TournamentGroup
}

"""A connection to a list of items."""
type TournamentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TournamentEdge]!
  aggregate: AggregateTournament!
}

input TournamentCreateInput {
  name: String
  code: ID
  CreatedBy: UserCreateOneInput
  Tourneys: TourneyCreateManyWithoutTournamentInput
  Group: TournamentGroupCreateOneWithoutTournamentsInput
}

input TournamentCreateManyWithoutGroupInput {
  create: [TournamentCreateWithoutGroupInput!]
  connect: [TournamentWhereUniqueInput!]
}

input TournamentCreateOneWithoutTourneysInput {
  create: TournamentCreateWithoutTourneysInput
  connect: TournamentWhereUniqueInput
}

input TournamentCreateWithoutGroupInput {
  name: String
  code: ID
  CreatedBy: UserCreateOneInput
  Tourneys: TourneyCreateManyWithoutTournamentInput
}

input TournamentCreateWithoutTourneysInput {
  name: String
  code: ID
  CreatedBy: UserCreateOneInput
  Group: TournamentGroupCreateOneWithoutTournamentsInput
}

"""An edge in a connection."""
type TournamentEdge {
  """The item at the end of the edge."""
  node: Tournament!

  """A cursor for use in pagination."""
  cursor: String!
}

type TournamentGroup implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  code: ID
  CreatedBy(where: UserWhereInput): User
  Tournaments(where: TournamentWhereInput, orderBy: TournamentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tournament!]
}

"""A connection to a list of items."""
type TournamentGroupConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TournamentGroupEdge]!
  aggregate: AggregateTournamentGroup!
}

input TournamentGroupCreateInput {
  name: String
  code: ID
  CreatedBy: UserCreateOneInput
  Tournaments: TournamentCreateManyWithoutGroupInput
}

input TournamentGroupCreateOneWithoutTournamentsInput {
  create: TournamentGroupCreateWithoutTournamentsInput
  connect: TournamentGroupWhereUniqueInput
}

input TournamentGroupCreateWithoutTournamentsInput {
  name: String
  code: ID
  CreatedBy: UserCreateOneInput
}

"""An edge in a connection."""
type TournamentGroupEdge {
  """The item at the end of the edge."""
  node: TournamentGroup!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TournamentGroupOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  code_ASC
  code_DESC
}

type TournamentGroupPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  code: ID
}

type TournamentGroupSubscriptionPayload {
  mutation: MutationType!
  node: TournamentGroup
  updatedFields: [String!]
  previousValues: TournamentGroupPreviousValues
}

input TournamentGroupSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TournamentGroupSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TournamentGroupSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TournamentGroupSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TournamentGroupWhereInput
}

input TournamentGroupUpdateInput {
  name: String
  code: ID
  CreatedBy: UserUpdateOneInput
  Tournaments: TournamentUpdateManyWithoutGroupInput
}

input TournamentGroupUpdateOneWithoutTournamentsInput {
  create: TournamentGroupCreateWithoutTournamentsInput
  connect: TournamentGroupWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TournamentGroupUpdateWithoutTournamentsDataInput
  upsert: TournamentGroupUpsertWithoutTournamentsInput
}

input TournamentGroupUpdateWithoutTournamentsDataInput {
  name: String
  code: ID
  CreatedBy: UserUpdateOneInput
}

input TournamentGroupUpsertWithoutTournamentsInput {
  update: TournamentGroupUpdateWithoutTournamentsDataInput!
  create: TournamentGroupCreateWithoutTournamentsInput!
}

input TournamentGroupWhereInput {
  """Logical AND on all given filters."""
  AND: [TournamentGroupWhereInput!]

  """Logical OR on all given filters."""
  OR: [TournamentGroupWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TournamentGroupWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  code: ID

  """All values that are not equal to given value."""
  code_not: ID

  """All values that are contained in given list."""
  code_in: [ID!]

  """All values that are not contained in given list."""
  code_not_in: [ID!]

  """All values less than the given value."""
  code_lt: ID

  """All values less than or equal the given value."""
  code_lte: ID

  """All values greater than the given value."""
  code_gt: ID

  """All values greater than or equal the given value."""
  code_gte: ID

  """All values containing the given string."""
  code_contains: ID

  """All values not containing the given string."""
  code_not_contains: ID

  """All values starting with the given string."""
  code_starts_with: ID

  """All values not starting with the given string."""
  code_not_starts_with: ID

  """All values ending with the given string."""
  code_ends_with: ID

  """All values not ending with the given string."""
  code_not_ends_with: ID
  CreatedBy: UserWhereInput
  Tournaments_every: TournamentWhereInput
  Tournaments_some: TournamentWhereInput
  Tournaments_none: TournamentWhereInput
}

input TournamentGroupWhereUniqueInput {
  id: ID
  code: ID
}

enum TournamentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  code_ASC
  code_DESC
}

type TournamentPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  code: ID
}

type TournamentSubscriptionPayload {
  mutation: MutationType!
  node: Tournament
  updatedFields: [String!]
  previousValues: TournamentPreviousValues
}

input TournamentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TournamentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TournamentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TournamentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TournamentWhereInput
}

input TournamentUpdateInput {
  name: String
  code: ID
  CreatedBy: UserUpdateOneInput
  Tourneys: TourneyUpdateManyWithoutTournamentInput
  Group: TournamentGroupUpdateOneWithoutTournamentsInput
}

input TournamentUpdateManyWithoutGroupInput {
  create: [TournamentCreateWithoutGroupInput!]
  connect: [TournamentWhereUniqueInput!]
  disconnect: [TournamentWhereUniqueInput!]
  delete: [TournamentWhereUniqueInput!]
  update: [TournamentUpdateWithWhereUniqueWithoutGroupInput!]
  upsert: [TournamentUpsertWithWhereUniqueWithoutGroupInput!]
}

input TournamentUpdateOneWithoutTourneysInput {
  create: TournamentCreateWithoutTourneysInput
  connect: TournamentWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TournamentUpdateWithoutTourneysDataInput
  upsert: TournamentUpsertWithoutTourneysInput
}

input TournamentUpdateWithoutGroupDataInput {
  name: String
  code: ID
  CreatedBy: UserUpdateOneInput
  Tourneys: TourneyUpdateManyWithoutTournamentInput
}

input TournamentUpdateWithoutTourneysDataInput {
  name: String
  code: ID
  CreatedBy: UserUpdateOneInput
  Group: TournamentGroupUpdateOneWithoutTournamentsInput
}

input TournamentUpdateWithWhereUniqueWithoutGroupInput {
  where: TournamentWhereUniqueInput!
  data: TournamentUpdateWithoutGroupDataInput!
}

input TournamentUpsertWithoutTourneysInput {
  update: TournamentUpdateWithoutTourneysDataInput!
  create: TournamentCreateWithoutTourneysInput!
}

input TournamentUpsertWithWhereUniqueWithoutGroupInput {
  where: TournamentWhereUniqueInput!
  update: TournamentUpdateWithoutGroupDataInput!
  create: TournamentCreateWithoutGroupInput!
}

input TournamentWhereInput {
  """Logical AND on all given filters."""
  AND: [TournamentWhereInput!]

  """Logical OR on all given filters."""
  OR: [TournamentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TournamentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  code: ID

  """All values that are not equal to given value."""
  code_not: ID

  """All values that are contained in given list."""
  code_in: [ID!]

  """All values that are not contained in given list."""
  code_not_in: [ID!]

  """All values less than the given value."""
  code_lt: ID

  """All values less than or equal the given value."""
  code_lte: ID

  """All values greater than the given value."""
  code_gt: ID

  """All values greater than or equal the given value."""
  code_gte: ID

  """All values containing the given string."""
  code_contains: ID

  """All values not containing the given string."""
  code_not_contains: ID

  """All values starting with the given string."""
  code_starts_with: ID

  """All values not starting with the given string."""
  code_not_starts_with: ID

  """All values ending with the given string."""
  code_ends_with: ID

  """All values not ending with the given string."""
  code_not_ends_with: ID
  CreatedBy: UserWhereInput
  Tourneys_every: TourneyWhereInput
  Tourneys_some: TourneyWhereInput
  Tourneys_none: TourneyWhereInput
  Group: TournamentGroupWhereInput
}

input TournamentWhereUniqueInput {
  id: ID
  code: ID
}

type Tourney implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  code: ID
  date: DateTime
  date_till: DateTime
  CreatedBy(where: UserWhereInput): User
  Tournament(where: TournamentWhereInput): Tournament
  Users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  Games(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game!]
}

"""A connection to a list of items."""
type TourneyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TourneyEdge]!
  aggregate: AggregateTourney!
}

input TourneyCreateInput {
  name: String
  code: ID
  date: DateTime
  date_till: DateTime
  CreatedBy: UserCreateOneInput
  Tournament: TournamentCreateOneWithoutTourneysInput
  Users: UserCreateManyInput
  Games: GameCreateManyWithoutTourneyInput
}

input TourneyCreateManyWithoutTournamentInput {
  create: [TourneyCreateWithoutTournamentInput!]
  connect: [TourneyWhereUniqueInput!]
}

input TourneyCreateOneWithoutGamesInput {
  create: TourneyCreateWithoutGamesInput
  connect: TourneyWhereUniqueInput
}

input TourneyCreateWithoutGamesInput {
  name: String
  code: ID
  date: DateTime
  date_till: DateTime
  CreatedBy: UserCreateOneInput
  Tournament: TournamentCreateOneWithoutTourneysInput
  Users: UserCreateManyInput
}

input TourneyCreateWithoutTournamentInput {
  name: String
  code: ID
  date: DateTime
  date_till: DateTime
  CreatedBy: UserCreateOneInput
  Users: UserCreateManyInput
  Games: GameCreateManyWithoutTourneyInput
}

"""An edge in a connection."""
type TourneyEdge {
  """The item at the end of the edge."""
  node: Tourney!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TourneyOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  code_ASC
  code_DESC
  date_ASC
  date_DESC
  date_till_ASC
  date_till_DESC
}

type TourneyPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  code: ID
  date: DateTime
  date_till: DateTime
}

type TourneySubscriptionPayload {
  mutation: MutationType!
  node: Tourney
  updatedFields: [String!]
  previousValues: TourneyPreviousValues
}

input TourneySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TourneySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TourneySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TourneySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TourneyWhereInput
}

input TourneyUpdateInput {
  name: String
  code: ID
  date: DateTime
  date_till: DateTime
  CreatedBy: UserUpdateOneInput
  Tournament: TournamentUpdateOneWithoutTourneysInput
  Users: UserUpdateManyInput
  Games: GameUpdateManyWithoutTourneyInput
}

input TourneyUpdateManyWithoutTournamentInput {
  create: [TourneyCreateWithoutTournamentInput!]
  connect: [TourneyWhereUniqueInput!]
  disconnect: [TourneyWhereUniqueInput!]
  delete: [TourneyWhereUniqueInput!]
  update: [TourneyUpdateWithWhereUniqueWithoutTournamentInput!]
  upsert: [TourneyUpsertWithWhereUniqueWithoutTournamentInput!]
}

input TourneyUpdateOneWithoutGamesInput {
  create: TourneyCreateWithoutGamesInput
  connect: TourneyWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TourneyUpdateWithoutGamesDataInput
  upsert: TourneyUpsertWithoutGamesInput
}

input TourneyUpdateWithoutGamesDataInput {
  name: String
  code: ID
  date: DateTime
  date_till: DateTime
  CreatedBy: UserUpdateOneInput
  Tournament: TournamentUpdateOneWithoutTourneysInput
  Users: UserUpdateManyInput
}

input TourneyUpdateWithoutTournamentDataInput {
  name: String
  code: ID
  date: DateTime
  date_till: DateTime
  CreatedBy: UserUpdateOneInput
  Users: UserUpdateManyInput
  Games: GameUpdateManyWithoutTourneyInput
}

input TourneyUpdateWithWhereUniqueWithoutTournamentInput {
  where: TourneyWhereUniqueInput!
  data: TourneyUpdateWithoutTournamentDataInput!
}

input TourneyUpsertWithoutGamesInput {
  update: TourneyUpdateWithoutGamesDataInput!
  create: TourneyCreateWithoutGamesInput!
}

input TourneyUpsertWithWhereUniqueWithoutTournamentInput {
  where: TourneyWhereUniqueInput!
  update: TourneyUpdateWithoutTournamentDataInput!
  create: TourneyCreateWithoutTournamentInput!
}

input TourneyWhereInput {
  """Logical AND on all given filters."""
  AND: [TourneyWhereInput!]

  """Logical OR on all given filters."""
  OR: [TourneyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TourneyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  code: ID

  """All values that are not equal to given value."""
  code_not: ID

  """All values that are contained in given list."""
  code_in: [ID!]

  """All values that are not contained in given list."""
  code_not_in: [ID!]

  """All values less than the given value."""
  code_lt: ID

  """All values less than or equal the given value."""
  code_lte: ID

  """All values greater than the given value."""
  code_gt: ID

  """All values greater than or equal the given value."""
  code_gte: ID

  """All values containing the given string."""
  code_contains: ID

  """All values not containing the given string."""
  code_not_contains: ID

  """All values starting with the given string."""
  code_starts_with: ID

  """All values not starting with the given string."""
  code_not_starts_with: ID

  """All values ending with the given string."""
  code_ends_with: ID

  """All values not ending with the given string."""
  code_not_ends_with: ID
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  date_till: DateTime

  """All values that are not equal to given value."""
  date_till_not: DateTime

  """All values that are contained in given list."""
  date_till_in: [DateTime!]

  """All values that are not contained in given list."""
  date_till_not_in: [DateTime!]

  """All values less than the given value."""
  date_till_lt: DateTime

  """All values less than or equal the given value."""
  date_till_lte: DateTime

  """All values greater than the given value."""
  date_till_gt: DateTime

  """All values greater than or equal the given value."""
  date_till_gte: DateTime
  CreatedBy: UserWhereInput
  Tournament: TournamentWhereInput
  Users_every: UserWhereInput
  Users_some: UserWhereInput
  Users_none: UserWhereInput
  Games_every: GameWhereInput
  Games_some: GameWhereInput
  Games_none: GameWhereInput
}

input TourneyWhereUniqueInput {
  id: ID
  code: ID
}

type Transaction implements Node {
  id: ID!
  createdAt: DateTime!
  amount: Float!
  Account(where: AccountWhereInput): Account!
  CreatedBy(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type TransactionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TransactionEdge]!
  aggregate: AggregateTransaction!
}

input TransactionCreateInput {
  amount: Float!
  Account: AccountCreateOneWithoutTransactionsInput!
  CreatedBy: UserCreateOneInput!
}

input TransactionCreateManyWithoutAccountInput {
  create: [TransactionCreateWithoutAccountInput!]
  connect: [TransactionWhereUniqueInput!]
}

input TransactionCreateWithoutAccountInput {
  amount: Float!
  CreatedBy: UserCreateOneInput!
}

"""An edge in a connection."""
type TransactionEdge {
  """The item at the end of the edge."""
  node: Transaction!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TransactionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  amount_ASC
  amount_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TransactionPreviousValues {
  id: ID!
  createdAt: DateTime!
  amount: Float!
}

type TransactionSubscriptionPayload {
  mutation: MutationType!
  node: Transaction
  updatedFields: [String!]
  previousValues: TransactionPreviousValues
}

input TransactionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TransactionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TransactionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TransactionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TransactionWhereInput
}

input TransactionUpdateInput {
  amount: Float
  Account: AccountUpdateOneWithoutTransactionsInput
  CreatedBy: UserUpdateOneInput
}

input TransactionUpdateManyWithoutAccountInput {
  create: [TransactionCreateWithoutAccountInput!]
  connect: [TransactionWhereUniqueInput!]
  disconnect: [TransactionWhereUniqueInput!]
  delete: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutAccountInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutAccountInput!]
}

input TransactionUpdateWithoutAccountDataInput {
  amount: Float
  CreatedBy: UserUpdateOneInput
}

input TransactionUpdateWithWhereUniqueWithoutAccountInput {
  where: TransactionWhereUniqueInput!
  data: TransactionUpdateWithoutAccountDataInput!
}

input TransactionUpsertWithWhereUniqueWithoutAccountInput {
  where: TransactionWhereUniqueInput!
  update: TransactionUpdateWithoutAccountDataInput!
  create: TransactionCreateWithoutAccountInput!
}

input TransactionWhereInput {
  """Logical AND on all given filters."""
  AND: [TransactionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TransactionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TransactionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  Account: AccountWhereInput
  CreatedBy: UserWhereInput
}

input TransactionWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  Groups(where: UserGroupWhereInput, orderBy: UserGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserGroup!]
  CreatedUsers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  CreatedBy(where: UserWhereInput): User
  LogedIns(where: LogedInWhereInput, orderBy: LogedInOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LogedIn!]
  Files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  hidden: Boolean
  EthContractSourcesCreated(where: EthContractSourceWhereInput, orderBy: EthContractSourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EthContractSource!]
  EthAccounts(where: EthAccountWhereInput, orderBy: EthAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EthAccount!]
  Resources(where: ResourceWhereInput, orderBy: ResourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Resource!]
  Rooms(where: ChatRoomWhereInput, orderBy: ChatRoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChatRoom!]
  CreatedRooms(where: ChatRoomWhereInput, orderBy: ChatRoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChatRoom!]
  Messages(where: ChatMessageWhereInput, orderBy: ChatMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChatMessage!]
  ReadedMessages(where: ChatMessageReadedWhereInput, orderBy: ChatMessageReadedOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChatMessageReaded!]
  Notices(where: NoticeWhereInput, orderBy: NoticeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notice!]
  Votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  NotificationTypes(where: NotificationTypeWhereInput, orderBy: NotificationTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NotificationType!]
  NotificationTypesCreated(where: NotificationTypeWhereInput, orderBy: NotificationTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NotificationType!]
  Tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  ResourceTags(where: ResourceTagWhereInput, orderBy: ResourceTagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ResourceTag!]
  PrismaProjects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  topics(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  Tarifs(where: UserTarifWhereInput, orderBy: UserTarifOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserTarif!]
  Account(where: AccountWhereInput): Account
  Places(where: PlaceWhereInput, orderBy: PlaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Place!]
  sudo: Boolean
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  PrismaProjects: ProjectCreateManyWithoutPrismaUsersInput
  topics: TopicCreateManyWithoutCreated_byInput
  comments: CommentCreateManyWithoutCreated_byInput
  Tarifs: UserTarifCreateManyWithoutUserInput
  Account: AccountCreateOneWithoutUserInput
  Places: PlaceCreateManyWithoutOwnerInput
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutCreatedByInput {
  create: [UserCreateWithoutCreatedByInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutGroupsInput {
  create: [UserCreateWithoutGroupsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutNotificationTypesInput {
  create: [UserCreateWithoutNotificationTypesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutPrismaProjectsInput {
  create: [UserCreateWithoutPrismaProjectsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutRoomsInput {
  create: [UserCreateWithoutRoomsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutAccountInput {
  create: UserCreateWithoutAccountInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCreatedRoomsInput {
  create: UserCreateWithoutCreatedRoomsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCreatedUsersInput {
  create: UserCreateWithoutCreatedUsersInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutEthAccountsInput {
  create: UserCreateWithoutEthAccountsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutFilesInput {
  create: UserCreateWithoutFilesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLogedInsInput {
  create: UserCreateWithoutLogedInsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMessagesInput {
  create: UserCreateWithoutMessagesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutNoticesInput {
  create: UserCreateWithoutNoticesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutNotificationTypesCreatedInput {
  create: UserCreateWithoutNotificationTypesCreatedInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPlacesInput {
  create: UserCreateWithoutPlacesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReadedMessagesInput {
  create: UserCreateWithoutReadedMessagesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutResourcesInput {
  create: UserCreateWithoutResourcesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutResourceTagsInput {
  create: UserCreateWithoutResourceTagsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTagsInput {
  create: UserCreateWithoutTagsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTarifsInput {
  create: UserCreateWithoutTarifsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTopicsInput {
  create: UserCreateWithoutTopicsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutVotesInput {
  create: UserCreateWithoutVotesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAccountInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  PrismaProjects: ProjectCreateManyWithoutPrismaUsersInput
  topics: TopicCreateManyWithoutCreated_byInput
  comments: CommentCreateManyWithoutCreated_byInput
  Tarifs: UserTarifCreateManyWithoutUserInput
  Places: PlaceCreateManyWithoutOwnerInput
}

input UserCreateWithoutCommentsInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  PrismaProjects: ProjectCreateManyWithoutPrismaUsersInput
  topics: TopicCreateManyWithoutCreated_byInput
  Tarifs: UserTarifCreateManyWithoutUserInput
  Account: AccountCreateOneWithoutUserInput
  Places: PlaceCreateManyWithoutOwnerInput
}

input UserCreateWithoutCreatedByInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  PrismaProjects: ProjectCreateManyWithoutPrismaUsersInput
  topics: TopicCreateManyWithoutCreated_byInput
  comments: CommentCreateManyWithoutCreated_byInput
  Tarifs: UserTarifCreateManyWithoutUserInput
  Account: AccountCreateOneWithoutUserInput
  Places: PlaceCreateManyWithoutOwnerInput
}

input UserCreateWithoutCreatedRoomsInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  PrismaProjects: ProjectCreateManyWithoutPrismaUsersInput
  topics: TopicCreateManyWithoutCreated_byInput
  comments: CommentCreateManyWithoutCreated_byInput
  Tarifs: UserTarifCreateManyWithoutUserInput
  Account: AccountCreateOneWithoutUserInput
  Places: PlaceCreateManyWithoutOwnerInput
}

input UserCreateWithoutCreatedUsersInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  PrismaProjects: ProjectCreateManyWithoutPrismaUsersInput
  topics: TopicCreateManyWithoutCreated_byInput
  comments: CommentCreateManyWithoutCreated_byInput
  Tarifs: UserTarifCreateManyWithoutUserInput
  Account: AccountCreateOneWithoutUserInput
  Places: PlaceCreateManyWithoutOwnerInput
}

input UserCreateWithoutEthAccountsInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  PrismaProjects: ProjectCreateManyWithoutPrismaUsersInput
  topics: TopicCreateManyWithoutCreated_byInput
  comments: CommentCreateManyWithoutCreated_byInput
  Tarifs: UserTarifCreateManyWithoutUserInput
  Account: AccountCreateOneWithoutUserInput
  Places: PlaceCreateManyWithoutOwnerInput
}

input UserCreateWithoutFilesInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  PrismaProjects: ProjectCreateManyWithoutPrismaUsersInput
  topics: TopicCreateManyWithoutCreated_byInput
  comments: CommentCreateManyWithoutCreated_byInput
  Tarifs: UserTarifCreateManyWithoutUserInput
  Account: AccountCreateOneWithoutUserInput
  Places: PlaceCreateManyWithoutOwnerInput
}

input UserCreateWithoutGroupsInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  PrismaProjects: ProjectCreateManyWithoutPrismaUsersInput
  topics: TopicCreateManyWithoutCreated_byInput
  comments: CommentCreateManyWithoutCreated_byInput
  Tarifs: UserTarifCreateManyWithoutUserInput
  Account: AccountCreateOneWithoutUserInput
  Places: PlaceCreateManyWithoutOwnerInput
}

input UserCreateWithoutLogedInsInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  Files: FileCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  PrismaProjects: ProjectCreateManyWithoutPrismaUsersInput
  topics: TopicCreateManyWithoutCreated_byInput
  comments: CommentCreateManyWithoutCreated_byInput
  Tarifs: UserTarifCreateManyWithoutUserInput
  Account: AccountCreateOneWithoutUserInput
  Places: PlaceCreateManyWithoutOwnerInput
}

input UserCreateWithoutMessagesInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  PrismaProjects: ProjectCreateManyWithoutPrismaUsersInput
  topics: TopicCreateManyWithoutCreated_byInput
  comments: CommentCreateManyWithoutCreated_byInput
  Tarifs: UserTarifCreateManyWithoutUserInput
  Account: AccountCreateOneWithoutUserInput
  Places: PlaceCreateManyWithoutOwnerInput
}

input UserCreateWithoutNoticesInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  PrismaProjects: ProjectCreateManyWithoutPrismaUsersInput
  topics: TopicCreateManyWithoutCreated_byInput
  comments: CommentCreateManyWithoutCreated_byInput
  Tarifs: UserTarifCreateManyWithoutUserInput
  Account: AccountCreateOneWithoutUserInput
  Places: PlaceCreateManyWithoutOwnerInput
}

input UserCreateWithoutNotificationTypesCreatedInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  PrismaProjects: ProjectCreateManyWithoutPrismaUsersInput
  topics: TopicCreateManyWithoutCreated_byInput
  comments: CommentCreateManyWithoutCreated_byInput
  Tarifs: UserTarifCreateManyWithoutUserInput
  Account: AccountCreateOneWithoutUserInput
  Places: PlaceCreateManyWithoutOwnerInput
}

input UserCreateWithoutNotificationTypesInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  PrismaProjects: ProjectCreateManyWithoutPrismaUsersInput
  topics: TopicCreateManyWithoutCreated_byInput
  comments: CommentCreateManyWithoutCreated_byInput
  Tarifs: UserTarifCreateManyWithoutUserInput
  Account: AccountCreateOneWithoutUserInput
  Places: PlaceCreateManyWithoutOwnerInput
}

input UserCreateWithoutPlacesInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  PrismaProjects: ProjectCreateManyWithoutPrismaUsersInput
  topics: TopicCreateManyWithoutCreated_byInput
  comments: CommentCreateManyWithoutCreated_byInput
  Tarifs: UserTarifCreateManyWithoutUserInput
  Account: AccountCreateOneWithoutUserInput
}

input UserCreateWithoutPrismaProjectsInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  topics: TopicCreateManyWithoutCreated_byInput
  comments: CommentCreateManyWithoutCreated_byInput
  Tarifs: UserTarifCreateManyWithoutUserInput
  Account: AccountCreateOneWithoutUserInput
  Places: PlaceCreateManyWithoutOwnerInput
}

input UserCreateWithoutReadedMessagesInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  PrismaProjects: ProjectCreateManyWithoutPrismaUsersInput
  topics: TopicCreateManyWithoutCreated_byInput
  comments: CommentCreateManyWithoutCreated_byInput
  Tarifs: UserTarifCreateManyWithoutUserInput
  Account: AccountCreateOneWithoutUserInput
  Places: PlaceCreateManyWithoutOwnerInput
}

input UserCreateWithoutResourcesInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  PrismaProjects: ProjectCreateManyWithoutPrismaUsersInput
  topics: TopicCreateManyWithoutCreated_byInput
  comments: CommentCreateManyWithoutCreated_byInput
  Tarifs: UserTarifCreateManyWithoutUserInput
  Account: AccountCreateOneWithoutUserInput
  Places: PlaceCreateManyWithoutOwnerInput
}

input UserCreateWithoutResourceTagsInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  PrismaProjects: ProjectCreateManyWithoutPrismaUsersInput
  topics: TopicCreateManyWithoutCreated_byInput
  comments: CommentCreateManyWithoutCreated_byInput
  Tarifs: UserTarifCreateManyWithoutUserInput
  Account: AccountCreateOneWithoutUserInput
  Places: PlaceCreateManyWithoutOwnerInput
}

input UserCreateWithoutRoomsInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  PrismaProjects: ProjectCreateManyWithoutPrismaUsersInput
  topics: TopicCreateManyWithoutCreated_byInput
  comments: CommentCreateManyWithoutCreated_byInput
  Tarifs: UserTarifCreateManyWithoutUserInput
  Account: AccountCreateOneWithoutUserInput
  Places: PlaceCreateManyWithoutOwnerInput
}

input UserCreateWithoutTagsInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  PrismaProjects: ProjectCreateManyWithoutPrismaUsersInput
  topics: TopicCreateManyWithoutCreated_byInput
  comments: CommentCreateManyWithoutCreated_byInput
  Tarifs: UserTarifCreateManyWithoutUserInput
  Account: AccountCreateOneWithoutUserInput
  Places: PlaceCreateManyWithoutOwnerInput
}

input UserCreateWithoutTarifsInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  PrismaProjects: ProjectCreateManyWithoutPrismaUsersInput
  topics: TopicCreateManyWithoutCreated_byInput
  comments: CommentCreateManyWithoutCreated_byInput
  Account: AccountCreateOneWithoutUserInput
  Places: PlaceCreateManyWithoutOwnerInput
}

input UserCreateWithoutTopicsInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  PrismaProjects: ProjectCreateManyWithoutPrismaUsersInput
  comments: CommentCreateManyWithoutCreated_byInput
  Tarifs: UserTarifCreateManyWithoutUserInput
  Account: AccountCreateOneWithoutUserInput
  Places: PlaceCreateManyWithoutOwnerInput
}

input UserCreateWithoutVotesInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  PrismaProjects: ProjectCreateManyWithoutPrismaUsersInput
  topics: TopicCreateManyWithoutCreated_byInput
  comments: CommentCreateManyWithoutCreated_byInput
  Tarifs: UserTarifCreateManyWithoutUserInput
  Account: AccountCreateOneWithoutUserInput
  Places: PlaceCreateManyWithoutOwnerInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

type UserGroup implements Node {
  id: ID!
  name: String!
  Users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type UserGroupConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserGroupEdge]!
  aggregate: AggregateUserGroup!
}

input UserGroupCreateInput {
  name: String!
  Users: UserCreateManyWithoutGroupsInput
}

input UserGroupCreateManyWithoutUsersInput {
  create: [UserGroupCreateWithoutUsersInput!]
  connect: [UserGroupWhereUniqueInput!]
}

input UserGroupCreateWithoutUsersInput {
  name: String!
}

"""An edge in a connection."""
type UserGroupEdge {
  """The item at the end of the edge."""
  node: UserGroup!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserGroupOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserGroupPreviousValues {
  id: ID!
  name: String!
}

type UserGroupSubscriptionPayload {
  mutation: MutationType!
  node: UserGroup
  updatedFields: [String!]
  previousValues: UserGroupPreviousValues
}

input UserGroupSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserGroupSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserGroupSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserGroupSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserGroupWhereInput
}

input UserGroupUpdateInput {
  name: String
  Users: UserUpdateManyWithoutGroupsInput
}

input UserGroupUpdateManyWithoutUsersInput {
  create: [UserGroupCreateWithoutUsersInput!]
  connect: [UserGroupWhereUniqueInput!]
  disconnect: [UserGroupWhereUniqueInput!]
  delete: [UserGroupWhereUniqueInput!]
  update: [UserGroupUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [UserGroupUpsertWithWhereUniqueWithoutUsersInput!]
}

input UserGroupUpdateWithoutUsersDataInput {
  name: String
}

input UserGroupUpdateWithWhereUniqueWithoutUsersInput {
  where: UserGroupWhereUniqueInput!
  data: UserGroupUpdateWithoutUsersDataInput!
}

input UserGroupUpsertWithWhereUniqueWithoutUsersInput {
  where: UserGroupWhereUniqueInput!
  update: UserGroupUpdateWithoutUsersDataInput!
  create: UserGroupCreateWithoutUsersInput!
}

input UserGroupWhereInput {
  """Logical AND on all given filters."""
  AND: [UserGroupWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserGroupWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserGroupWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  Users_every: UserWhereInput
  Users_some: UserWhereInput
  Users_none: UserWhereInput
}

input UserGroupWhereUniqueInput {
  id: ID
  name: String
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  phone_ASC
  phone_DESC
  showEmail_ASC
  showEmail_DESC
  showPhone_ASC
  showPhone_DESC
  password_ASC
  password_DESC
  fullname_ASC
  fullname_DESC
  image_ASC
  image_DESC
  address_ASC
  address_DESC
  active_ASC
  active_DESC
  activated_ASC
  activated_DESC
  deleted_ASC
  deleted_DESC
  hidden_ASC
  hidden_DESC
  user_id_ASC
  user_id_DESC
  first_name_ASC
  first_name_DESC
  middle_name_ASC
  middle_name_DESC
  last_name_ASC
  last_name_DESC
  gender_ASC
  gender_DESC
  birth_date_ASC
  birth_date_DESC
  country_id_ASC
  country_id_DESC
  region_id_ASC
  region_id_DESC
  city_id_ASC
  city_id_DESC
  status_ASC
  status_DESC
  timezone_ASC
  timezone_DESC
  language_id_ASC
  language_id_DESC
  num_blog_posts_ASC
  num_blog_posts_DESC
  last_ASC
  last_DESC
  created_at_ASC
  created_at_DESC
  notification_ASC
  notification_DESC
  icq_ASC
  icq_DESC
  www_ASC
  www_DESC
  contact_email_ASC
  contact_email_DESC
  mobile_phone_ASC
  mobile_phone_DESC
  home_phone_ASC
  home_phone_DESC
  about_ASC
  about_DESC
  experience_ASC
  experience_DESC
  job_title_ASC
  job_title_DESC
  work_place_ASC
  work_place_DESC
  ip_ASC
  ip_DESC
  confirmation_code_ASC
  confirmation_code_DESC
  rating_ASC
  rating_DESC
  etherwallet_ASC
  etherwallet_DESC
  photo_ASC
  photo_DESC
  sudo_ASC
  sudo_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

type UserTarif implements Node {
  id: ID!
  User(where: UserWhereInput): User!
  Tarif(where: TarifWhereInput): Tarif!
  createdAt: DateTime!
  dateTill: DateTime
}

"""A connection to a list of items."""
type UserTarifConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserTarifEdge]!
  aggregate: AggregateUserTarif!
}

input UserTarifCreateInput {
  dateTill: DateTime
  User: UserCreateOneWithoutTarifsInput!
  Tarif: TarifCreateOneWithoutUserTarifsInput!
}

input UserTarifCreateManyWithoutTarifInput {
  create: [UserTarifCreateWithoutTarifInput!]
  connect: [UserTarifWhereUniqueInput!]
}

input UserTarifCreateManyWithoutUserInput {
  create: [UserTarifCreateWithoutUserInput!]
  connect: [UserTarifWhereUniqueInput!]
}

input UserTarifCreateWithoutTarifInput {
  dateTill: DateTime
  User: UserCreateOneWithoutTarifsInput!
}

input UserTarifCreateWithoutUserInput {
  dateTill: DateTime
  Tarif: TarifCreateOneWithoutUserTarifsInput!
}

"""An edge in a connection."""
type UserTarifEdge {
  """The item at the end of the edge."""
  node: UserTarif!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserTarifOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  dateTill_ASC
  dateTill_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserTarifPreviousValues {
  id: ID!
  createdAt: DateTime!
  dateTill: DateTime
}

type UserTarifSubscriptionPayload {
  mutation: MutationType!
  node: UserTarif
  updatedFields: [String!]
  previousValues: UserTarifPreviousValues
}

input UserTarifSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserTarifSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserTarifSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserTarifSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserTarifWhereInput
}

input UserTarifUpdateInput {
  dateTill: DateTime
  User: UserUpdateOneWithoutTarifsInput
  Tarif: TarifUpdateOneWithoutUserTarifsInput
}

input UserTarifUpdateManyWithoutTarifInput {
  create: [UserTarifCreateWithoutTarifInput!]
  connect: [UserTarifWhereUniqueInput!]
  disconnect: [UserTarifWhereUniqueInput!]
  delete: [UserTarifWhereUniqueInput!]
  update: [UserTarifUpdateWithWhereUniqueWithoutTarifInput!]
  upsert: [UserTarifUpsertWithWhereUniqueWithoutTarifInput!]
}

input UserTarifUpdateManyWithoutUserInput {
  create: [UserTarifCreateWithoutUserInput!]
  connect: [UserTarifWhereUniqueInput!]
  disconnect: [UserTarifWhereUniqueInput!]
  delete: [UserTarifWhereUniqueInput!]
  update: [UserTarifUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [UserTarifUpsertWithWhereUniqueWithoutUserInput!]
}

input UserTarifUpdateWithoutTarifDataInput {
  dateTill: DateTime
  User: UserUpdateOneWithoutTarifsInput
}

input UserTarifUpdateWithoutUserDataInput {
  dateTill: DateTime
  Tarif: TarifUpdateOneWithoutUserTarifsInput
}

input UserTarifUpdateWithWhereUniqueWithoutTarifInput {
  where: UserTarifWhereUniqueInput!
  data: UserTarifUpdateWithoutTarifDataInput!
}

input UserTarifUpdateWithWhereUniqueWithoutUserInput {
  where: UserTarifWhereUniqueInput!
  data: UserTarifUpdateWithoutUserDataInput!
}

input UserTarifUpsertWithWhereUniqueWithoutTarifInput {
  where: UserTarifWhereUniqueInput!
  update: UserTarifUpdateWithoutTarifDataInput!
  create: UserTarifCreateWithoutTarifInput!
}

input UserTarifUpsertWithWhereUniqueWithoutUserInput {
  where: UserTarifWhereUniqueInput!
  update: UserTarifUpdateWithoutUserDataInput!
  create: UserTarifCreateWithoutUserInput!
}

input UserTarifWhereInput {
  """Logical AND on all given filters."""
  AND: [UserTarifWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserTarifWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserTarifWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  dateTill: DateTime

  """All values that are not equal to given value."""
  dateTill_not: DateTime

  """All values that are contained in given list."""
  dateTill_in: [DateTime!]

  """All values that are not contained in given list."""
  dateTill_not_in: [DateTime!]

  """All values less than the given value."""
  dateTill_lt: DateTime

  """All values less than or equal the given value."""
  dateTill_lte: DateTime

  """All values greater than the given value."""
  dateTill_gt: DateTime

  """All values greater than or equal the given value."""
  dateTill_gte: DateTime
  User: UserWhereInput
  Tarif: TarifWhereInput
}

input UserTarifWhereUniqueInput {
  id: ID
}

input UserUpdateDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  PrismaProjects: ProjectUpdateManyWithoutPrismaUsersInput
  topics: TopicUpdateManyWithoutCreated_byInput
  comments: CommentUpdateManyWithoutCreated_byInput
  Tarifs: UserTarifUpdateManyWithoutUserInput
  Account: AccountUpdateOneWithoutUserInput
  Places: PlaceUpdateManyWithoutOwnerInput
}

input UserUpdateInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  PrismaProjects: ProjectUpdateManyWithoutPrismaUsersInput
  topics: TopicUpdateManyWithoutCreated_byInput
  comments: CommentUpdateManyWithoutCreated_byInput
  Tarifs: UserTarifUpdateManyWithoutUserInput
  Account: AccountUpdateOneWithoutUserInput
  Places: PlaceUpdateManyWithoutOwnerInput
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
}

input UserUpdateManyWithoutCreatedByInput {
  create: [UserCreateWithoutCreatedByInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input UserUpdateManyWithoutGroupsInput {
  create: [UserCreateWithoutGroupsInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutGroupsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutGroupsInput!]
}

input UserUpdateManyWithoutNotificationTypesInput {
  create: [UserCreateWithoutNotificationTypesInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutNotificationTypesInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutNotificationTypesInput!]
}

input UserUpdateManyWithoutPrismaProjectsInput {
  create: [UserCreateWithoutPrismaProjectsInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutPrismaProjectsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutPrismaProjectsInput!]
}

input UserUpdateManyWithoutRoomsInput {
  create: [UserCreateWithoutRoomsInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutRoomsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutRoomsInput!]
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneWithoutAccountInput {
  create: UserCreateWithoutAccountInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutAccountDataInput
  upsert: UserUpsertWithoutAccountInput
}

input UserUpdateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneWithoutCreatedRoomsInput {
  create: UserCreateWithoutCreatedRoomsInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutCreatedRoomsDataInput
  upsert: UserUpsertWithoutCreatedRoomsInput
}

input UserUpdateOneWithoutCreatedUsersInput {
  create: UserCreateWithoutCreatedUsersInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutCreatedUsersDataInput
  upsert: UserUpsertWithoutCreatedUsersInput
}

input UserUpdateOneWithoutEthAccountsInput {
  create: UserCreateWithoutEthAccountsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutEthAccountsDataInput
  upsert: UserUpsertWithoutEthAccountsInput
}

input UserUpdateOneWithoutFilesInput {
  create: UserCreateWithoutFilesInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutFilesDataInput
  upsert: UserUpsertWithoutFilesInput
}

input UserUpdateOneWithoutLogedInsInput {
  create: UserCreateWithoutLogedInsInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutLogedInsDataInput
  upsert: UserUpsertWithoutLogedInsInput
}

input UserUpdateOneWithoutMessagesInput {
  create: UserCreateWithoutMessagesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutMessagesDataInput
  upsert: UserUpsertWithoutMessagesInput
}

input UserUpdateOneWithoutNoticesInput {
  create: UserCreateWithoutNoticesInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutNoticesDataInput
  upsert: UserUpsertWithoutNoticesInput
}

input UserUpdateOneWithoutNotificationTypesCreatedInput {
  create: UserCreateWithoutNotificationTypesCreatedInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutNotificationTypesCreatedDataInput
  upsert: UserUpsertWithoutNotificationTypesCreatedInput
}

input UserUpdateOneWithoutPlacesInput {
  create: UserCreateWithoutPlacesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutPlacesDataInput
  upsert: UserUpsertWithoutPlacesInput
}

input UserUpdateOneWithoutReadedMessagesInput {
  create: UserCreateWithoutReadedMessagesInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutReadedMessagesDataInput
  upsert: UserUpsertWithoutReadedMessagesInput
}

input UserUpdateOneWithoutResourcesInput {
  create: UserCreateWithoutResourcesInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutResourcesDataInput
  upsert: UserUpsertWithoutResourcesInput
}

input UserUpdateOneWithoutResourceTagsInput {
  create: UserCreateWithoutResourceTagsInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutResourceTagsDataInput
  upsert: UserUpsertWithoutResourceTagsInput
}

input UserUpdateOneWithoutTagsInput {
  create: UserCreateWithoutTagsInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutTagsDataInput
  upsert: UserUpsertWithoutTagsInput
}

input UserUpdateOneWithoutTarifsInput {
  create: UserCreateWithoutTarifsInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutTarifsDataInput
  upsert: UserUpsertWithoutTarifsInput
}

input UserUpdateOneWithoutTopicsInput {
  create: UserCreateWithoutTopicsInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutTopicsDataInput
  upsert: UserUpsertWithoutTopicsInput
}

input UserUpdateOneWithoutVotesInput {
  create: UserCreateWithoutVotesInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutVotesDataInput
  upsert: UserUpsertWithoutVotesInput
}

input UserUpdateWithoutAccountDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  PrismaProjects: ProjectUpdateManyWithoutPrismaUsersInput
  topics: TopicUpdateManyWithoutCreated_byInput
  comments: CommentUpdateManyWithoutCreated_byInput
  Tarifs: UserTarifUpdateManyWithoutUserInput
  Places: PlaceUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutCommentsDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  PrismaProjects: ProjectUpdateManyWithoutPrismaUsersInput
  topics: TopicUpdateManyWithoutCreated_byInput
  Tarifs: UserTarifUpdateManyWithoutUserInput
  Account: AccountUpdateOneWithoutUserInput
  Places: PlaceUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutCreatedByDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  PrismaProjects: ProjectUpdateManyWithoutPrismaUsersInput
  topics: TopicUpdateManyWithoutCreated_byInput
  comments: CommentUpdateManyWithoutCreated_byInput
  Tarifs: UserTarifUpdateManyWithoutUserInput
  Account: AccountUpdateOneWithoutUserInput
  Places: PlaceUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutCreatedRoomsDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  PrismaProjects: ProjectUpdateManyWithoutPrismaUsersInput
  topics: TopicUpdateManyWithoutCreated_byInput
  comments: CommentUpdateManyWithoutCreated_byInput
  Tarifs: UserTarifUpdateManyWithoutUserInput
  Account: AccountUpdateOneWithoutUserInput
  Places: PlaceUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutCreatedUsersDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  PrismaProjects: ProjectUpdateManyWithoutPrismaUsersInput
  topics: TopicUpdateManyWithoutCreated_byInput
  comments: CommentUpdateManyWithoutCreated_byInput
  Tarifs: UserTarifUpdateManyWithoutUserInput
  Account: AccountUpdateOneWithoutUserInput
  Places: PlaceUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutEthAccountsDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  PrismaProjects: ProjectUpdateManyWithoutPrismaUsersInput
  topics: TopicUpdateManyWithoutCreated_byInput
  comments: CommentUpdateManyWithoutCreated_byInput
  Tarifs: UserTarifUpdateManyWithoutUserInput
  Account: AccountUpdateOneWithoutUserInput
  Places: PlaceUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutFilesDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  PrismaProjects: ProjectUpdateManyWithoutPrismaUsersInput
  topics: TopicUpdateManyWithoutCreated_byInput
  comments: CommentUpdateManyWithoutCreated_byInput
  Tarifs: UserTarifUpdateManyWithoutUserInput
  Account: AccountUpdateOneWithoutUserInput
  Places: PlaceUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutGroupsDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  PrismaProjects: ProjectUpdateManyWithoutPrismaUsersInput
  topics: TopicUpdateManyWithoutCreated_byInput
  comments: CommentUpdateManyWithoutCreated_byInput
  Tarifs: UserTarifUpdateManyWithoutUserInput
  Account: AccountUpdateOneWithoutUserInput
  Places: PlaceUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutLogedInsDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  Files: FileUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  PrismaProjects: ProjectUpdateManyWithoutPrismaUsersInput
  topics: TopicUpdateManyWithoutCreated_byInput
  comments: CommentUpdateManyWithoutCreated_byInput
  Tarifs: UserTarifUpdateManyWithoutUserInput
  Account: AccountUpdateOneWithoutUserInput
  Places: PlaceUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutMessagesDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  PrismaProjects: ProjectUpdateManyWithoutPrismaUsersInput
  topics: TopicUpdateManyWithoutCreated_byInput
  comments: CommentUpdateManyWithoutCreated_byInput
  Tarifs: UserTarifUpdateManyWithoutUserInput
  Account: AccountUpdateOneWithoutUserInput
  Places: PlaceUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutNoticesDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  PrismaProjects: ProjectUpdateManyWithoutPrismaUsersInput
  topics: TopicUpdateManyWithoutCreated_byInput
  comments: CommentUpdateManyWithoutCreated_byInput
  Tarifs: UserTarifUpdateManyWithoutUserInput
  Account: AccountUpdateOneWithoutUserInput
  Places: PlaceUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutNotificationTypesCreatedDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  PrismaProjects: ProjectUpdateManyWithoutPrismaUsersInput
  topics: TopicUpdateManyWithoutCreated_byInput
  comments: CommentUpdateManyWithoutCreated_byInput
  Tarifs: UserTarifUpdateManyWithoutUserInput
  Account: AccountUpdateOneWithoutUserInput
  Places: PlaceUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutNotificationTypesDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  PrismaProjects: ProjectUpdateManyWithoutPrismaUsersInput
  topics: TopicUpdateManyWithoutCreated_byInput
  comments: CommentUpdateManyWithoutCreated_byInput
  Tarifs: UserTarifUpdateManyWithoutUserInput
  Account: AccountUpdateOneWithoutUserInput
  Places: PlaceUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutPlacesDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  PrismaProjects: ProjectUpdateManyWithoutPrismaUsersInput
  topics: TopicUpdateManyWithoutCreated_byInput
  comments: CommentUpdateManyWithoutCreated_byInput
  Tarifs: UserTarifUpdateManyWithoutUserInput
  Account: AccountUpdateOneWithoutUserInput
}

input UserUpdateWithoutPrismaProjectsDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  topics: TopicUpdateManyWithoutCreated_byInput
  comments: CommentUpdateManyWithoutCreated_byInput
  Tarifs: UserTarifUpdateManyWithoutUserInput
  Account: AccountUpdateOneWithoutUserInput
  Places: PlaceUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutReadedMessagesDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  PrismaProjects: ProjectUpdateManyWithoutPrismaUsersInput
  topics: TopicUpdateManyWithoutCreated_byInput
  comments: CommentUpdateManyWithoutCreated_byInput
  Tarifs: UserTarifUpdateManyWithoutUserInput
  Account: AccountUpdateOneWithoutUserInput
  Places: PlaceUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutResourcesDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  PrismaProjects: ProjectUpdateManyWithoutPrismaUsersInput
  topics: TopicUpdateManyWithoutCreated_byInput
  comments: CommentUpdateManyWithoutCreated_byInput
  Tarifs: UserTarifUpdateManyWithoutUserInput
  Account: AccountUpdateOneWithoutUserInput
  Places: PlaceUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutResourceTagsDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  PrismaProjects: ProjectUpdateManyWithoutPrismaUsersInput
  topics: TopicUpdateManyWithoutCreated_byInput
  comments: CommentUpdateManyWithoutCreated_byInput
  Tarifs: UserTarifUpdateManyWithoutUserInput
  Account: AccountUpdateOneWithoutUserInput
  Places: PlaceUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutRoomsDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  PrismaProjects: ProjectUpdateManyWithoutPrismaUsersInput
  topics: TopicUpdateManyWithoutCreated_byInput
  comments: CommentUpdateManyWithoutCreated_byInput
  Tarifs: UserTarifUpdateManyWithoutUserInput
  Account: AccountUpdateOneWithoutUserInput
  Places: PlaceUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutTagsDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  PrismaProjects: ProjectUpdateManyWithoutPrismaUsersInput
  topics: TopicUpdateManyWithoutCreated_byInput
  comments: CommentUpdateManyWithoutCreated_byInput
  Tarifs: UserTarifUpdateManyWithoutUserInput
  Account: AccountUpdateOneWithoutUserInput
  Places: PlaceUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutTarifsDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  PrismaProjects: ProjectUpdateManyWithoutPrismaUsersInput
  topics: TopicUpdateManyWithoutCreated_byInput
  comments: CommentUpdateManyWithoutCreated_byInput
  Account: AccountUpdateOneWithoutUserInput
  Places: PlaceUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutTopicsDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  PrismaProjects: ProjectUpdateManyWithoutPrismaUsersInput
  comments: CommentUpdateManyWithoutCreated_byInput
  Tarifs: UserTarifUpdateManyWithoutUserInput
  Account: AccountUpdateOneWithoutUserInput
  Places: PlaceUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutVotesDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  user_id: Int
  first_name: String
  middle_name: String
  last_name: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  PrismaProjects: ProjectUpdateManyWithoutPrismaUsersInput
  topics: TopicUpdateManyWithoutCreated_byInput
  comments: CommentUpdateManyWithoutCreated_byInput
  Tarifs: UserTarifUpdateManyWithoutUserInput
  Account: AccountUpdateOneWithoutUserInput
  Places: PlaceUpdateManyWithoutOwnerInput
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpdateWithWhereUniqueWithoutCreatedByInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutCreatedByDataInput!
}

input UserUpdateWithWhereUniqueWithoutGroupsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutGroupsDataInput!
}

input UserUpdateWithWhereUniqueWithoutNotificationTypesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutNotificationTypesDataInput!
}

input UserUpdateWithWhereUniqueWithoutPrismaProjectsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutPrismaProjectsDataInput!
}

input UserUpdateWithWhereUniqueWithoutRoomsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutRoomsDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutAccountInput {
  update: UserUpdateWithoutAccountDataInput!
  create: UserCreateWithoutAccountInput!
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutCreatedRoomsInput {
  update: UserUpdateWithoutCreatedRoomsDataInput!
  create: UserCreateWithoutCreatedRoomsInput!
}

input UserUpsertWithoutCreatedUsersInput {
  update: UserUpdateWithoutCreatedUsersDataInput!
  create: UserCreateWithoutCreatedUsersInput!
}

input UserUpsertWithoutEthAccountsInput {
  update: UserUpdateWithoutEthAccountsDataInput!
  create: UserCreateWithoutEthAccountsInput!
}

input UserUpsertWithoutFilesInput {
  update: UserUpdateWithoutFilesDataInput!
  create: UserCreateWithoutFilesInput!
}

input UserUpsertWithoutLogedInsInput {
  update: UserUpdateWithoutLogedInsDataInput!
  create: UserCreateWithoutLogedInsInput!
}

input UserUpsertWithoutMessagesInput {
  update: UserUpdateWithoutMessagesDataInput!
  create: UserCreateWithoutMessagesInput!
}

input UserUpsertWithoutNoticesInput {
  update: UserUpdateWithoutNoticesDataInput!
  create: UserCreateWithoutNoticesInput!
}

input UserUpsertWithoutNotificationTypesCreatedInput {
  update: UserUpdateWithoutNotificationTypesCreatedDataInput!
  create: UserCreateWithoutNotificationTypesCreatedInput!
}

input UserUpsertWithoutPlacesInput {
  update: UserUpdateWithoutPlacesDataInput!
  create: UserCreateWithoutPlacesInput!
}

input UserUpsertWithoutReadedMessagesInput {
  update: UserUpdateWithoutReadedMessagesDataInput!
  create: UserCreateWithoutReadedMessagesInput!
}

input UserUpsertWithoutResourcesInput {
  update: UserUpdateWithoutResourcesDataInput!
  create: UserCreateWithoutResourcesInput!
}

input UserUpsertWithoutResourceTagsInput {
  update: UserUpdateWithoutResourceTagsDataInput!
  create: UserCreateWithoutResourceTagsInput!
}

input UserUpsertWithoutTagsInput {
  update: UserUpdateWithoutTagsDataInput!
  create: UserCreateWithoutTagsInput!
}

input UserUpsertWithoutTarifsInput {
  update: UserUpdateWithoutTarifsDataInput!
  create: UserCreateWithoutTarifsInput!
}

input UserUpsertWithoutTopicsInput {
  update: UserUpdateWithoutTopicsDataInput!
  create: UserCreateWithoutTopicsInput!
}

input UserUpsertWithoutVotesInput {
  update: UserUpdateWithoutVotesDataInput!
  create: UserCreateWithoutVotesInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueWithoutCreatedByInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutCreatedByDataInput!
  create: UserCreateWithoutCreatedByInput!
}

input UserUpsertWithWhereUniqueWithoutGroupsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutGroupsDataInput!
  create: UserCreateWithoutGroupsInput!
}

input UserUpsertWithWhereUniqueWithoutNotificationTypesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutNotificationTypesDataInput!
  create: UserCreateWithoutNotificationTypesInput!
}

input UserUpsertWithWhereUniqueWithoutPrismaProjectsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutPrismaProjectsDataInput!
  create: UserCreateWithoutPrismaProjectsInput!
}

input UserUpsertWithWhereUniqueWithoutRoomsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutRoomsDataInput!
  create: UserCreateWithoutRoomsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  showEmail: Boolean

  """All values that are not equal to given value."""
  showEmail_not: Boolean
  showPhone: Boolean

  """All values that are not equal to given value."""
  showPhone_not: Boolean
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  fullname: String

  """All values that are not equal to given value."""
  fullname_not: String

  """All values that are contained in given list."""
  fullname_in: [String!]

  """All values that are not contained in given list."""
  fullname_not_in: [String!]

  """All values less than the given value."""
  fullname_lt: String

  """All values less than or equal the given value."""
  fullname_lte: String

  """All values greater than the given value."""
  fullname_gt: String

  """All values greater than or equal the given value."""
  fullname_gte: String

  """All values containing the given string."""
  fullname_contains: String

  """All values not containing the given string."""
  fullname_not_contains: String

  """All values starting with the given string."""
  fullname_starts_with: String

  """All values not starting with the given string."""
  fullname_not_starts_with: String

  """All values ending with the given string."""
  fullname_ends_with: String

  """All values not ending with the given string."""
  fullname_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  activated: Boolean

  """All values that are not equal to given value."""
  activated_not: Boolean
  deleted: Boolean

  """All values that are not equal to given value."""
  deleted_not: Boolean
  hidden: Boolean

  """All values that are not equal to given value."""
  hidden_not: Boolean
  user_id: Int

  """All values that are not equal to given value."""
  user_id_not: Int

  """All values that are contained in given list."""
  user_id_in: [Int!]

  """All values that are not contained in given list."""
  user_id_not_in: [Int!]

  """All values less than the given value."""
  user_id_lt: Int

  """All values less than or equal the given value."""
  user_id_lte: Int

  """All values greater than the given value."""
  user_id_gt: Int

  """All values greater than or equal the given value."""
  user_id_gte: Int
  first_name: String

  """All values that are not equal to given value."""
  first_name_not: String

  """All values that are contained in given list."""
  first_name_in: [String!]

  """All values that are not contained in given list."""
  first_name_not_in: [String!]

  """All values less than the given value."""
  first_name_lt: String

  """All values less than or equal the given value."""
  first_name_lte: String

  """All values greater than the given value."""
  first_name_gt: String

  """All values greater than or equal the given value."""
  first_name_gte: String

  """All values containing the given string."""
  first_name_contains: String

  """All values not containing the given string."""
  first_name_not_contains: String

  """All values starting with the given string."""
  first_name_starts_with: String

  """All values not starting with the given string."""
  first_name_not_starts_with: String

  """All values ending with the given string."""
  first_name_ends_with: String

  """All values not ending with the given string."""
  first_name_not_ends_with: String
  middle_name: String

  """All values that are not equal to given value."""
  middle_name_not: String

  """All values that are contained in given list."""
  middle_name_in: [String!]

  """All values that are not contained in given list."""
  middle_name_not_in: [String!]

  """All values less than the given value."""
  middle_name_lt: String

  """All values less than or equal the given value."""
  middle_name_lte: String

  """All values greater than the given value."""
  middle_name_gt: String

  """All values greater than or equal the given value."""
  middle_name_gte: String

  """All values containing the given string."""
  middle_name_contains: String

  """All values not containing the given string."""
  middle_name_not_contains: String

  """All values starting with the given string."""
  middle_name_starts_with: String

  """All values not starting with the given string."""
  middle_name_not_starts_with: String

  """All values ending with the given string."""
  middle_name_ends_with: String

  """All values not ending with the given string."""
  middle_name_not_ends_with: String
  last_name: String

  """All values that are not equal to given value."""
  last_name_not: String

  """All values that are contained in given list."""
  last_name_in: [String!]

  """All values that are not contained in given list."""
  last_name_not_in: [String!]

  """All values less than the given value."""
  last_name_lt: String

  """All values less than or equal the given value."""
  last_name_lte: String

  """All values greater than the given value."""
  last_name_gt: String

  """All values greater than or equal the given value."""
  last_name_gte: String

  """All values containing the given string."""
  last_name_contains: String

  """All values not containing the given string."""
  last_name_not_contains: String

  """All values starting with the given string."""
  last_name_starts_with: String

  """All values not starting with the given string."""
  last_name_not_starts_with: String

  """All values ending with the given string."""
  last_name_ends_with: String

  """All values not ending with the given string."""
  last_name_not_ends_with: String
  gender: Int

  """All values that are not equal to given value."""
  gender_not: Int

  """All values that are contained in given list."""
  gender_in: [Int!]

  """All values that are not contained in given list."""
  gender_not_in: [Int!]

  """All values less than the given value."""
  gender_lt: Int

  """All values less than or equal the given value."""
  gender_lte: Int

  """All values greater than the given value."""
  gender_gt: Int

  """All values greater than or equal the given value."""
  gender_gte: Int
  birth_date: DateTime

  """All values that are not equal to given value."""
  birth_date_not: DateTime

  """All values that are contained in given list."""
  birth_date_in: [DateTime!]

  """All values that are not contained in given list."""
  birth_date_not_in: [DateTime!]

  """All values less than the given value."""
  birth_date_lt: DateTime

  """All values less than or equal the given value."""
  birth_date_lte: DateTime

  """All values greater than the given value."""
  birth_date_gt: DateTime

  """All values greater than or equal the given value."""
  birth_date_gte: DateTime
  country_id: Int

  """All values that are not equal to given value."""
  country_id_not: Int

  """All values that are contained in given list."""
  country_id_in: [Int!]

  """All values that are not contained in given list."""
  country_id_not_in: [Int!]

  """All values less than the given value."""
  country_id_lt: Int

  """All values less than or equal the given value."""
  country_id_lte: Int

  """All values greater than the given value."""
  country_id_gt: Int

  """All values greater than or equal the given value."""
  country_id_gte: Int
  region_id: Int

  """All values that are not equal to given value."""
  region_id_not: Int

  """All values that are contained in given list."""
  region_id_in: [Int!]

  """All values that are not contained in given list."""
  region_id_not_in: [Int!]

  """All values less than the given value."""
  region_id_lt: Int

  """All values less than or equal the given value."""
  region_id_lte: Int

  """All values greater than the given value."""
  region_id_gt: Int

  """All values greater than or equal the given value."""
  region_id_gte: Int
  city_id: Int

  """All values that are not equal to given value."""
  city_id_not: Int

  """All values that are contained in given list."""
  city_id_in: [Int!]

  """All values that are not contained in given list."""
  city_id_not_in: [Int!]

  """All values less than the given value."""
  city_id_lt: Int

  """All values less than or equal the given value."""
  city_id_lte: Int

  """All values greater than the given value."""
  city_id_gt: Int

  """All values greater than or equal the given value."""
  city_id_gte: Int
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  timezone: String

  """All values that are not equal to given value."""
  timezone_not: String

  """All values that are contained in given list."""
  timezone_in: [String!]

  """All values that are not contained in given list."""
  timezone_not_in: [String!]

  """All values less than the given value."""
  timezone_lt: String

  """All values less than or equal the given value."""
  timezone_lte: String

  """All values greater than the given value."""
  timezone_gt: String

  """All values greater than or equal the given value."""
  timezone_gte: String

  """All values containing the given string."""
  timezone_contains: String

  """All values not containing the given string."""
  timezone_not_contains: String

  """All values starting with the given string."""
  timezone_starts_with: String

  """All values not starting with the given string."""
  timezone_not_starts_with: String

  """All values ending with the given string."""
  timezone_ends_with: String

  """All values not ending with the given string."""
  timezone_not_ends_with: String
  language_id: Int

  """All values that are not equal to given value."""
  language_id_not: Int

  """All values that are contained in given list."""
  language_id_in: [Int!]

  """All values that are not contained in given list."""
  language_id_not_in: [Int!]

  """All values less than the given value."""
  language_id_lt: Int

  """All values less than or equal the given value."""
  language_id_lte: Int

  """All values greater than the given value."""
  language_id_gt: Int

  """All values greater than or equal the given value."""
  language_id_gte: Int
  num_blog_posts: Int

  """All values that are not equal to given value."""
  num_blog_posts_not: Int

  """All values that are contained in given list."""
  num_blog_posts_in: [Int!]

  """All values that are not contained in given list."""
  num_blog_posts_not_in: [Int!]

  """All values less than the given value."""
  num_blog_posts_lt: Int

  """All values less than or equal the given value."""
  num_blog_posts_lte: Int

  """All values greater than the given value."""
  num_blog_posts_gt: Int

  """All values greater than or equal the given value."""
  num_blog_posts_gte: Int
  last: Int

  """All values that are not equal to given value."""
  last_not: Int

  """All values that are contained in given list."""
  last_in: [Int!]

  """All values that are not contained in given list."""
  last_not_in: [Int!]

  """All values less than the given value."""
  last_lt: Int

  """All values less than or equal the given value."""
  last_lte: Int

  """All values greater than the given value."""
  last_gt: Int

  """All values greater than or equal the given value."""
  last_gte: Int
  created_at: DateTime

  """All values that are not equal to given value."""
  created_at_not: DateTime

  """All values that are contained in given list."""
  created_at_in: [DateTime!]

  """All values that are not contained in given list."""
  created_at_not_in: [DateTime!]

  """All values less than the given value."""
  created_at_lt: DateTime

  """All values less than or equal the given value."""
  created_at_lte: DateTime

  """All values greater than the given value."""
  created_at_gt: DateTime

  """All values greater than or equal the given value."""
  created_at_gte: DateTime
  notification: Int

  """All values that are not equal to given value."""
  notification_not: Int

  """All values that are contained in given list."""
  notification_in: [Int!]

  """All values that are not contained in given list."""
  notification_not_in: [Int!]

  """All values less than the given value."""
  notification_lt: Int

  """All values less than or equal the given value."""
  notification_lte: Int

  """All values greater than the given value."""
  notification_gt: Int

  """All values greater than or equal the given value."""
  notification_gte: Int
  icq: String

  """All values that are not equal to given value."""
  icq_not: String

  """All values that are contained in given list."""
  icq_in: [String!]

  """All values that are not contained in given list."""
  icq_not_in: [String!]

  """All values less than the given value."""
  icq_lt: String

  """All values less than or equal the given value."""
  icq_lte: String

  """All values greater than the given value."""
  icq_gt: String

  """All values greater than or equal the given value."""
  icq_gte: String

  """All values containing the given string."""
  icq_contains: String

  """All values not containing the given string."""
  icq_not_contains: String

  """All values starting with the given string."""
  icq_starts_with: String

  """All values not starting with the given string."""
  icq_not_starts_with: String

  """All values ending with the given string."""
  icq_ends_with: String

  """All values not ending with the given string."""
  icq_not_ends_with: String
  www: String

  """All values that are not equal to given value."""
  www_not: String

  """All values that are contained in given list."""
  www_in: [String!]

  """All values that are not contained in given list."""
  www_not_in: [String!]

  """All values less than the given value."""
  www_lt: String

  """All values less than or equal the given value."""
  www_lte: String

  """All values greater than the given value."""
  www_gt: String

  """All values greater than or equal the given value."""
  www_gte: String

  """All values containing the given string."""
  www_contains: String

  """All values not containing the given string."""
  www_not_contains: String

  """All values starting with the given string."""
  www_starts_with: String

  """All values not starting with the given string."""
  www_not_starts_with: String

  """All values ending with the given string."""
  www_ends_with: String

  """All values not ending with the given string."""
  www_not_ends_with: String
  contact_email: String

  """All values that are not equal to given value."""
  contact_email_not: String

  """All values that are contained in given list."""
  contact_email_in: [String!]

  """All values that are not contained in given list."""
  contact_email_not_in: [String!]

  """All values less than the given value."""
  contact_email_lt: String

  """All values less than or equal the given value."""
  contact_email_lte: String

  """All values greater than the given value."""
  contact_email_gt: String

  """All values greater than or equal the given value."""
  contact_email_gte: String

  """All values containing the given string."""
  contact_email_contains: String

  """All values not containing the given string."""
  contact_email_not_contains: String

  """All values starting with the given string."""
  contact_email_starts_with: String

  """All values not starting with the given string."""
  contact_email_not_starts_with: String

  """All values ending with the given string."""
  contact_email_ends_with: String

  """All values not ending with the given string."""
  contact_email_not_ends_with: String
  mobile_phone: String

  """All values that are not equal to given value."""
  mobile_phone_not: String

  """All values that are contained in given list."""
  mobile_phone_in: [String!]

  """All values that are not contained in given list."""
  mobile_phone_not_in: [String!]

  """All values less than the given value."""
  mobile_phone_lt: String

  """All values less than or equal the given value."""
  mobile_phone_lte: String

  """All values greater than the given value."""
  mobile_phone_gt: String

  """All values greater than or equal the given value."""
  mobile_phone_gte: String

  """All values containing the given string."""
  mobile_phone_contains: String

  """All values not containing the given string."""
  mobile_phone_not_contains: String

  """All values starting with the given string."""
  mobile_phone_starts_with: String

  """All values not starting with the given string."""
  mobile_phone_not_starts_with: String

  """All values ending with the given string."""
  mobile_phone_ends_with: String

  """All values not ending with the given string."""
  mobile_phone_not_ends_with: String
  home_phone: String

  """All values that are not equal to given value."""
  home_phone_not: String

  """All values that are contained in given list."""
  home_phone_in: [String!]

  """All values that are not contained in given list."""
  home_phone_not_in: [String!]

  """All values less than the given value."""
  home_phone_lt: String

  """All values less than or equal the given value."""
  home_phone_lte: String

  """All values greater than the given value."""
  home_phone_gt: String

  """All values greater than or equal the given value."""
  home_phone_gte: String

  """All values containing the given string."""
  home_phone_contains: String

  """All values not containing the given string."""
  home_phone_not_contains: String

  """All values starting with the given string."""
  home_phone_starts_with: String

  """All values not starting with the given string."""
  home_phone_not_starts_with: String

  """All values ending with the given string."""
  home_phone_ends_with: String

  """All values not ending with the given string."""
  home_phone_not_ends_with: String
  about: String

  """All values that are not equal to given value."""
  about_not: String

  """All values that are contained in given list."""
  about_in: [String!]

  """All values that are not contained in given list."""
  about_not_in: [String!]

  """All values less than the given value."""
  about_lt: String

  """All values less than or equal the given value."""
  about_lte: String

  """All values greater than the given value."""
  about_gt: String

  """All values greater than or equal the given value."""
  about_gte: String

  """All values containing the given string."""
  about_contains: String

  """All values not containing the given string."""
  about_not_contains: String

  """All values starting with the given string."""
  about_starts_with: String

  """All values not starting with the given string."""
  about_not_starts_with: String

  """All values ending with the given string."""
  about_ends_with: String

  """All values not ending with the given string."""
  about_not_ends_with: String
  experience: String

  """All values that are not equal to given value."""
  experience_not: String

  """All values that are contained in given list."""
  experience_in: [String!]

  """All values that are not contained in given list."""
  experience_not_in: [String!]

  """All values less than the given value."""
  experience_lt: String

  """All values less than or equal the given value."""
  experience_lte: String

  """All values greater than the given value."""
  experience_gt: String

  """All values greater than or equal the given value."""
  experience_gte: String

  """All values containing the given string."""
  experience_contains: String

  """All values not containing the given string."""
  experience_not_contains: String

  """All values starting with the given string."""
  experience_starts_with: String

  """All values not starting with the given string."""
  experience_not_starts_with: String

  """All values ending with the given string."""
  experience_ends_with: String

  """All values not ending with the given string."""
  experience_not_ends_with: String
  job_title: String

  """All values that are not equal to given value."""
  job_title_not: String

  """All values that are contained in given list."""
  job_title_in: [String!]

  """All values that are not contained in given list."""
  job_title_not_in: [String!]

  """All values less than the given value."""
  job_title_lt: String

  """All values less than or equal the given value."""
  job_title_lte: String

  """All values greater than the given value."""
  job_title_gt: String

  """All values greater than or equal the given value."""
  job_title_gte: String

  """All values containing the given string."""
  job_title_contains: String

  """All values not containing the given string."""
  job_title_not_contains: String

  """All values starting with the given string."""
  job_title_starts_with: String

  """All values not starting with the given string."""
  job_title_not_starts_with: String

  """All values ending with the given string."""
  job_title_ends_with: String

  """All values not ending with the given string."""
  job_title_not_ends_with: String
  work_place: String

  """All values that are not equal to given value."""
  work_place_not: String

  """All values that are contained in given list."""
  work_place_in: [String!]

  """All values that are not contained in given list."""
  work_place_not_in: [String!]

  """All values less than the given value."""
  work_place_lt: String

  """All values less than or equal the given value."""
  work_place_lte: String

  """All values greater than the given value."""
  work_place_gt: String

  """All values greater than or equal the given value."""
  work_place_gte: String

  """All values containing the given string."""
  work_place_contains: String

  """All values not containing the given string."""
  work_place_not_contains: String

  """All values starting with the given string."""
  work_place_starts_with: String

  """All values not starting with the given string."""
  work_place_not_starts_with: String

  """All values ending with the given string."""
  work_place_ends_with: String

  """All values not ending with the given string."""
  work_place_not_ends_with: String
  ip: String

  """All values that are not equal to given value."""
  ip_not: String

  """All values that are contained in given list."""
  ip_in: [String!]

  """All values that are not contained in given list."""
  ip_not_in: [String!]

  """All values less than the given value."""
  ip_lt: String

  """All values less than or equal the given value."""
  ip_lte: String

  """All values greater than the given value."""
  ip_gt: String

  """All values greater than or equal the given value."""
  ip_gte: String

  """All values containing the given string."""
  ip_contains: String

  """All values not containing the given string."""
  ip_not_contains: String

  """All values starting with the given string."""
  ip_starts_with: String

  """All values not starting with the given string."""
  ip_not_starts_with: String

  """All values ending with the given string."""
  ip_ends_with: String

  """All values not ending with the given string."""
  ip_not_ends_with: String
  confirmation_code: String

  """All values that are not equal to given value."""
  confirmation_code_not: String

  """All values that are contained in given list."""
  confirmation_code_in: [String!]

  """All values that are not contained in given list."""
  confirmation_code_not_in: [String!]

  """All values less than the given value."""
  confirmation_code_lt: String

  """All values less than or equal the given value."""
  confirmation_code_lte: String

  """All values greater than the given value."""
  confirmation_code_gt: String

  """All values greater than or equal the given value."""
  confirmation_code_gte: String

  """All values containing the given string."""
  confirmation_code_contains: String

  """All values not containing the given string."""
  confirmation_code_not_contains: String

  """All values starting with the given string."""
  confirmation_code_starts_with: String

  """All values not starting with the given string."""
  confirmation_code_not_starts_with: String

  """All values ending with the given string."""
  confirmation_code_ends_with: String

  """All values not ending with the given string."""
  confirmation_code_not_ends_with: String
  rating: Float

  """All values that are not equal to given value."""
  rating_not: Float

  """All values that are contained in given list."""
  rating_in: [Float!]

  """All values that are not contained in given list."""
  rating_not_in: [Float!]

  """All values less than the given value."""
  rating_lt: Float

  """All values less than or equal the given value."""
  rating_lte: Float

  """All values greater than the given value."""
  rating_gt: Float

  """All values greater than or equal the given value."""
  rating_gte: Float
  etherwallet: String

  """All values that are not equal to given value."""
  etherwallet_not: String

  """All values that are contained in given list."""
  etherwallet_in: [String!]

  """All values that are not contained in given list."""
  etherwallet_not_in: [String!]

  """All values less than the given value."""
  etherwallet_lt: String

  """All values less than or equal the given value."""
  etherwallet_lte: String

  """All values greater than the given value."""
  etherwallet_gt: String

  """All values greater than or equal the given value."""
  etherwallet_gte: String

  """All values containing the given string."""
  etherwallet_contains: String

  """All values not containing the given string."""
  etherwallet_not_contains: String

  """All values starting with the given string."""
  etherwallet_starts_with: String

  """All values not starting with the given string."""
  etherwallet_not_starts_with: String

  """All values ending with the given string."""
  etherwallet_ends_with: String

  """All values not ending with the given string."""
  etherwallet_not_ends_with: String
  photo: String

  """All values that are not equal to given value."""
  photo_not: String

  """All values that are contained in given list."""
  photo_in: [String!]

  """All values that are not contained in given list."""
  photo_not_in: [String!]

  """All values less than the given value."""
  photo_lt: String

  """All values less than or equal the given value."""
  photo_lte: String

  """All values greater than the given value."""
  photo_gt: String

  """All values greater than or equal the given value."""
  photo_gte: String

  """All values containing the given string."""
  photo_contains: String

  """All values not containing the given string."""
  photo_not_contains: String

  """All values starting with the given string."""
  photo_starts_with: String

  """All values not starting with the given string."""
  photo_not_starts_with: String

  """All values ending with the given string."""
  photo_ends_with: String

  """All values not ending with the given string."""
  photo_not_ends_with: String
  sudo: Boolean

  """All values that are not equal to given value."""
  sudo_not: Boolean
  Groups_every: UserGroupWhereInput
  Groups_some: UserGroupWhereInput
  Groups_none: UserGroupWhereInput
  CreatedUsers_every: UserWhereInput
  CreatedUsers_some: UserWhereInput
  CreatedUsers_none: UserWhereInput
  CreatedBy: UserWhereInput
  LogedIns_every: LogedInWhereInput
  LogedIns_some: LogedInWhereInput
  LogedIns_none: LogedInWhereInput
  Files_every: FileWhereInput
  Files_some: FileWhereInput
  Files_none: FileWhereInput
  EthContractSourcesCreated_every: EthContractSourceWhereInput
  EthContractSourcesCreated_some: EthContractSourceWhereInput
  EthContractSourcesCreated_none: EthContractSourceWhereInput
  EthAccounts_every: EthAccountWhereInput
  EthAccounts_some: EthAccountWhereInput
  EthAccounts_none: EthAccountWhereInput
  Resources_every: ResourceWhereInput
  Resources_some: ResourceWhereInput
  Resources_none: ResourceWhereInput
  Rooms_every: ChatRoomWhereInput
  Rooms_some: ChatRoomWhereInput
  Rooms_none: ChatRoomWhereInput
  CreatedRooms_every: ChatRoomWhereInput
  CreatedRooms_some: ChatRoomWhereInput
  CreatedRooms_none: ChatRoomWhereInput
  Messages_every: ChatMessageWhereInput
  Messages_some: ChatMessageWhereInput
  Messages_none: ChatMessageWhereInput
  ReadedMessages_every: ChatMessageReadedWhereInput
  ReadedMessages_some: ChatMessageReadedWhereInput
  ReadedMessages_none: ChatMessageReadedWhereInput
  Notices_every: NoticeWhereInput
  Notices_some: NoticeWhereInput
  Notices_none: NoticeWhereInput
  Votes_every: VoteWhereInput
  Votes_some: VoteWhereInput
  Votes_none: VoteWhereInput
  NotificationTypes_every: NotificationTypeWhereInput
  NotificationTypes_some: NotificationTypeWhereInput
  NotificationTypes_none: NotificationTypeWhereInput
  NotificationTypesCreated_every: NotificationTypeWhereInput
  NotificationTypesCreated_some: NotificationTypeWhereInput
  NotificationTypesCreated_none: NotificationTypeWhereInput
  Tags_every: TagWhereInput
  Tags_some: TagWhereInput
  Tags_none: TagWhereInput
  ResourceTags_every: ResourceTagWhereInput
  ResourceTags_some: ResourceTagWhereInput
  ResourceTags_none: ResourceTagWhereInput
  PrismaProjects_every: ProjectWhereInput
  PrismaProjects_some: ProjectWhereInput
  PrismaProjects_none: ProjectWhereInput
  topics_every: TopicWhereInput
  topics_some: TopicWhereInput
  topics_none: TopicWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  Tarifs_every: UserTarifWhereInput
  Tarifs_some: UserTarifWhereInput
  Tarifs_none: UserTarifWhereInput
  Account: AccountWhereInput
  Places_every: PlaceWhereInput
  Places_some: PlaceWhereInput
  Places_none: PlaceWhereInput
}

input UserWhereUniqueInput {
  id: ID
  username: String
  user_id: Int
}

type Vote implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  Resource(where: ResourceWhereInput): Resource!
  User(where: UserWhereInput): User!
  value: Float!
}

"""A connection to a list of items."""
type VoteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VoteEdge]!
  aggregate: AggregateVote!
}

input VoteCreateInput {
  value: Float!
  Resource: ResourceCreateOneWithoutVotesInput!
  User: UserCreateOneWithoutVotesInput!
}

input VoteCreateManyWithoutResourceInput {
  create: [VoteCreateWithoutResourceInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateManyWithoutUserInput {
  create: [VoteCreateWithoutUserInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateWithoutResourceInput {
  value: Float!
  User: UserCreateOneWithoutVotesInput!
}

input VoteCreateWithoutUserInput {
  value: Float!
  Resource: ResourceCreateOneWithoutVotesInput!
}

"""An edge in a connection."""
type VoteEdge {
  """The item at the end of the edge."""
  node: Vote!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VoteOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  value_ASC
  value_DESC
}

type VotePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  value: Float!
}

type VoteSubscriptionPayload {
  mutation: MutationType!
  node: Vote
  updatedFields: [String!]
  previousValues: VotePreviousValues
}

input VoteSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VoteSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VoteSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VoteSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VoteWhereInput
}

input VoteUpdateInput {
  value: Float
  Resource: ResourceUpdateOneWithoutVotesInput
  User: UserUpdateOneWithoutVotesInput
}

input VoteUpdateManyWithoutResourceInput {
  create: [VoteCreateWithoutResourceInput!]
  connect: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  delete: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutResourceInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutResourceInput!]
}

input VoteUpdateManyWithoutUserInput {
  create: [VoteCreateWithoutUserInput!]
  connect: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  delete: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutUserInput!]
}

input VoteUpdateWithoutResourceDataInput {
  value: Float
  User: UserUpdateOneWithoutVotesInput
}

input VoteUpdateWithoutUserDataInput {
  value: Float
  Resource: ResourceUpdateOneWithoutVotesInput
}

input VoteUpdateWithWhereUniqueWithoutResourceInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutResourceDataInput!
}

input VoteUpdateWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutUserDataInput!
}

input VoteUpsertWithWhereUniqueWithoutResourceInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutResourceDataInput!
  create: VoteCreateWithoutResourceInput!
}

input VoteUpsertWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutUserDataInput!
  create: VoteCreateWithoutUserInput!
}

input VoteWhereInput {
  """Logical AND on all given filters."""
  AND: [VoteWhereInput!]

  """Logical OR on all given filters."""
  OR: [VoteWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VoteWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  value: Float

  """All values that are not equal to given value."""
  value_not: Float

  """All values that are contained in given list."""
  value_in: [Float!]

  """All values that are not contained in given list."""
  value_not_in: [Float!]

  """All values less than the given value."""
  value_lt: Float

  """All values less than or equal the given value."""
  value_lte: Float

  """All values greater than the given value."""
  value_gt: Float

  """All values greater than or equal the given value."""
  value_gte: Float
  Resource: ResourceWhereInput
  User: UserWhereInput
}

input VoteWhereUniqueInput {
  id: ID
}
