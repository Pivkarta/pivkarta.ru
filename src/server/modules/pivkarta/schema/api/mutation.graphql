

input TarifCreateOneWithoutUserTarifsInput {
  # create: TarifCreateWithoutUserTarifsInput
  connect: TarifWhereUniqueInput
}



type Mutation{
   

  createTopicProcessor(
    data: TopicCreateInput!
  ): TopicResponse!

  updateTopicProcessor(
    id: ID
    where:TopicWhereUniqueInput
    data: TopicUpdateInput!
  ): TopicResponse!

  updatePlaceData(
    where: PlaceWhereUniqueInput!
    object_data: Json!
  ): Place!

  updatePlaceProcessor(
    data: PlaceUpdateInput!
    where: PlaceWhereUniqueInput!
  ): PlaceResponse!

  updateBeerProcessor(
    data: BeerUpdateInput!
    where: BeerWhereUniqueInput
  ): BeerPayload!

  createBeerProcessor(
    data: BeerCreateInput!
  ): BeerPayload!

  togglePlaceBeer(
    placeId: ID!
    beerId: ID!
    active: Boolean!
  ): Place

  
  updatePlaceBeerProcessor(
    data: PlaceBeerUpdateInput!
    where: PlaceBeerWhereUniqueInput!
  ): PlaceBeerPayload

  createPlaceProcessor(
    data: PlaceCreateInput!
  ): PlacePayload!

  createUserTarif(
    data: UserTarifCreateInput!
    promoCode: String
  ): UserTarif!

  createTarifRequest(
    data: TarifRequestCreateInput!
  ): TarifRequest!

  # createLetter(
  #   data: LetterCreateInput!
  # ): Letter!

  # updateLetter(
  #   data: LetterUpdateInput!
  #   where: LetterWhereUniqueInput!
  # ): Letter


  createCommentProcessor(
    data: CommentCreateInput!
  ): CommentResponse!

  updateCommentProcessor(
    where:CommentWhereUniqueInput
    data: CommentUpdateInput!
  ): CommentResponse!

}