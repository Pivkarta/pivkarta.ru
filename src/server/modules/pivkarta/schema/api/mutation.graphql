

# type Error {
#   key: String!
#   message: String!
# }


type PlaceBeerPayload{
  success: Boolean!
  message: String
  errors: [Error!]!
  data: PlaceBeer
}

# type AuthPayload {
#   success: Boolean!
#   message: String
#   errors: [Error!]!
#   token: String
#   data: User
# }

# type UserResponse {
#   success: Boolean!
#   message: String
#   errors: [Error!]!
#   data: User
# }

type PlaceResponse {
  success: Boolean!
  message: String
  errors: [Error!]!
  data: Place
}

type TopicResponse {
  success: Boolean!
  message: String
  errors: [Error!]!
  data: Topic
}

type CommentResponse {
  success: Boolean!
  message: String
  errors: [Error!]!
  data: Comment
}


input PlaceCreateOneWithoutLettersInput {
  id: ID!
}


input CommentCreateInput {
  object_id: Int
  type_id: Int
  parent: ID
  editor_content: Json
}


input CommentUpdateInput {
  editor_content: Json
}


input BeerCreateInput {
  name: String
  url_name: String
  description: String
  editor_content: Json
  country: String
  image: String
  manufacturer: String
  region: String
  manufacture_years: String
  container: Int
  alcohol: String
  wort_percent: String
  components: String
  bitter: Int
  type_id: Int
  color: String
  is_request: Int
  rating: Float
  add_user_id: Int
  created_at: Int
  gallery: Json
}


input BeerUpdateInput {
  name: String
  description: String
  editor_content: Json
  country: String
  image: String
  manufacturer: String
  region: String
  manufacture_years: String
  container: Int
  alcohol: String
  wort_percent: String
  components: String
  bitter: Int
  type_id: Int
  color: String
  is_request: Int
  rating: Float
  gallery: Json
}


input TopicCreateInput {
  name: String!
  editor_content: Json
  published: Boolean
  description: String
}

input TopicUpdateInput { 
  name: String
  editor_content: Json
  published: Boolean
  description: String
}


input UserUpdateInput {
  # user_id: Int
  username: String
  email: String
  password: String
  first_name: String
  middle_name: String
  last_name: String
  fullname: String
  image: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  # status: String
  # timezone: String
  # language_id: Int
  # num_blog_posts: Int
  # last: Int
  # created_at: DateTime
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  # ip: String
  # confirmation_code: String
  # rating: Float
  etherwallet: String
  photo: String
  # sudo: Boolean
  # topics: TopicUpdateManyWithoutCreated_byInput
  # comments: CommentUpdateManyWithoutCreated_byInput
  # files: FileUpdateManyWithoutCreatedbyInput
  # Tarifs: UserTarifUpdateManyWithoutUserInput
  # Account: AccountUpdateOneWithoutUserInput
  # Places: PlaceUpdateManyWithoutOwnerInput
}


input UserCreateOneWithoutTarifsInput {
  # create: UserCreateWithoutTarifsInput
  connect: UserWhereUniqueInput
}

input TarifCreateOneWithoutUserTarifsInput {
  # create: TarifCreateWithoutUserTarifsInput
  connect: TarifWhereUniqueInput
}

input UserCreateOneInput {
  # create: UserCreateInput
  connect: UserWhereUniqueInput
}



input LetterUpdateInput {
  email: String
  subject: String
  message: String
  status: LetterStatus
  Place: PlaceUpdateOneWithoutLettersInput
}

type Mutation{
  
  # signup(
  #   username: String!
  #   email: String!
  #   password: String!
  # ): AuthPayload!

  # signin(username: String!, password: String!): AuthPayload!



  # updateUser(
  #   data: UserUpdateInput!
  #   id: ID
  #   where: UserWhereUniqueInput
  # ): UserResponse!

  # resetPassword(
  #   username: String!
  # ): Boolean!

  updateUserPhoto(
    data: UserUpdateInput!
  ): User


  # singleUpload (file: Upload!): File
  # multipleUpload (files: [Upload!]!): [File!]

  createTopicProcessor(
    data: TopicUpdateInput!
  ): TopicResponse!

  updateTopicProcessor(
    id: ID
    where:TopicWhereUniqueInput
    data: TopicUpdateInput!
  ): TopicResponse!

  updatePlaceData(
    where: PlaceWhereUniqueInput!
    object_data: Json!
  ): Place!

  updatePlaceProcessor(
    data: PlaceUpdateInput!
    where: PlaceWhereUniqueInput!
  ): PlaceResponse!

  updateBeerProcessor(
    data: BeerUpdateInput!
    where: BeerWhereUniqueInput
  ): BeerPayload!

  createBeerProcessor(
    data: BeerCreateInput!
  ): BeerPayload!

  togglePlaceBeer(
    placeId: ID!
    beerId: ID!
    active: Boolean!
  ): Place

  
  updatePlaceBeerProcessor(
    data: PlaceBeerUpdateInput!
    where: PlaceBeerWhereUniqueInput!
  ): PlaceBeerPayload

  createPlaceProcessor(
    data: PlaceCreateInput!
  ): PlacePayload!

  createUserTarif(
    data: UserTarifCreateInput!
    promoCode: String
  ): UserTarif!

  createTarifRequest(
    data: TarifRequestCreateInput!
  ): TarifRequest!

  createLetter(
    data: LetterCreateInput!
  ): Letter!

  updateLetter(
    data: LetterUpdateInput!
    where: LetterWhereUniqueInput!
  ): Letter


  createCommentProcessor(
    data: CommentCreateInput!
  ): CommentResponse!

  updateCommentProcessor(
    where:CommentWhereUniqueInput
    data: CommentUpdateInput!
  ): CommentResponse!

}