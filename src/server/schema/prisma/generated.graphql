type Route {
  id: ID! @unique
  name: String
  path: String! @unique
  exact: Boolean! @default(value: false)
  component: RouteComponent!
  Parent: Route @relation(name: "Routes")
  Childs: [Route!]! @relation(name: "Routes")
}

enum RouteComponent {
  Resource
}

type Beer {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  beer_id: Int @unique
  name: String
  url_name: String
  description: String
  editor_content: Json
  country: String
  image: String @default(value: "empty.jpeg")
  num_comments: Int @default(value: 0)
  num_photos: Int @default(value: 0)
  manufacturer: String
  region: String
  manufacture_years: String
  container: Int
  alcohol: String
  wort_percent: String
  components: String
  bitter: Int
  type_id: Int
  color: String
  is_request: Int
  rating: Float
  add_user_id: Int
  created_at: Int
  gallery: Json
  places: [PlaceBeer!]! @relation(name: "PlaceBeerBeer")
}

type Account {
  id: ID! @unique
  balance: Float! @default(value: 0)
  User: User! @relation(name: "UserAccount")
  Transactions: [Transaction!]! @relation(name: "AccountTransactions")
}

type Transaction {
  id: ID! @unique
  createdAt: DateTime!
  amount: Float!
  Account: Account! @relation(name: "AccountTransactions")
  CreatedBy: User! @relation(name: "TransactionCreatedBy")
}

type Tarif {
  id: ID! @unique
  name: String!
  active: Boolean @default(value: true)
  maxPriceItems: Int
  price: Float
  UserTarifs: [UserTarif!]! @relation(name: "TarifUserTarifs")
  allowIcon: Boolean
  allowBanner: Boolean
}

type UserTarif {
  id: ID! @unique
  User: User! @relation(name: "UserTarifs")
  Tarif: Tarif! @relation(name: "TarifUserTarifs")
  createdAt: DateTime!
  dateTill: DateTime
}

type TarifRequest {
  id: ID! @unique
  User: User!
  Tarif: Tarif!
  createdAt: DateTime!
  executed: Boolean! @default(value: false)
}

type City {
  id: ID! @unique
  city_id: Int! @unique
  name: String!
  alias: String! @unique
  lat: Float!
  lng: Float!
}

type Comment {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  comment_id: Int @unique
  object_id: Int
  type_id: Int! @default(value: 1)
  editor_content: Json!
  is_checked: Int! @default(value: 0)
  name: String
  created_by: User @relation(name: "UserComments")
  parent: ID
}

type CommentType {
  id: ID! @unique
  name: String! @unique
  code: Int! @unique
}

type Letter {
  Place: Place @relation(name: "PlaceLetters", onDelete: SET_NULL)
  id: ID! @unique
  email: String!
  subject: String!
  message: String!
  status: LetterStatus! @default(value: Created)
}

type Photo {
  id: ID! @unique
  photo_id: Int @unique
  user_id: Int
  type_id: Int
  name: String
  description: String
  num_comments: Int
  created_at: DateTime
  updated_at: DateTime
  file_name: String
}

type Place {
  id: ID! @unique
  updatedAt: DateTime!
  createdAt: DateTime!
  place_id: Int @unique
  name: String!
  description: String
  address: String
  lng: Float
  lat: Float
  website: String
  phone: String
  work_hours: String
  metro: String
  content: Json
  schedules: Json
  url_name: String
  image: String
  gallery: Json
  is_bar: Boolean @default(value: false)
  is_shop: Boolean @default(value: false)
  is_brewery: Boolean @default(value: false)
  active: Boolean @default(value: true)
  email: String
  beers: [PlaceBeer!]! @relation(name: "PlaceBeerPlace")
  Owner: User @relation(name: "UserOwnedPlaces")
  Letters: [Letter!]! @relation(name: "PlaceLetters", onDelete: CASCADE)
  best: Boolean
  is_request: Int
}

type PlaceBeer {
  id: ID! @unique
  price: Float
  Place: Place! @relation(name: "PlaceBeerPlace")
  Beer: Beer! @relation(name: "PlaceBeerBeer")
}

type Topic {
  id: ID! @unique
  topic_id: Int @unique
  updatedAt: DateTime!
  createdAt: DateTime!
  created_at: DateTime!
  created_by: User! @relation(name: "UserTopics")
  name: String!
  editor_content: Json
  url_name: String @unique
  type_id: Int!
  published: Boolean @default(value: true)
  description: String
}

type User {
  user_id: Int @unique
  first_name: String
  middle_name: String
  last_name: String
  fullname: String
  image: String
  gender: Int
  birth_date: DateTime
  country_id: Int
  region_id: Int
  city_id: Int
  status: String
  timezone: String
  language_id: Int
  num_blog_posts: Int
  last: Int
  created_at: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  notification: Int
  icq: String
  www: String
  contact_email: String
  mobile_phone: String
  home_phone: String
  about: String
  experience: String
  job_title: String
  work_place: String
  ip: String
  confirmation_code: String
  rating: Float
  etherwallet: String
  photo: String
  topics: [Topic!]! @relation(name: "UserTopics")
  comments: [Comment!]! @relation(name: "UserComments")
  Tarifs: [UserTarif!]! @relation(name: "UserTarifs")
  Account: Account @relation(name: "UserAccount")
  Places: [Place!]! @relation(name: "UserOwnedPlaces")
  sudo: Boolean @default(value: false)
  id: ID! @unique
  username: String @unique
  email: String @unique
  phone: String
  showEmail: Boolean @default(value: false)
  showPhone: Boolean @default(value: false)
  password: String
  address: String
  files: [File!]! @relation(name: "UserFiles")
  active: Boolean @default(value: true)
  activated: Boolean @default(value: false)
  deleted: Boolean @default(value: false)
  Groups: [UserGroup!]! @relation(name: "UserGroups")
  CreatedUsers: [User!]! @relation(name: "UserCreatedBy", onDelete: SET_NULL)
  CreatedBy: User @relation(name: "UserCreatedBy", onDelete: SET_NULL)
  LogedIns: [LogedIn!]! @relation(name: "UserLogedIn")
}

type File {
  id: ID! @unique
  path: String!
  filename: String!
  mimetype: String!
  encoding: String!
  createdby: User! @relation(name: "UserFiles")
  hash: String
}

enum LetterStatus {
  Created
  Processing
  Sended
  Error
}

enum LogLevel {
  Info
  Notice
  Warning
  Error
  Fatal
}

type Log {
  id: ID! @unique
  level: LogLevel! @default(value: Info)
  objectType: ID
  message: String!
  stack: String
}

type UserGroup {
  id: ID! @unique
  name: String! @unique
  Users: [User!]! @relation(name: "UserGroups")
}

type LogedIn {
  id: ID! @unique
  createdAt: DateTime!
  fake: Boolean @default(value: true)
  User: User! @relation(name: "UserLogedIn")
}
